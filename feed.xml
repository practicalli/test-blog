<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://practical.li/" rel="self" type="application/rss+xml"/><title>Practicalli</title><link>http://practical.li/</link><description>Discovering the fun in Functional Programming with Clojure</description><lastBuildDate>Sun, 15 Aug 2021 15:52:15 +0100</lastBuildDate><generator>clj-rss</generator><item><guid>http://practical.li/test-blog/posts/overview-of-language-server-protocol-lsp-for-clojure-development/</guid><link>http://practical.li/test-blog/posts/overview-of-language-server-protocol-lsp-for-clojure-development/</link><title>Overview of Language Server Protocol LSP for Clojure development</title><description>&lt;p&gt;Microsoft Language Server Protocol, LSP, is exactly what the name says it is.  Its a (JSON RPC) protocol.  Its no more and no less than that.  LSP is however a big strategy peace for Mircrosoft to encourage developers to adopt VS Code, which naturally provides support for the LSP protocol.  The implementation of tooling that uses LSP is left to companies and communities that develop editor and related tools.&lt;/p&gt;&lt;p&gt;Standards can be an opportunity to focus development work and provide a rich set of tools that are far easier to integrate.  There are many examples of where a protocol has provided a huge amount of diversity, such as TCP/IP, DNS, HTTP and HTML protocols that drove the creation of the web we know today. Standard protocols in themselves did not make the web, but allowed developers to build on top of them and create the rich and diverse experience on the web that we see today.&lt;/p&gt;&lt;p&gt;LSP is no different.  By itself LSP provides no benefit.  However, when adopted as a standard by tooling developers it has the potential to help grow an even richer experience for the whole developer community.&lt;/p&gt;&lt;p&gt;That is the promise of LSP, but is it delivering?  Is LSP improving the Clojure development experience?  Is LSP right for you (right now)?&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="lsp&amp;#95;language&amp;#95;features"&gt;LSP language features&lt;/h2&gt;&lt;p&gt;LSP protocol should enable a standard set of features for editing, however, this is completely dependent on the LSP server and editor client implementations.  Each LSP server is typically programming language specific, as much analysis of the language is required to provide these features.  The information presented by editors using LSP servers is typically language specific too.&lt;/p&gt;&lt;p&gt;An LSP language server typically provides the static analysis of a project to provide an editor the data to create the following features&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auto-completion - symbols, functions, namespaces, etc.&lt;/li&gt;&lt;li&gt;Code actions - extracting common code into functions, alter privacy, etc.&lt;/li&gt;&lt;li&gt;Live linting - surfacing errors as they occur&lt;/li&gt;&lt;li&gt;Namespace management - add namespaces / package names&lt;/li&gt;&lt;li&gt;Navigation - jump to function / method definitions&lt;/li&gt;&lt;li&gt;Refactor code - renaming symbols across projects&lt;/li&gt;&lt;li&gt;Semantic tokens - highlight symbol throughout the code and provide detailed syntax colouring&lt;/li&gt;&lt;li&gt;Show references - where functions are called from, call hierarchy&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt; Navigating call references can be valuable when trying to learn (and fix / refactor) an unfamiliar code base.  References provide an indication of how used function definitions are and provide a way to navigate to the parts of the code where a function is called. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;LSP tooling for Clojure is collectively provided by the language server implementation and the editor user interface design.  There is a challenge in surfacing this static analysis data in a manor that is meaningful and doesn't interrupt the developer workflow.&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/practicalli/graphic-design/live/clojure/clojure-language-server.png" alt="Clojure LSP" /&gt;&lt;/p&gt;&lt;h2 id="lsp&amp;#95;support&amp;#95;for&amp;#95;clojure"&gt;LSP support for Clojure&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/clojure-lsp/clojure-lsp'&gt;clojure-lsp&lt;/a&gt; is currently the only implementation of a language server for Clojure.  The clojure-lsp project takes a static analysis approach similar to that of IntelliJ and the Cursive extension.  Unlike cursive, the clojure-lsp project is open source and now also makes use of clj-kondo for static analysis of code.  As clojure-lsp is the only implementation for Clojure it does focus all the community effort in one project.  However, this project is still actively being developed and there is much development of tooling around this project, especially integrating these features with existing tools such as CIDER.&lt;/p&gt;&lt;p&gt;The &lt;a href='https://calva.io/'&gt;Calva&lt;/a&gt; project (VS Code extension) recently took the decision to implement its features extensively on Clojure-lsp.  This makes a lot of sense as the Microsoft VS Code tool has extensive support for the language server protocol.  The decision to leverage LSP should significantly reduce the amount of work required to bring Calva to feature parity with Cursive and CIDER.  The adoption of clojure-lsp by Calva has also increased the amount of work going into the cloure-lsp project in the last few months.&lt;/p&gt;&lt;p&gt;Emacs &lt;a href='https://emacs-lsp.github.io/lsp-mode/'&gt;lsp-mode&lt;/a&gt; project provides an Emacs client for clojure-lsp, using lsp-ui, treemacs, helm, ivy, iedit and ido packages to surface LSP features.  Integration with CIDER can be tricky as CIDER already provides the majority of features LSP implements.  So &lt;a href='https://practicalli.github.io/spacemacs/install-spacemacs/clojure-lsp/configure-lsp-and-cider.html'&gt;a minimal approach to LSP usage&lt;/a&gt; especially in the UI and code formatting is highly recommended to start with.&lt;/p&gt;&lt;p&gt;Neovim adds &lt;a href='https://neovim.io/doc/user/lsp.html'&gt;native LSP support&lt;/a&gt; in version 5 when released (available in nightly builds) which can be used with Conjure and Command of Control vim plugins.&lt;/p&gt;&lt;p&gt;Each of these editors already provide a wide range of features via LSP, although there is still implementation, testing, UI design and documentation to be produced.  It can be some effort to get a good experience with LSP, so ensure you know what features you want to add, disabling any features you do not need.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; IntelliJ provides much of the framework for Cursive static analysis and UI, so it seems unlikely that Cursive will change over to LSP any time soon. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="lsp&amp;#95;and&amp;#95;the&amp;#95;repl"&gt;LSP and the REPL&lt;/h2&gt;&lt;p&gt;LSP features should be seen as complementary to the highly interactive and dynamic nature of the Clojure REPL driven development.&lt;/p&gt;&lt;p&gt;A REPL runs Clojure code during development and typically in production (unless its AOT compiled or native compiled with Graal).  The REPL provides an instant feedback cycle that is so intrinsic to learning Clojure and designing with Clojure effectively.  Without the REPL a developer looses the most important aspect of the Clojure workflow.&lt;/p&gt;&lt;p&gt;The benefit from LSP tooling will vary greatly based on the development tools used and a developers experience with using static analysis driven tooling.  Most Clojure developers find clj-kondo an invaluable tool that provides live linting as they write code, ensuring syntax issues are avoided and idioms are more closely followed.  clj-kondo has a very simple user interface and a focus on syntax checking.  LSP tooling covers a far wider scope and therefore needs investment to build the many features and providing them in a way that is meaningful.&lt;/p&gt;&lt;p&gt;Developers who have worked with statically typed languages will benefit the most from LSP tooling, providing them with features they are familiar with.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Archaeology of unfamiliar or complex code bases can benefit from the data provided by static analysis of code, such as call references. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="extending&amp;#95;the&amp;#95;reach&amp;#95;of&amp;#95;clojure"&gt;Extending the reach of Clojure&lt;/h2&gt;&lt;p&gt;Becoming accustom to REPL driven development takes an investment in time, mainly because its different to the way other languages are developed.  By providing common editor features, lsp can provide developers with common features to speed up their learning curve a little.  Having some recognisable features can help to break down the resistance naturally felt when learning a lisp style language such as Clojure.&lt;/p&gt;&lt;p&gt;Ultimately, time should still be spent learning REPL driven development to become more effective at developing with Clojure.  However, LSP features should encourage more developers to give Clojure a try.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;For experienced Clojure developers who are skilled with REPL driven development and have invested time in sophisticated tooling (CIDER, Reveal, Portal), then there is very little extra benefit to LSP in the short term.  If you are productive with your current development environment, its unlikely that LSP tooling will provide a significant enhancement to your development experience.&lt;/p&gt;&lt;p&gt;Given the rich set of features LSP can offer, the biggest challenge is often making sense of them and understanding how they could be used.  As more documentation and guides are created, the value of these features should become more apparent to a wider audience.&lt;/p&gt;&lt;p&gt;Having an extensive set of tools for a wide range of editors that support interactive and static driven development seamlessly will improve the experience of all developers using and curious about learning Clojure.  This should lead to even more tooling for Clojure development by using the common services that clojure-lsp and LSP aware editors provide.&lt;/p&gt;&lt;p&gt;If you already know you are missing IDE like features in your Clojure development workflow, or just curious to learn, then dive right into using clojure-lsp and configuring your editor to make the most out these LSP features.&lt;/p&gt;&lt;p&gt;It will be interesting to see how far tooling around LSP can evolve.  There are a lot of features that work very well today and there are still more to come.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='https://practicalli.github.io/spacemacs/install-spacemacs/clojure-lsp/configure-lsp-and-cider.html'&gt;Practicalli Spacemacs provides a minimal configuration for clojure-lsp, cljfmt, lsp-mode and lsp-ui packages&lt;/a&gt;, to work in an optimal way for those already familiar with Cider. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Thank you &lt;a href='https://twitter.com/practical_li'&gt;@practical_li&lt;/a&gt;&lt;/p&gt;</description><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/brave-clojure-redux-part01-the-repl/</guid><link>http://practical.li/test-blog/posts/brave-clojure-redux-part01-the-repl/</link><title>Brave Clojure redux - part 1 - the REPL</title><description>&lt;p&gt;Brave Clojure redux is series that revisits the code examples and tooling covered in the book: "Clojure for the Brave and the True".  The good news is you do not need to be brave or true to read the book or learn Clojure either.  It does help if you have some time and motivation though.&lt;/p&gt;&lt;p&gt;Brave Clojure redux uses Clojure CLI tools rather than Leiningen as used in Brave Clojure.  Code examples will be used from the book, complemented with additional examples where relevant.&lt;/p&gt;&lt;p&gt;Part 1 covers the Clojure REPL process, a vital part of Clojure development. The basics of building and running a project are also included.&lt;/p&gt;&lt;p&gt;Practicalli Clojure covers Clojure CLI tools installation, along with example aliases in &lt;code&gt;practicalli/clojure-deps-edn&lt;/code&gt;, to provide a wide set of tools to support Clojure development.&lt;/p&gt;&lt;p&gt;A Clojure aware editor is also recommended, which part 2 will cover.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="practicalli&amp;#95;clojure&amp;#95;study&amp;#95;group"&gt;Practicalli Clojure study group&lt;/h2&gt;&lt;p&gt;The Practicalli Study guide playlist contains 100+ videos on Clojure and ClojureScript development.  From episode 97 onwards, the the videos are the Brave Clojure Redux series.&lt;/p&gt;&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/li8dRt6JdfQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;h2 id="coding&amp;#95;with&amp;#95;the&amp;#95;repl"&gt;Coding with the REPL&lt;/h2&gt;&lt;p&gt;The REPL is a process that reads Clojure code and returns the results.  Specifically, the REPL Reads the code and ensures its of a good form.  Then it Evaluates the code to return a value.  Then it Prints that value out to the terminal or editor.  Finally it Loops around again if there is more Clojure to read.&lt;/p&gt;&lt;p&gt;The REPL evaluates a single expression at a time, so you can see exactly what a piece of code does and see the result instantaneously.&lt;/p&gt;&lt;p&gt;Clojure development benefits greatly when actively using the REPL to create Clojure code.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Static analysis tools may be more familiar with other languages (Java, C#, etc.).  and can useful in supporting Clojure development with the REPL. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="which&amp;#95;clojure&amp;#95;development&amp;#95;tool?"&gt;Which Clojure development tool?&lt;/h2&gt;&lt;p&gt;The Brave Clojure book uses the Leiningen build automation tool for its examples.  Leiningen is a commonly used tool to create an manage Clojure projects for the last decade.&lt;/p&gt;&lt;p&gt;Brave Clojure redux uses the newer Clojure CLI tools which takes a data centric approach to the configuration, using a &lt;code&gt;deps.edn&lt;/code&gt; file.  As the name suggests, this file uses the Extensible Data Notation (EDN) which the Clojure syntax is written with.  A &lt;code&gt;deps.edn&lt;/code&gt; file is simply a hash-map that defines your project and the tools used with the project.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='https://www.youtube.com/watch?v=7d53ABMqpqU'&gt;"A Case for Clojure" by James Reeves&lt;/a&gt; covers in detail the EDN foundation of the Clojure language &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Clojure CLI tools focuses on dependency management and running Clojure code. Community projects are added as aliases, e.g. &lt;a href='https://github.com/practicalli/clojure-deps-edn'&gt;practicalli/clojure-deps.edn&lt;/a&gt;, providing a wide range of features as and when they are needed.&lt;/p&gt;&lt;p&gt;Practicalli Clojure has a more in depth &lt;a href='http://practicalli.github.io/clojure/alternative-tools/clojure-tools/compare-with-leiningen.html'&gt;comparison of Clojure CLI tools and Leiningen&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;new&amp;#95;clojure&amp;#95;project"&gt;Creating a New Clojure project&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/seancorfield/clj-new'&gt;clj-new&lt;/a&gt; will create the directory and file structure for a Clojure project, from one of many available templates.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -X:project/new :template app :name practicalli/brave-clojure-redux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates a simple project structure with matching &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; directory trees, with one &lt;code&gt;&amp;#42;&amp;#95;test.clj&lt;/code&gt; file for each &lt;code&gt;&amp;#42;&amp;#95;.clj&lt;/code&gt; source file.  The only difference between this project and the example in the Brave Clojure book is the project configuration file, &lt;code&gt;deps.edn&lt;/code&gt; rather than &lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;deps.edn&lt;/code&gt; project configuration and contains the paths used in the project, libraries required as dependencies and aliases for tasks and tools to support working with the project.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Install &lt;a href='https://github.com/practicalli/clojure-deps-edn'&gt;practicalli/clojure-deps.edn&lt;/a&gt; for the aliases used in this series. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="using&amp;#95;the&amp;#95;repl"&gt;Using the REPL&lt;/h2&gt;&lt;p&gt;The Clojure REPL can be used without a Clojure project to quickly try out some ideas with Clojure.  Its far more useful to use a Clojure project with a REPL, where code and experiments can be saved to files for later use.&lt;/p&gt;&lt;p&gt;Clojure CLI tools provides the &lt;code&gt;clojure&lt;/code&gt; command that runs a REPL process and provides a simple terminal user interface.  &lt;code&gt;clj&lt;/code&gt; is a wrapper that adds history support to the terminal REPL UI.  The Rebel readline project provides a rich terminal REPL UI experience.&lt;/p&gt;&lt;p&gt;Open a terminal window and change to the root of the Clojure project created previously.&lt;/p&gt;&lt;p&gt;Use the &lt;code&gt;:repl/rebel&lt;/code&gt; alias from &lt;a href='https://github.com/practicalli/clojure-deps-edn'&gt;practicalli/clojure-deps-edn&lt;/a&gt; to start a REPL process with the Rebel UI.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -M:repl/rebel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use the &lt;code&gt;:repl/rebel-nrepl&lt;/code&gt; alias instead to connect a Clojure aware editor to the REPL process via the nREPL server.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -M:repl/rebel-nrepl
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="running&amp;#95;the&amp;#95;clojure&amp;#95;project"&gt;Running the Clojure project&lt;/h2&gt;&lt;p&gt;Using the &lt;code&gt;app&lt;/code&gt; tempate, the &lt;code&gt;practicalli/brave&amp;#95;clojure&amp;#95;redux.clj&lt;/code&gt; file contains a definition for a function called &lt;code&gt;-main&lt;/code&gt;.  You can edit the &lt;code&gt;println&lt;/code&gt; in this function to return a different string if you wish, such as &lt;code&gt;&amp;quot;I'm a little teapot!&amp;quot;&lt;/code&gt; from the Brave Clojure book.&lt;/p&gt;&lt;p&gt;Run this function with Clojure CLI tools:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -M -m practicalli.brave-clojure-redux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;-M&lt;/code&gt; flag tells the Clojure command to use Clojure.main to look for a function called &lt;code&gt;-main&lt;/code&gt; in the namespace specified by the &lt;code&gt;-m&lt;/code&gt; flag.&lt;/p&gt;&lt;h2 id="building&amp;#95;a&amp;#95;clojure&amp;#95;project"&gt;Building a Clojure project&lt;/h2&gt;&lt;p&gt;A Clojure project is packaged into a Java archive file (&lt;code&gt;.jar&lt;/code&gt;).  This is a zip compressed file with a particular structure and configuration files.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; template used to create the project includes aliases to create jar files in the &lt;code&gt;deps.edn&lt;/code&gt; configuration file.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:jar&lt;/code&gt; packages the project code into a .jar file.  This is used for deploying libraries to a shared repository such as &lt;a href='https://mvnrepository.com/repos/central'&gt;Maven Central&lt;/a&gt; and &lt;a href='https://clojars.org/'&gt;Clojars&lt;/a&gt;, or to a local repository such as &lt;a href='https://jfrog.com/artifactory/'&gt;Artifactory&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;:uberjar&lt;/code&gt; creates a .jar containing the project code and the Clojure runtime environment, so all that is required to run the uberjar is a Java Virtual Machine.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/practical_li'&gt;@practical_li&lt;/a&gt;&lt;/p&gt;</description><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/clojure-repl-jack-in-or-connect/</guid><link>http://practical.li/test-blog/posts/clojure-repl-jack-in-or-connect/</link><title>Clojure CLI tools - To jack-in or connect, that is the question</title><description>&lt;p&gt;&lt;i&gt;To jack-in or connect, that is the question&lt;/i&gt;. &lt;i&gt;Whether it is more effective to relying on the editor to auto-inject the required dependencies for every workflow, or assemble your own aliases them include any editor&lt;/i&gt; - William "Hacker" Shakespear&lt;/p&gt;&lt;p&gt;A REPL is the central part of Clojure development. For the full workflow, an editor connects to the REPL to evaluate code and show instant results.&lt;/p&gt;&lt;p&gt;The developer can be in control of how the REPL starts, managing libraries and tools used alongside the REPL.  Or the editor can automate the process and control how the REPL is started.&lt;/p&gt;&lt;p&gt;Cider, Calva and Conjure are Clojure development environments for editors that support this approach. Lets discuss the value and constraints for each approach, particularly in respect to the Clojure CLI tools.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; A robust and flexible way to run the REPL is via the command line, with an editor establishing a connection to that REPL process over a network protocol (nREPL, SocketREPL).  When starting the REPL, library and middleware should be included in the command. &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; To simplify the process, editors use a jack-in operation which assembles a command to start a REPL in an external process.  This editor injects dependencies the editor requires to connect to the external REPL.  Once the REPL is running, the editor automatically connects to it. &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="connect&amp;#95;to&amp;#95;an&amp;#95;external&amp;#95;repl&amp;#95;process"&gt;Connect to an external REPL process&lt;/h2&gt;&lt;p&gt;Using the connect approach gives you full control over how the REPL is run and which other tools and dependencies to include.  There is also no concern about aliases clashing with any automatically injected configuration by the editor.&lt;/p&gt;&lt;p&gt;Running the REPL process outside of an editor ensures that process is not affected by the editor being closed or crashing, making for a more robust REPL process that can be run for a considerable time.  Its also possible to connect to the same REPL process from different &lt;a href='https://practical.li/clojure/clojure-editors/'&gt;Clojure editors&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;An external REPL can also be run in a local container (Docker, ContainerD, VirtualBox) or a remote container / server in a public / private cloud, company data center.&lt;/p&gt;&lt;p&gt;When editors connect to a REPL they are connecting to a server process, such as nREPL server (the most common), Socket REPL server or pREPL.  For nREPL this requires configuration that will include the library and namespace to run the nREPL server.  Socket REPL is part of the Clojure standard library, so does not require a library, only configuration to start the socket server.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; The connect approach requires library versions to be kept up to date with those used by the chosen editor. &lt;a href='https://gitbook.com/practicalli/clojure-deps-edn'&gt;&lt;code&gt;practicalli/clojure-deps-edn&lt;/code&gt;&lt;/a&gt; user level configuration includes the &lt;code&gt;:project/outdated&lt;/code&gt; alias that will report current and new versions of libraries available. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Running more than just a REPL eg. a data inspector such as Portal or Reveal, is a simple matter of ensuring the aliases are included in the appropriate order. The &lt;code&gt;:main-opts&lt;/code&gt; from the last alias in the chain will be used to run the &lt;code&gt;-main&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;As you control the options used with the &lt;code&gt;clojure&lt;/code&gt; command, well craft aliases can be added to a specific project in &lt;code&gt;deps.edn&lt;/code&gt; file.  Practicalli also recommends crafting common tasks and tools within the &lt;code&gt;&amp;#126;/.clojure/deps.edn&lt;/code&gt; configuration file.  Adding aliases to the &lt;code&gt;&amp;#126;/.clojure/deps.edn&lt;/code&gt; configuration ensures saves duplication and simplifies each project &lt;code&gt;deps.edn&lt;/code&gt; configuration.&lt;/p&gt;&lt;p&gt;For example, when a user level configurations include aliases for a specific tools or REPL communication protocols then they can be used over and over again for each project under development.&lt;/p&gt;&lt;p&gt;So the connect approach provides a clean and flexible approach to running a REPL, optionally with additional tools, in various local and remote environments and without relying on hidden magic from an editor that could cause issues.&lt;/p&gt;&lt;p&gt;&lt;a href='https://gitbook.com/practicalli/clojure-deps-edn'&gt;&lt;code&gt;practicalli/clojure-deps-edn&lt;/code&gt;&lt;/a&gt; user level configuration includes the following aliases&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:repl/nrepl&lt;/code&gt; - a headless REPL process for use with an editor&lt;/li&gt;&lt;li&gt;&lt;code&gt;:repl/rebel-nrepl&lt;/code&gt; -  a rich terminal UI with REPL process and nREPL server for Clojure editors to connect to&lt;/li&gt;&lt;li&gt;&lt;code&gt;inspect/portal-cli:repl/rebel-nrepl&lt;/code&gt; - as above with the Portal library (often used with a dev/user.clj file to launch portal)&lt;/li&gt;&lt;li&gt;&lt;code&gt;:inspect/reveal-nrepl&lt;/code&gt; - Reveal visual UI and REPL process with nREPL support for connecting a Clojure editor&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="jack-in&amp;#95;to&amp;#95;launch&amp;#95;and&amp;#95;connect&amp;#95;to&amp;#95;a&amp;#95;repl&amp;#95;process"&gt;jack-in to launch and connect to a REPL process&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;jack-in&lt;/code&gt; approach is where the editor configures how the REPL is started, by defining the &lt;code&gt;clojure&lt;/code&gt; command line that will run externally.  jack-in uses the same external tooling as connect.&lt;/p&gt;&lt;p&gt;Once the server process for the REPL has started, the editor automatically connects.  The editor can then be used to evaluate Clojure code in the REPL, directly from the source code file.  This approach minimizes the setup required by the developer to get started.&lt;/p&gt;&lt;p&gt;Depending on how the editor assembles the clojure command line, it can cause issues running the REPL process when trying to use additional aliases, especially when alias design is conflated by including unnecessary &lt;code&gt;:main-opts&lt;/code&gt; configuration.&lt;/p&gt;&lt;p&gt;As the editor is injecting configuration, it is important to understand how each editor being used is creating the &lt;code&gt;clojure&lt;/code&gt; command line, including any limits or caveats in using this approach.&lt;/p&gt;&lt;p&gt;Configuring jack-in with :extra-paths and :extra-deps is simple.  However, adding in tools such as data browsers or anything with a :main-opts can conflict with the automatic jack-in process.&lt;/p&gt;&lt;h4 id="cider&amp;#95;jack-in"&gt;Cider jack-in&lt;/h4&gt;&lt;p&gt;Cider uses the following form when assembling the jack-in command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;nREPL&amp;#93; Starting server via /usr/local/bin/clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version &amp;quot;0.8.3&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.25.5&amp;quot;}}}' -m nrepl.cmdline --middleware '&amp;#91;&amp;quot;cider.nrepl/cider-middleware&amp;quot;&amp;#93;'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aliases can be included via an Emacs variable called &lt;code&gt;cider-clojure-cli-global-options&lt;/code&gt; inside a &lt;code&gt;.dir-locals.el&lt;/code&gt; file.  Alias names can come from the user level configuration and the project deps.edn configuration.&lt;/p&gt;&lt;pre&gt;&lt;code class="elisp"&gt;&amp;#40;&amp;#40;clojure-mode . &amp;#40;&amp;#40;cider-preferred-build-tool . clojure-cli&amp;#41;
                  &amp;#40;cider-clojure-cli-global-options . &amp;quot;-M:env/dev:env/test&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cider then builds a command line including the alias&lt;/p&gt;&lt;p&gt;When including an alias in the global-options that defines a &lt;code&gt;:main-opts&lt;/code&gt; a conflict will arise as cider will build a command line with more than one &lt;code&gt;-main&lt;/code&gt; function to run.  This may prevent the jack-in process from working.  A simple solution to this is to include an alias that has the same configuration that cider auto-injects.  &lt;code&gt;practicalli/clojure-deps-edn&lt;/code&gt; configuration contains the &lt;code&gt;:middleware/cider-clj&lt;/code&gt; alias that contains the cider auto-injected configuration.&lt;/p&gt;&lt;p&gt;Running jack-in with global-opts set to &lt;code&gt;-M:alias:alias-with-main:middleware/clojure-clj&lt;/code&gt; will ensure that the clojure command calls the &lt;code&gt;-main&lt;/code&gt; to run the REPL regardless of &lt;code&gt;:main-opts&lt;/code&gt; defined in the other aliases.  The &lt;code&gt;clojure&lt;/code&gt; command will use the &lt;code&gt;:main-opts&lt;/code&gt; only from the last alias in the chain.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;nREPL&amp;#93; Starting server via /usr/local/bin/clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version &amp;quot;0.8.3&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.25.5&amp;quot;}}}' -M:alias:alias-with-main:middleware/clojure-clj -m nrepl.cmdline --middleware '&amp;#91;&amp;quot;cider.nrepl/cider-middleware&amp;quot;&amp;#93;'
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is possible to disable almost all of the configuration that Cider automatically injects by using the following &lt;code&gt;.dir-locals.el&lt;/code&gt; file.  The clojure command line with then run just the configuration form the aliases.  This is useful to start the REPL and connect to the project using jack-in whilst having full control over the functionality.&lt;/p&gt;&lt;h2 id="calva&amp;#95;jack-in"&gt;Calva jack-in&lt;/h2&gt;&lt;p&gt;The Calva jack-in process is similar to Cider although it does not support a &lt;code&gt;.dir-locals.el&lt;/code&gt; configuration.  Calva does provide a very useful options menu to choose which aliases should be included when it forms the &lt;code&gt;clojure&lt;/code&gt; command to run the REPL.&lt;/p&gt;&lt;p&gt;The standard jack-in command created is of the form&lt;/p&gt;&lt;p&gt;Executing task: clojure -Sdeps '{:deps {nrepl {:mvn/version "0.8.2"} cider/cider-nrepl {:mvn/version "0.23.0"} clj-kondo {:mvn/version "2020.04.05"}}}'  -m nrepl.cmdline &amp;ndash;middleware "[cider.nrepl/cider-middleware]"&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/bin/zsh '-c', 'clojure -Sdeps '{:deps {nrepl {:mvn/version &amp;quot;0.8.2&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.23.0&amp;quot;} clj-kondo {:mvn/version &amp;quot;2020.04.05&amp;quot;}}}' -m nrepl.cmdline --middleware &amp;quot;&amp;#91;cider.nrepl/cider-middleware&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When including aliases in the jack-in command, Calva will add them before the &lt;code&gt;-m&lt;/code&gt; flag in the Clojure command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/bin/zsh '-c', 'clojure -Sdeps '{:deps {nrepl {:mvn/version &amp;quot;0.8.2&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.23.0&amp;quot;} clj-kondo {:mvn/version &amp;quot;2020.04.05&amp;quot;}}}' -A:env/dev:inspect/portal -m nrepl.cmdline --middleware &amp;quot;&amp;#91;cider.nrepl/cider-middleware&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; Note: Calva will use the &lt;code&gt;-M&lt;/code&gt; flag in a future release when including aliases, moving away from the deprecated &lt;code&gt;-A&lt;/code&gt; flag in Clojure CLI tools. &lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id="user&amp;#95;level&amp;#95;aliases&amp;#95;via&amp;#95;a&amp;#95;repl&amp;#95;connect&amp;#95;sequence"&gt;User level aliases via a repl connect sequence&lt;/h4&gt;&lt;p&gt;Define a &lt;code&gt;repl.connectSequence&lt;/code&gt; configuration to use one or more aliases from a user level configuration (e.g. &lt;code&gt;&amp;#126;/.clojure/deps.edn&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;A &lt;code&gt;repl.connectSequence&lt;/code&gt; is defined in the VS Code editor &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;During the jack-in process, select the name of the connection sequence, rather than Clojure CLI, to start the REPL process with just the aliases from the connectSequence.  It is not possible to select additional alias names from the project deps.edn.&lt;/p&gt;&lt;pre&gt;&lt;code class="json"&gt;    &amp;quot;calva.replConnectSequences&amp;quot;: &amp;#91;
        {&amp;quot;name&amp;quot;: &amp;quot;Inspect Portal&amp;quot;,
         &amp;quot;projectType&amp;quot;: &amp;quot;Clojure CLI&amp;quot;,
         &amp;quot;cljsType&amp;quot;: &amp;quot;none&amp;quot;,
         &amp;quot;menuSelections&amp;quot;: {
            &amp;quot;cljAliases&amp;quot;: &amp;#91;
               &amp;quot;env/dev&amp;quot;,
               &amp;quot;inspect/portal&amp;quot;&amp;#93;}}&amp;#93;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The repl.connectSequence adds an extra layer of indirection to the jack-in approach and is not as flexible as using connect.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; There seems to be an issue using kebab-case alias names with a repl connect sequence &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="conjure&amp;#95;approach"&gt;Conjure approach&lt;/h2&gt;&lt;p&gt;The approach in Conjure is as simple as opening Neovim with a Clojure project.  If a REPL is already running for that project, determined by checking for a port value in the file &lt;code&gt;.nrepl-port&lt;/code&gt;, then Conjure will connect automatically.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; The Conjure jack-in approach... TODO &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;For simple projects and local environments, using jack-in is a quick way to run a REPL.&lt;/p&gt;&lt;p&gt;You should consider using &lt;code&gt;connect&lt;/code&gt; if you want a more robust REPL, that can work with local and remote environments, can be accessed by any Clojure editor and can provide more services that just the REPL service (e.g. data visualization tools)&lt;/p&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/practical_li'&gt;@practical_li&lt;/a&gt;&lt;/p&gt;</description><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/clojure-cli-aliases-deserve-designing-too/</guid><link>http://practical.li/test-blog/posts/clojure-cli-aliases-deserve-designing-too/</link><title>Clojure CLI tools aliases deserve good design too</title><description>&lt;p&gt;Aliases in &lt;a href='https://practicalli.github.io/clojure/clojure-tools/using-clojure-tools.html'&gt;Clojure CLI tools&lt;/a&gt; are an important way to configure how to work with a Clojure project effectively, so they deserve the same attention and clean design applied to source code, test code and other configuration.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/practicalli/clojure-deps-edn'&gt;&lt;code&gt;practicalli/clojure-deps-edn&lt;/code&gt;&lt;/a&gt; provides examples of over 50 aliases crafted to use over multiple projects and providing access to a wide range of Clojure CLI community tools.&lt;/p&gt;&lt;p&gt;One way to kill the excellent experience that Clojure CLI tools bring is to write aliases that conflate concepts and are just a catch all for loosely related configuration.  Without applying a little thought and design to aliases it just makes more work later on.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;clojure&lt;/code&gt; command line provided by Clojure CLI tools allows the chaining of aliases together, providing a very flexible way to use and re-use aliases across all your projects.&lt;/p&gt;&lt;p&gt;Crafting the design of your aliases with some design thinking reduces conflict between loosely related tools and libraries, minimizes duplication and simplifies the &lt;code&gt;deps.edn&lt;/code&gt; configuration for all your projects.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more  &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="conflated&amp;#95;design&amp;#95;of&amp;#95;aliases"&gt;Conflated design of aliases&lt;/h2&gt;&lt;p&gt;Aliases are not buckets to throw random configuration together, they should have a very clear and specific purpose.&lt;/p&gt;&lt;p&gt;Aliases that are used for different purposes just add to complexity.&lt;/p&gt;&lt;p&gt;In this example, a very generic name is used for an alias that servers at least two different purposes.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  :test {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
         :extra-deps {lambdaisland/kaocha           {:mvn/version &amp;quot;1.0.690&amp;quot;}
                      lambdaisland/kaocha-cloverage {:mvn/version &amp;quot;1.0.63&amp;quot;}
                      lambdaisland/kaocha-junit-xml {:mvn/version &amp;quot;0.0.76&amp;quot;}
                      ring/ring-mock                {:mvn/version &amp;quot;0.3.2&amp;quot;}
                      mockery                       {:mvn/version &amp;quot;0.1.4&amp;quot;}
                      http-kit.fake/http-kit.fake   {:mvn/version &amp;quot;0.2.1&amp;quot;}}
         :main-opts  &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;kaocha.runner&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In one scenario, the alias is used with the Kaocha test runner on the command line to run all tests defined on the class path, to which the &lt;code&gt;test&lt;/code&gt; directory is added.  The alias loads all the libraries and runs the &lt;code&gt;-main&lt;/code&gt; function in the &lt;code&gt;kaocha.runner&lt;/code&gt;.  Although the alias name is vauge as to the purpose of the alias, it does successfully run the kaocha test runner.&lt;/p&gt;&lt;p&gt;Using the same alias to run a REPL to include the "test" directory and dependencies is a source of several issues.  As kaocha is an external process to the REPL, the kaocha dependencies are simply not used and consume more resources and slows down startup time.  As the &lt;code&gt;:test&lt;/code&gt; alias has a &lt;code&gt;:main-opts&lt;/code&gt; that will run the &lt;code&gt;-main&lt;/code&gt; function from &lt;code&gt;kaocha.runner&lt;/code&gt;, it adds complexity as the REPL process also has a &lt;code&gt;-main&lt;/code&gt; function to run.  Clojure main can only run one &lt;code&gt;-main&lt;/code&gt; function, so which one wins.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; There is discussion on the Cider GitHub repository to &lt;a href='https://github.com/clojure-emacs/cider/issues/2941'&gt;force the Cider jack-in process to win&lt;/a&gt; regardless of aliases provided.  However, designing good aliases would remove this issue. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;What if another test runner is going to be used on the command line?  Using this &lt;code&gt;:test&lt;/code&gt; alias again causes issues as to which &lt;code&gt;-main&lt;/code&gt; function will run, the &lt;code&gt;:main-opts&lt;/code&gt; in the alias or &lt;code&gt;-main&lt;/code&gt; function from the other test runner.  It would also load in dependencies that are not required which is very inefficient.&lt;/p&gt;&lt;h2 id="designed&amp;#95;aliases"&gt;Designed aliases&lt;/h2&gt;&lt;p&gt;Aliases are just like code and other configuration, they should be designed well for the purpose the serve.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;:env/test&lt;/code&gt; alias adds the &lt;code&gt;test&lt;/code&gt; directory to the class path so tests can be found.  It includes specific libraries that the unit tests require to run.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  :env/test
  {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
   :extra-deps {ring/ring-mock                {:mvn/version &amp;quot;0.3.2&amp;quot;}
                mockery                       {:mvn/version &amp;quot;0.1.4&amp;quot;}
                http-kit.fake/http-kit.fake   {:mvn/version &amp;quot;0.2.1&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;:env/test&lt;/code&gt; provides a clear description to it purpose, to provide the environment configuration for testing.  The alias is usable with a range of test runners, both in process (cider-test) and external (kaocha, cognitect labs, eftest, etc.).  The &lt;code&gt;:env/test&lt;/code&gt; alias can also be used with continuous integration services.&lt;/p&gt;&lt;p&gt;Specific aliases can be defined for a test runner, for example kaocha with cloverage and junit xml reporting.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  :test-runner/kaocha
  {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
   :extra-deps {lambdaisland/kaocha           {:mvn/version &amp;quot;1.0.690&amp;quot;}
                lambdaisland/kaocha-cloverage {:mvn/version &amp;quot;1.0.63&amp;quot;}
                lambdaisland/kaocha-junit-xml {:mvn/version &amp;quot;0.0.76&amp;quot;}}
   :main-opts  &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;kaocha.runner&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A specific alias for the Cognitect labs runner&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  :test-runner/cognitect
  {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
   :extra-deps  {com.cognitect/test-runner
                 {:git/url &amp;quot;https://github.com/cognitect-labs/test-runner.git&amp;quot;
                  :sha     &amp;quot;b6b3193fcc42659d7e46ecd1884a228993441182&amp;quot;}}
   :main-opts   &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;cognitect.test-runner&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both test runner aliases can be added to the user level configuration (~/.clojure/deps.edn) and used with any Clojure project&lt;/p&gt;&lt;p&gt;The &lt;code&gt;:env/test&lt;/code&gt; alias can be used with either these aliases to run the tests within the specific environment required for the project.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -M:env/test:test-runner/kaocha
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;A little design thinking about the aliases and borrowing from community examples (practicalli &amp; seancorfield) can make your projects more consistent to work with, easier to maintain and onboard new developers and far simpler overall.&lt;/p&gt;&lt;h2 id="looking&amp;#95;to&amp;#95;the&amp;#95;future&amp;#95;-&amp;#95;clojure&amp;#95;exec"&gt;Looking to the future - Clojure exec&lt;/h2&gt;&lt;p&gt;Clojure exec was introduced in September 2020 (Clojure ClI tools version 1.10.1.697) and brings the capacity to run any fully qualified function, rather than just Clojure main.&lt;/p&gt;&lt;p&gt;Rather than using string based adhoc arguments, Clojure exec takes a hash-map of key / value pairs, making the arguments self describing values and providing scope to do far more with functions.&lt;/p&gt;&lt;p&gt;Clojure exec has already been adopted by several community projects, e.g. clj-new, depstar, and others, like vlaaad/reveal, are following on with that approach too.&lt;/p&gt;&lt;p&gt;It is likely that most tools for Clojure CLI will evolve into using Clojure exec and embrace this more flexible and structured approach to running Clojure.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://insideclojure.org/2020/07/28/clj-exec/'&gt;clj exec - Inside Clojure&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://insideclojure.org/2020/09/04/clj-exec/'&gt;clj exec update - Inside Clojure&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/practical_li'&gt;@practical_li&lt;/a&gt;&lt;/p&gt;</description><pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/cloure-community-getting-help/</guid><link>http://practical.li/test-blog/posts/cloure-community-getting-help/</link><title>Clojure community - getting help</title><description>&lt;p&gt;A guide to getting help from the Clojure community.  There are several ways you can get help so you can use which you find more valuable and rewarding.  The most active tools include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://ask.clojure.org/'&gt;ask.clojure.org&lt;/a&gt; - official forum with the Clojure maintainers, help shape the development of Clojure&lt;/li&gt;&lt;li&gt;&lt;a href='https://clojurians.slack.com/'&gt;Clojurian Slack community&lt;/a&gt; - very active community chat for immediate / shot term discussions&lt;/li&gt;&lt;li&gt;&lt;a href='http://clojurians.zulipchat.com/'&gt;Clojurians Zulip&lt;/a&gt; - active community chat with topic-based threading and full history, strong data science community and archive of most slack channels&lt;/li&gt;&lt;li&gt;&lt;a href='https://clojureverse.org/'&gt;ClojureVerse&lt;/a&gt; - community forum for friendly short to long-term discussions&lt;/li&gt;&lt;li&gt;&lt;a href='https://old.reddit.com/r/Clojure/comments/hqpyv9/new_clojurians_ask_anything/'&gt;New Clojurians: Ask Anything&lt;/a&gt; - simple web based threaded discussions&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;General website such as &lt;a href='https://www.reddit.com/r/Clojure/'&gt;redit/clojure&lt;/a&gt; are useful ways for the Clojure community to reach out to the more general development community.&lt;/p&gt;&lt;h2 id="ask.clojure.org"&gt;ask.clojure.org&lt;/h2&gt;&lt;p&gt;An official place to ask questions about Clojure, ClojureScript, ClojureCLR, Clojure contrib libraries and any other Clojure topic.  This forum is used by the Clojure maintainer team and so discussions can shape the direction of Clojure.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/ask-clojure-org-front-page.png" alt="ask.clojure.org front page" /&gt;&lt;/p&gt;&lt;p&gt;Questions must have one or more of the fixed categories, enabling discussions to be simpler to find and engage with.  Questions can also have tags which are an extensible set of attributes, with several special tags&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;problem&lt;/code&gt; - problem in the language or library&lt;/li&gt;&lt;li&gt;&lt;code&gt;request&lt;/code&gt; - request for enhancement in the language or library&lt;/li&gt;&lt;li&gt;&lt;code&gt;jira&lt;/code&gt; - a jira ticket has been raised for development, Jira link included in an answer&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;An account is required to ask questions, using GitHub authentication. Once logged in, click the user name in the upper right corner and add an email address if notifications are required.&lt;/p&gt;&lt;p&gt;Account holders may vote on both questions and answers. Votes are used to inform decisions about future releases of Clojure, ClojureScript, libraries, etc.&lt;/p&gt;&lt;p&gt;The &lt;a href='https://twitter.com/askclojure'&gt;@AskClojure&lt;/a&gt; twitter account tweets new questions posted to the ask.clojure.org forum on its feed, providing another channel to keep track of discussions.&lt;/p&gt;&lt;h2 id="clojurians&amp;#95;slack&amp;#95;channels"&gt;Clojurians Slack channels&lt;/h2&gt;&lt;p&gt;&lt;a href='https://clojurians.net'&gt;clojurians.net&lt;/a&gt; provides a self-service way to sign up to the Clojurians slack community, which contains many channels where you can get help.  The community is very active with a relatively quick response time in the most popular channels, especially #beginners.&lt;/p&gt;&lt;p&gt;Discussions are only visible for a few days as the community uses the free Slack plan, there is no way to scroll back through history in Slack once its archived.  A &lt;a href='https://clojurians-log.clojureverse.org/'&gt;community log of the discussions&lt;/a&gt; is provided by the ClojureVerse team and many channels are mirrored by the &lt;a href='https://clojurians.zulipchat.com/'&gt;Clojurians Zulip community&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Channels of note include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;#beginners&lt;/code&gt; - channel for help on most topics to do with Clojure, occasionally re-directed to focused channels&lt;/li&gt;&lt;li&gt;&lt;code&gt;#announcements&lt;/code&gt; - occasional project / library announcements only. Use a threaded reply or jump to specific topic channel for follow-on discussions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;#news-and-articles&lt;/code&gt; - published content related to Clojure development, basically everything that is not a project/library announcement&lt;/li&gt;&lt;li&gt;&lt;code&gt;#events&lt;/code&gt; taking place around the world, from meetups to conferences and anything in-between&lt;/li&gt;&lt;li&gt;&lt;code&gt;#jobs&lt;/code&gt; &lt;code&gt;#remote-jobs&lt;/code&gt; for posting legitimate job vacancies (and their location), with &lt;code&gt;#jobs-discuss&lt;/code&gt; for experiences and advice on finding, getting and doing a job with Clojure&lt;/li&gt;&lt;li&gt;&lt;code&gt;#spacemacs&lt;/code&gt; &lt;code&gt;#calva&lt;/code&gt; &lt;code&gt;#chlorine&lt;/code&gt; - editor specific channel with questions about using those tools, customising and developing features&lt;/li&gt;&lt;li&gt;&lt;code&gt;#cider&lt;/code&gt; &lt;code&gt;#clj-kondo&lt;/code&gt; &lt;code&gt;#figwheel-main&lt;/code&gt; &lt;code&gt;#kaocha&lt;/code&gt; - Clojure tooling discussions (there are many more)&lt;/li&gt;&lt;li&gt;&lt;code&gt;#clojuredesign-podcast&lt;/code&gt; &lt;code&gt;#defnpodcast&lt;/code&gt; &lt;code&gt;#practicalli&lt;/code&gt; - supporting live and recorded broadcasts&lt;/li&gt;&lt;li&gt;&lt;code&gt;#admin-announcements&lt;/code&gt; - messages from the administrators of the Clojurians Slack channel&lt;/li&gt;&lt;li&gt;&lt;code&gt;#community-development&lt;/code&gt; community growth &amp; support, reporting code of conduct breaches to the administrators&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;All discussions in Slack are bound by &lt;a href='https://github.com/clojurians/community-development/blob/master/Code-of-Conduct.md'&gt;the Clojurians community code of conduct&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Post only in one specific channel rather than potentially spamming other channels.  If there are valid exceptions, then use a short summary or link to the original post or delete the original post and add it to another channel.&lt;/p&gt;&lt;h2 id="clojurians&amp;#95;zulip"&gt;Clojurians Zulip&lt;/h2&gt;&lt;p&gt;Discussions history is easier to follow in the &lt;a href='http://clojurians.zulipchat.com/'&gt;Clojurians Zulip&lt;/a&gt; than in Slack, especially where discussions take place over time, thanks to the Zulip topic-based threading.  Slack does have discussion threading, but this is often not used as conversation don't last in Slack.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/zulip-topic-based-threading.png" alt="Zulip - topic-based threading" /&gt;&lt;/p&gt;&lt;p&gt;The Clojurians Zulip is very actively used, although not yet quite as busy as Slack.  There is a strong &lt;a href='https://clojurians.zulipchat.com/#narrow/stream/151924-data-science'&gt;data science community&lt;/a&gt; on Zulip and is also used for &lt;a href='https://scicloj.github.io/pages/about/'&gt;SciCoj&lt;/a&gt; hackathons and other (virtual) events.  It would be great to see more Clojurians using Zulip either via the website or the excellent &lt;a href='https://zulipchat.com/apps/'&gt;Zulip app&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Discussions in Clojurians Zulip are also available indefinitely, whereas Slack conversations are only visible for a few days.   If a zulipchat bot has been added to a channel in the Clojurians Slack, that channel discussion history is available as a full-text-searchable archive.  To &lt;a href='https://clojurians.zulipchat.com/#narrow/stream/180378-slack-archive/topic/beginners'&gt;search the history of the #beginners channel&lt;/a&gt;, use &lt;code&gt;/&lt;/code&gt; to start a search and use the query:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;stream:slack-archive topic:beginners
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An account is required and authentication is via GitHub, GitLab, Google or username/password.&lt;/p&gt;&lt;h2 id="clojureverse"&gt;ClojureVerse&lt;/h2&gt;&lt;p&gt;A &lt;a href='https://clojureverse.org/'&gt;Clojure community forum&lt;/a&gt; that is enjoyable to use with a rich user interface (topics, participant icons, etc.).  Responses may not be as immediate as Slack, however, it is far easier to track discussions as they evolve and review past discussions.&lt;/p&gt;&lt;p&gt;All the usual forum features are available and direct and private messages can be sent between user accounts.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojureverse-front-page.png" alt="Clojureverse front page" /&gt;&lt;/p&gt;</description><pubDate>Wed, 15 Jul 2020 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/visualising-uk-covid19-data-with-oz/</guid><link>http://practical.li/test-blog/posts/visualising-uk-covid19-data-with-oz/</link><title>Visualising UK Covid19 data with Clojure and Oz</title><description>&lt;p&gt;Discover how to use Oz, a Clojure library for visualising data, to build a dashboard of information about the Covid19 virus from &lt;a href='https://www.gov.uk/government/publications/covid-19-track-coronavirus-cases'&gt;available UK data&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/practicalli/covid19-dashboard'&gt;practicalli/covid19-dashboard&lt;/a&gt; contains the code from this article.&lt;/p&gt;&lt;p&gt;Data science is about gathering meaningful data and presenting that data in meaningful ways, enabling business or communities to have tools to better understand a stituation.  Data sets are often flawed and visualisation open to interpretation, so no clear picture is offered about the current Covid19 pandemic.&lt;/p&gt;&lt;p&gt;Covid19 virus is a very serious pandemic affecting the world at present, please stay safe and where possible at home and away from others to help stop the spread of this highly infectious virus.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="examples&amp;#95;of&amp;#95;visualisations"&gt;Examples of visualisations&lt;/h2&gt;&lt;p&gt;The UK government provides a &lt;a href='https://www.gov.uk/government/publications/covid-19-track-coronavirus-cases'&gt;Covid-19 tracker&lt;/a&gt; of reported cases and is a useful example of a data science dashboard.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/data-science-covid19-public-health-england-dashboard.png" alt="GOV.UK COVID-19 tracker dashboard" /&gt;&lt;/p&gt;&lt;p&gt;Other excellent dashboard examples include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.againstcovid19.com/singapore/'&gt;againstcovid19: Singapore&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.againstcovid19.com/indonesia/dashboard'&gt;againstcovid19: Indonesia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.againstcovid19.com/taiwanin/dashboard'&gt;againstcovid19: Taiwan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.againstcovid19.com/philippines/dashboard'&gt;againstcovid19: Philippines&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="mining&amp;#95;for&amp;#95;data"&gt;Mining for data&lt;/h2&gt;&lt;p&gt;Good data can be hard to find and often needs cleaning.  Luckily the UK Government has &lt;a href='https://www.gov.uk/government/publications/covid-19-track-coronavirus-cases'&gt;shared the data&lt;/a&gt; used for the Covid-19 tracker.&lt;/p&gt;&lt;p&gt;There are several Excel spreadsheets containing different views of the data&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Daily indicators - used for the headline figures each day&lt;/li&gt;&lt;li&gt;Daily confirmed cases - data from 29th February to previous day (count each day, cumulative cases, daily deaths, cumulative deaths).&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;clojure&amp;#95;project"&gt;Creating a Clojure project&lt;/h2&gt;&lt;p&gt;Dave L created a very useful sample application you could extend (required Leiningen build tool), or create a new Clojure project&lt;/p&gt;&lt;p&gt;clojure -A:new app practicalli/covid19-dashboard&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='http://practicalli.github.io/clojure/getting-started/install-clojure.html'&gt;Install Clojure CLI tools and clj-new&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Add Oz as a dependency in &lt;code&gt;deps.edn&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt; :deps
 {org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}

  metasoarous/oz {:mvn/version &amp;quot;1.6.0-alpha6&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Require Oz in the practicalli.covid19-dashboard namespace&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.covid19-dashboard
  &amp;#40;:gen-class&amp;#41;
  &amp;#40;:require &amp;#91;oz.core :as oz&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally add an explicitly call to the Oz server.  This will listen via websockets for views to display.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;oz/start-server!&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-oz-start-server-website-placeholder.png" alt="Clojure - Oz visualization - waiting for first spec to load" /&gt;&lt;/p&gt;&lt;p&gt;The message suggests that a plot function (e.g. &lt;code&gt;oz/view!&lt;/code&gt;) will start the server if not explicitly called.&lt;/p&gt;&lt;h2 id="create&amp;#95;a&amp;#95;view&amp;#95;with&amp;#95;mock&amp;#95;data"&gt;Create a view with Mock data&lt;/h2&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn play-data &amp;#91;&amp;amp; names&amp;#93;
  &amp;#40;for &amp;#91;n names
        i &amp;#40;range 20&amp;#41;&amp;#93;
    {:time i :item n :quantity &amp;#40;+ &amp;#40;Math/pow &amp;#40;&amp;#42; i &amp;#40;count n&amp;#41;&amp;#41; 0.8&amp;#41; &amp;#40;rand-int &amp;#40;count n&amp;#41;&amp;#41;&amp;#41;}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="extracting&amp;#95;the&amp;#95;data"&gt;Extracting the data&lt;/h2&gt;&lt;p&gt;The data is in Microsoft Excel files, even though its just simple table data.  I opened the files in LibreOffice and saved them as plain text csv files.&lt;/p&gt;&lt;h2 id="transforming&amp;#95;the&amp;#95;data&amp;#95;for&amp;#95;visualisation"&gt;Transforming the data for visualisation&lt;/h2&gt;&lt;p&gt;The data needs to be transformed into a structure that can be used to visualise the data.&lt;/p&gt;&lt;p&gt;This adds&lt;/p&gt;&lt;p&gt;&lt;code&gt;:data&lt;/code&gt; wraps the original sequence of data in a hash-map with a key named &lt;code&gt;:values&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;:mark&lt;/code&gt; is the type of visualisation to use, e.g. bar chart, line graph, etc.&lt;/p&gt;&lt;p&gt;&lt;code&gt;:encoding&lt;/code&gt; defines how the data will be presented, matching the &lt;code&gt;:field&lt;/code&gt; with the data keyword and the&lt;/p&gt;&lt;h2 id="creating&amp;#95;oz&amp;#95;views"&gt;Creating Oz views&lt;/h2&gt;&lt;p&gt;Oz is based on the grammar of interactive graphics as defined for &lt;a href='https://vega.github.io/vega-lite/docs/'&gt;Vega-lite specifications&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/oz-grammar-of-graphics-data-types.png" alt="Oz - Grammar of interactive graphics" /&gt;&lt;/p&gt;&lt;p&gt;Which can generate a range of graphs and plots&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/oz-grammar-of-graphics-graph-types.png" alt="Oz - Grammar of interactive graphics" /&gt;&lt;/p&gt;&lt;p&gt;Watch &lt;a href='https://www.youtube.com/watch?v=9uaHRWj04D4'&gt;Vega Lite: A Grammar of Interactive Graphics&lt;/a&gt; for more examples (more examples will be covered in later articles here).&lt;/p&gt;&lt;h3 id="line&amp;#95;graph"&gt;Line graph&lt;/h3&gt;&lt;p&gt;Show the cumulative cases for each location as a separate line on the graph&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def line-plot
  &amp;quot;Transform data for visualization&amp;quot;
  {:mark     &amp;quot;line&amp;quot;
   :data     {:values &amp;#40;mock-data-set &amp;quot;England&amp;quot; &amp;quot;Scotland&amp;quot; &amp;quot;Wales&amp;quot; &amp;quot;Northern Ireland&amp;quot;&amp;#41;}
   :encoding {:x     {:field &amp;quot;day&amp;quot; :type &amp;quot;quantitative&amp;quot;}
              :y     {:field &amp;quot;cases&amp;quot; :type &amp;quot;quantitative&amp;quot;}
              :color {:field &amp;quot;location&amp;quot; :type &amp;quot;nominal&amp;quot;}}}&amp;#41;

&amp;#40;oz/view! line-plot&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The encoding field names match the keywords in the data values&lt;/p&gt;&lt;h3 id="histogram&amp;#95;-&amp;#95;bar&amp;#95;chart"&gt;Histogram - bar chart&lt;/h3&gt;&lt;p&gt;A bar chart showing a cases comparison between locations on the same day.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def stacked-bar
  {:mark     &amp;quot;bar&amp;quot;
   :data     {:values &amp;#40;mock-data-set &amp;quot;England&amp;quot; &amp;quot;Scotland&amp;quot; &amp;quot;Wales&amp;quot; &amp;quot;Norther Ireland&amp;quot;&amp;#41;}
   :encoding {:x     {:field &amp;quot;day&amp;quot;
                      :type  &amp;quot;ordinal&amp;quot;}
              :y     {:aggregate &amp;quot;location&amp;quot;
                      :field     &amp;quot;cases&amp;quot;
                      :type      &amp;quot;quantitative&amp;quot;}
              :color {:field &amp;quot;location&amp;quot;
                      :type  &amp;quot;nominal&amp;quot;}}}&amp;#41;

&amp;#40;oz/view! stacked-bar&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;dashboard"&gt;Creating a dashboard&lt;/h2&gt;&lt;p&gt;Once all the views are created and recieving the relevant data, its a simple matter to create a dashboard using the hiccup style syntax that is common in Clojure.&lt;/p&gt;&lt;p&gt;Hiccup syntax is the clojure approach to representing HTML content and structure,  along with CSS styles.  Instead of open and closing tags, a Clojure vector respresents the scope of a tag and a keyword represents the type of tag.&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#91;:div
  &amp;#91;:h1 &amp;quot;Title of the Dashboard&amp;quot;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Lets add the views we created already created.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def dashboard
  &amp;#91;:div
   &amp;#91;:h1 &amp;quot;COVID19 Tracker - Mock data&amp;quot;&amp;#93;
   &amp;#91;:p &amp;quot;Mock data to experiment with types of views&amp;quot;&amp;#93;
   &amp;#91;:div {:style {:display &amp;quot;flex&amp;quot; :flex-direction &amp;quot;row&amp;quot;}}
    &amp;#91;:vega-lite line-plot&amp;#93;
    &amp;#91;:vega-lite stacked-bar&amp;#93;&amp;#93;&amp;#93;&amp;#41;

&amp;#40;oz/view! dashboard&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://vega.github.io/editor/#/custom/vega-lite'&gt;Vega-Lite online editor with examples&lt;/a&gt; - a quick way to try out visualisations and see example code&lt;/li&gt;&lt;li&gt;&lt;a href='https://vega.github.io/vega-lite/docs/'&gt;Vega-Lite documenttion&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://communityinviter.com/apps/vega-js/join'&gt;Vega slack community self-signup&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/web-scraping-with-clojure-hacking-hacker-news/</guid><link>http://practical.li/test-blog/posts/web-scraping-with-clojure-hacking-hacker-news/</link><title>Web Scraping with Clojure - Scraping Hacker News</title><description>&lt;p&gt;&lt;a href='https://github.com/cgrand/enlive'&gt;Enlive&lt;/a&gt; is a Clojure library that can be used for generating dynamic server-side content as well as scraping websites.&lt;/p&gt;&lt;p&gt;Scraping websites is sometimes required when they do not provide an API.  Although Hacker News does have an API, will show how to scrape its website using Enlive's selectors.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="create&amp;#95;a&amp;#95;clojure&amp;#95;project"&gt;Create a Clojure project&lt;/h2&gt;&lt;p&gt; We are using Clojure CLI and clj-new to create a new project&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt; clojure -A:new app practicalli/webscraper
 &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add the Enlive library as a dependency to the &lt;code&gt;deps.edn&lt;/code&gt; file in the newly created project, along with clojure which should already be there as a dependency.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt; :deps
 {org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}
  enlive              {:mvn/version &amp;quot;1.1.6&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we are read to start the REPL, either via your editor, using &lt;code&gt;clj&lt;/code&gt; or using rebel readline &lt;code&gt;clojure -A:rebel&lt;/code&gt; if installed.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; See details of how to install these &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Open the &lt;code&gt;src/practicalli/webscraper-enlive.clj&lt;/code&gt; file and add code for our scraper&lt;/p&gt;&lt;h2 id="adding&amp;#95;a&amp;#95;website&amp;#95;to&amp;#95;scrape"&gt;Adding a website to scrape&lt;/h2&gt;&lt;p&gt;A &lt;code&gt;def&lt;/code&gt; function could be used to bind the URL to a name&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def hacker-news-url &amp;quot;https://news.ycombinator.com/&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Enlive will scrape a website using the &lt;code&gt;html-resource&lt;/code&gt; function, which takes an HTML object (&lt;code&gt;java.net.URL&lt;/code&gt;) and converts it into a nested Clojure data structure, a bit like a simplfied Document Object Model (DOM).&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;html/html-resource &amp;#40;java.net.URL. hacker-news-url&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;html-resource&lt;/code&gt; function returns a sequence of hash-maps, containing Clojure keywords that represent the HTML tags and CSS styles.&lt;/p&gt;&lt;p&gt;Here is just a small part of this output, specifically around the &lt;code&gt;&amp;lt;td class=&amp;quot;title&amp;quot;&amp;gt;&lt;/code&gt; tag&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:tag :td,
                  :attrs {:class &amp;quot;title&amp;quot;},
                  :content
                  &amp;#40;{:tag :a,
                    :attrs
                    {:href
                     &amp;quot;https://www.roadandtrack.com/new-cars/car-technology/a31451281/koenigsegg-gemera-engine-specs-analysis/&amp;quot;,
                     :class &amp;quot;storylink&amp;quot;},
                    :content
                    &amp;#40;&amp;quot;Koenigsegg’s 2.0-Liter No-Camshaft Engine Makes 600 Horsepower&amp;quot;&amp;#41;}
                   {:tag :span,
                    :attrs {:class &amp;quot;sitebit comhead&amp;quot;},
                    :content
                    &amp;#40;&amp;quot; &amp;#40;&amp;quot;
                     {:tag :a,
                      :attrs {:href &amp;quot;from?site=roadandtrack.com&amp;quot;},
                      :content
                      &amp;#40;{:tag :span,
                        :attrs {:class &amp;quot;sitestr&amp;quot;},
                        :content &amp;#40;&amp;quot;roadandtrack.com&amp;quot;&amp;#41;}&amp;#41;}
                     &amp;quot;&amp;#41;&amp;quot;&amp;#41;}&amp;#41;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="caching&amp;#95;scraped&amp;#95;websites"&gt;Caching scraped websites&lt;/h2&gt;&lt;p&gt;When we are developing a scraping app we could end up hitting a website hundreds (thousands) of times and if lots of people did that it would not be good for that website.&lt;/p&gt;&lt;p&gt;Using the caching nature of the &lt;code&gt;def&lt;/code&gt; function, we can bind the result of calling the website to a name.  Each subsequent time the name bound to the results is evaluated, the existing data is used and the website is not visited.  This can also speed up your development if there is a slow connection to that website.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def website-content-hacker-news
  &amp;quot;Get website content from Hacker News
  Returns: list of html content as hash-maps&amp;quot;

  &amp;#40;html/html-resource &amp;#40;java.net.URL. hacker-news-url&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; Note: alternatively you could use a command line tool to pull down a website to a file, allowing you to work with the file outside the REPL. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="inspecting&amp;#95;what&amp;#95;to&amp;#95;scrape"&gt;Inspecting what to scrape&lt;/h2&gt;&lt;p&gt;There is typically a lot of structure and styling around the content of a web page, so finding the right starting point is sometimes tricky.  Using a browers Inspector tool can help find the right tags quickly.&lt;/p&gt;&lt;p&gt;With the website open in your browser, use the Inspect Element tool to look for unique HTML tags and CSS classes that surround the content you need.&lt;/p&gt;&lt;p&gt;Inspecting the headings in hacker news webpage, the text of each headline is inside a &lt;code&gt;td&lt;/code&gt; tag, a table data cell.  The headings &lt;code&gt;td&lt;/code&gt; tag has as a CSS style called &lt;code&gt;title&lt;/code&gt;, so it can be referenced as &lt;code&gt;.td.title&lt;/code&gt;&lt;/p&gt;&lt;h2 id="getting&amp;#95;selective&amp;#95;with&amp;#95;webpage&amp;#95;content"&gt;Getting Selective with webpage content&lt;/h2&gt;&lt;p&gt;Enlive uses selectors to extract specific content from the website content.&lt;/p&gt;&lt;p&gt;Selectors are define as a vector containing keywords that represent the HTML tags and CSS classes in the original web page.&lt;/p&gt;&lt;p&gt;To get all the matching headings we use a selector with the Enlive &lt;code&gt;select&lt;/code&gt; function on the parsed&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;html/select website-content-hacker-news &amp;#91;:td.title :a&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This returns a Clojure data structure containing any matching parts of the website.&lt;/p&gt;&lt;p&gt;To see the results clearly, we can either pretty print them or just take the first part of the data structure.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;take 1
  &amp;#40;html/select website-content-hacker-news &amp;#91;:td.title :a&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example output:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;;; =&amp;gt; &amp;#40;{:tag :a,
;;      :attrs {:href &amp;quot;https://www.roadandtrack.com/new-cars/car-technology/a31451281/koenigsegg-gemera-engine-specs-analysis/&amp;quot;, :class &amp;quot;storylink&amp;quot;},
;;      :content &amp;#40;&amp;quot;Koenigsegg’s 2.0-Liter No-Camshaft Engine Makes 600 Horsepower&amp;quot;&amp;#41;}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Enlive &lt;code&gt;text&lt;/code&gt; function extracts the value from the &lt;code&gt;:content&lt;/code&gt; key. Mapping the &lt;code&gt;text&lt;/code&gt; function over our selected keys returns just the content we want&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;map html/text
     &amp;#40;html/select
       website-content-hacker-news
       &amp;#91;:td.title :a&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will return a list of all the matching headlines, each headline will be a string.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;&amp;quot;Koenigsegg’s 2.0-Liter No-Camshaft Engine Makes 600 Horsepower&amp;quot; &amp;quot;roadandtrack.com&amp;quot; &amp;quot;Git Partial Clone lets you fetch only the large file you need&amp;quot; &amp;quot;gitlab.com&amp;quot; &amp;quot;Pence says European travel ban will extend to U.K. and Ireland&amp;quot; &amp;quot;axios.com&amp;quot; &amp;quot;Coronavirus has caused a bicycling boom in New York City&amp;quot; &amp;quot;grist.org&amp;quot; &amp;quot;Iceland radically cut teenage drug use&amp;quot; &amp;quot;weforum.org&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="enlive&amp;#95;selectors"&gt;Enlive Selectors&lt;/h2&gt;&lt;p&gt;Enlive selectors are data structures that identify one or more HTML nodes. They describe a pattern of data—​if the pattern matches any nodes in the HTML data structure, the selector will select those nodes. A selector may select one, many, or zero nodes from a given HTML document, depending on how many matches the pattern has.&lt;/p&gt;&lt;p&gt;The full reference for valid selector forms is quite complex, and beyond the scope of this recipe. See the formal selector specification for complete documentation.&lt;/p&gt;&lt;p&gt;The following selector patterns should be sufficient to get you started:&lt;/p&gt;&lt;p&gt;[:div]&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Selects all &amp;lt;div&amp;gt; element nodes.&lt;/code&gt;&lt;/pre&gt;[:div.sidebar]&lt;pre&gt;&lt;code&gt;Selects all &amp;lt;div&amp;gt; element nodes with a CSS class of &amp;quot;sidebar&amp;quot;.&lt;/code&gt;&lt;/pre&gt;[:div#summary]&lt;pre&gt;&lt;code&gt;Selects the &amp;lt;div&amp;gt; element with an HTML ID of &amp;quot;summary&amp;quot;.&lt;/code&gt;&lt;/pre&gt;[:p :span]&lt;pre&gt;&lt;code&gt;Selects all &amp;lt;span&amp;gt; elements that are descendants of &amp;lt;p&amp;gt; elements.&lt;/code&gt;&lt;/pre&gt;[:div.menu :ul :li :span]&lt;pre&gt;&lt;code&gt;Selects only &amp;lt;span&amp;gt; elements inside an &amp;lt;li&amp;gt; element inside a &amp;lt;ul&amp;gt; element inside a &amp;lt;div&amp;gt; element with a CSS style of &amp;quot;menu&amp;quot;.&lt;/code&gt;&lt;/pre&gt;[[:div (nth-child 2)]]&lt;pre&gt;&lt;code&gt;Selects all &amp;lt;div&amp;gt; elements that are the second children of their parent elements. The double square brackets are not a typo—​the inner vector is used to denote a logical and condition. In this case, the matched element must be a &amp;lt;div&amp;gt;, and the nth-child predicate must hold true.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Other predicates besides nth-child are available, as well as the ability to define custom predicates. See the Enlive documentation for more details.&lt;/p&gt;&lt;p&gt;Finally, there is a special type of selector called a range selector that is not specified by a vector, but rather by a map literal (in curly braces). The range selector contains two other selectors and inclusively matches all the nodes between the two matched nodes, in document order. The starting node is in key position in the map literal and the ending node is in value position, so the selector {[:#foo] [:#bar]} will match all nodes between nodes with a CSS ID of "foo" and a CSS ID of "bar".&lt;/p&gt;&lt;p&gt;The example in the solution uses a range selector in the defsnippet form to select all the nodes that are part of the same logical blog post, even though they aren’t wrapped in a common parent element.&lt;/p&gt;&lt;h2 id="getting&amp;#95;the&amp;#95;voting&amp;#95;points"&gt;Getting the voting points&lt;/h2&gt;&lt;p&gt;Each heading can be voted for, which I believe keeps it on the site longer.  The points and when the article was posted can be pulled out using different selectors.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/webscraping-web-browser-inspector-hacker-news-points-subtext.png" alt="Webscraper - Browser Inspector - points subtext" /&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;.td.subtext&lt;/code&gt; has several &lt;code&gt;span&lt;/code&gt; tags as children and each &lt;code&gt;span&lt;/code&gt; tag has a CSS selector, however, those CSS selectors are dynamically generated and therefore random.&lt;/p&gt;&lt;p&gt;So the Enlive &lt;code&gt;first-child&lt;/code&gt; function is used to get the &lt;code&gt;span&lt;/code&gt; content.&lt;/p&gt;&lt;p&gt;Then the Enlive &lt;code&gt;text&lt;/code&gt; function pulls out all the values from the &lt;code&gt;:content&lt;/code&gt; keys in the selected content.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;map html/text
       &amp;#40;html/select
         website-content-hacker-news
         &amp;#91;:td.subtext html/first-child&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="make&amp;#95;functions&amp;#95;to&amp;#95;get&amp;#95;headings&amp;#95;and&amp;#95;points"&gt;Make functions to get headings and points&lt;/h2&gt;&lt;p&gt;The headings function&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn headlines
  &amp;quot;Headlines of the currently published stories

  Arguments: web address as a string
  Returns: list of headlines as strings&amp;quot;

  &amp;#91;website-url&amp;#93;

  &amp;#40;map html/text
       &amp;#40;html/select
         #&amp;#95;&amp;#40;website-content website-url&amp;#41;
         ;; DEV: cached website
         website-content-hacker-news
         &amp;#91;:td.title :a&amp;#93;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The points function&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn article-scoring
  &amp;quot;Points of the currently published stories

  Arguments: web address as a string
  Returns: headlines in hiccup format &amp;quot;

  &amp;#91;website-url&amp;#93;

  &amp;#40;map html/text
       &amp;#40;html/select
         ;; &amp;#40;website-content website-url&amp;#41;
         ;; DEV: cached website
         website-content-hacker-news
         &amp;#91;:td.subtext html/first-child&amp;#93;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="combining&amp;#95;the&amp;#95;results"&gt;Combining the results&lt;/h2&gt;&lt;p&gt;A function to combine the results of heading and points&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn headlines-and-scoring
  &amp;quot;Putting it all together...&amp;quot;
  &amp;#91;website-url&amp;#93;
  &amp;#40;doseq &amp;#91;line &amp;#40;map #&amp;#40;str %1 &amp;quot; &amp;#40;&amp;quot; %2 &amp;quot;&amp;#41;&amp;quot;&amp;#41;
                    &amp;#40;headlines website-url&amp;#41;
                    &amp;#40;article-scoring website-url&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;println line&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function uses &lt;code&gt;doseq&lt;/code&gt; to iterate over each line and print the results to the REPL (or standard out if run as a command line program).  &lt;code&gt;doseq&lt;/code&gt; itself returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For each line that is printed, we map an anonymous function over the two collections, one collection from each of our functions &lt;code&gt;headlines&lt;/code&gt; and &lt;code&gt;article-scoring&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The anonymous function gets a value from each of the collections and combines them in a string, putting the value from the second collection, &lt;code&gt;article-scoring&lt;/code&gt; in round brackets.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#&amp;#40;str %1 &amp;quot; &amp;#40;&amp;quot; %2 &amp;quot;&amp;#41;&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="combining&amp;#95;selectors"&gt;Combining selectors&lt;/h2&gt;&lt;p&gt;The selectors passed to Enlive's &lt;code&gt;select&lt;/code&gt; function can be combined in a Clojure set.&lt;/p&gt;&lt;p&gt;So to get both headings and scoring we can use the following set as an arguments&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#{&amp;#91;:td.title :a&amp;#93; &amp;#91;:td.subtext html/first-child&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we can combine the prevous &lt;code&gt;headings&lt;/code&gt; and &lt;code&gt;article-scoring&lt;/code&gt; functions into a single function.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn headlines-and-scoring &amp;#91;&amp;#93;
  &amp;#40;map html/text
       &amp;#40;html/select website-content-hacker-news
                    #{&amp;#91;:td.title :a&amp;#93; &amp;#91;:td.subtext html/first-child&amp;#93;}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The results of this function have the headings and scoring interleaved.  Using the Clojure &lt;code&gt;partition&lt;/code&gt; function pairs each heading and score&lt;/p&gt;&lt;p&gt;The anonymous function is updated to destructure the arguments, so we get a separate heading and score, which is then assembled in the same string form.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn print-headlines-and-scoring &amp;#91;&amp;#93;
  &amp;#40;doseq &amp;#91;line &amp;#40;map &amp;#40;fn &amp;#91;&amp;#91;h s&amp;#93;&amp;#93; &amp;#40;str h &amp;quot; &amp;#40;&amp;quot; s &amp;quot;&amp;#41;&amp;quot;&amp;#41;&amp;#41;
                    &amp;#40;partition 2 &amp;#40;headlines-and-scoring&amp;#41;&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;println line&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;This just touches on the basics of Enilve and more examples will come in future articles.&lt;/p&gt;</description><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/raising-spacemacs-issues-and-pull-requests/</guid><link>http://practical.li/test-blog/posts/raising-spacemacs-issues-and-pull-requests/</link><title>Spacemacs - raising issues and pull requests</title><description>&lt;p&gt;Contributing to &lt;a href='https://www.spacemacs.org/'&gt;Spacemacs&lt;/a&gt; is very much a community activity and we can all help the maintainers continue to make &lt;a href='https://www.spacemacs.org/'&gt;Spacemacs&lt;/a&gt; an excellent experience for everyone.&lt;/p&gt;&lt;p&gt;With a few simple tips, its easy to report issues and create pull requests that are ready to merge into Spacemacs &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="spacemacs&amp;#95;master&amp;#95;and&amp;#95;develop"&gt;Spacemacs master and develop&lt;/h2&gt;&lt;p&gt;If you have a problem with Spacemacs, there is a good chance that its already been fixed in the &lt;code&gt;develop&lt;/code&gt; branch of Spacemacs.  Until Spacemacs 0.300 is released to &lt;code&gt;master&lt;/code&gt; then I recommend using the &lt;code&gt;develop&lt;/code&gt; branch.  There are lots of new features on &lt;code&gt;develop&lt;/code&gt; too.&lt;/p&gt;&lt;p&gt;To change to &lt;code&gt;develop&lt;/code&gt;, open a terminal and change to the &lt;code&gt;&amp;#126;/.emacs.d&lt;/code&gt; directory and run the Git command &lt;code&gt;git checkout develop&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Before starting Emacs with the &lt;code&gt;develop&lt;/code&gt; branch, move your &lt;code&gt;.spacemacs&lt;/code&gt; file to a backup.  This will create the latest version of the &lt;code&gt;.spacemacs&lt;/code&gt; file from the Spacemacs template.  If you keep your original &lt;code&gt;.spacemacs&lt;/code&gt; file, then use &lt;code&gt;SPC f e D&lt;/code&gt; to launch ediff with your current &lt;code&gt;.spacemacs&lt;/code&gt; file and the latest Spacemacs template.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='https://www.youtube.com/watch?v=XC7LGI0Q2u8&amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&amp;index=3'&gt;Updating Spacemacs develop from within Spacemacs&lt;/a&gt; demonstrates how to update the &lt;code&gt;develop&lt;/code&gt; branch using Magit. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="raising&amp;#95;issues"&gt;Raising Issues&lt;/h2&gt;&lt;p&gt;Take a look at the &lt;a href='https://github.com/syl20bnr/spacemacs/issues'&gt;current issue list on the Spacemacs repository&lt;/a&gt; before creating a new issue, it might have already been raised.  The Spacemacs community is very active, so issues do get raised quickly.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Ask on the &lt;a href='https://gitter.im/syl20bnr/spacemacs'&gt;Spacemacs Gitter chat&lt;/a&gt; if you are not sure if its an issue, or just need help. For Clojure specific help, there is also &lt;a href='clojurians.slack.com/messages/spacemacs'&gt;#spacemacs channel&lt;/a&gt; in the &lt;a href='http://clojurians.net/'&gt;Clojurians Slack community&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;SPC h I&lt;/code&gt; or &lt;code&gt;M-m h I&lt;/code&gt; within Spacemacs will create an issue on the Spacemacs GitHub repository, including all the useful information about your environment, including version of Spacemacs, Emacs, Operating System, etc.  All very useful to help get your issue resolved quicker.&lt;/p&gt;&lt;p&gt;Please be as descriptive as possible on how the issue happens and what you would expect to happen instead.&lt;/p&gt;&lt;h2 id="making&amp;#95;changes"&gt;Making changes&lt;/h2&gt;&lt;p&gt;If you have a fix, a new feature or keybindings to add/change, then pull requests are most welcome.  Again you can create almost everything from Spacemacs, only visiting GitHub to press the &lt;strong&gt;Create pull request&lt;/strong&gt; button at the end.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Please read the &lt;a href='https://github.com/syl20bnr/spacemacs/blob/develop/doc/CONVENTIONS.org'&gt;Spacemacs Conventions&lt;/a&gt; before making changes, especially the naming and keybinding conventions. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To make a change:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;a href='https://www.youtube.com/watch?v=XC7LGI0Q2u8&amp;list=PLpr9V-R8ZxiCHMl2_dn1Fovcd34Oz45su&amp;index=3'&gt;Update to the latest &lt;code&gt;develop&lt;/code&gt; branch&lt;/a&gt;&lt;/em&gt; and fork the project to your own GitHub repository.  Or clone Spacemacs to a different directory if you dont want to hack on your live setup.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Create a new branch from &lt;code&gt;develop&lt;/code&gt; with a meaningful name&lt;/em&gt; - &lt;code&gt;SPC g s&lt;/code&gt; to open Magit Status. &lt;code&gt;b c&lt;/code&gt; to start creating a branch. Select &lt;code&gt;develop&lt;/code&gt; from the list of current branches as the base for you new branch.  Type in the name of your new branch and press &lt;code&gt;RET&lt;/code&gt;.  You are automatically placed in the new branch.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Make your changes and create a single commit&lt;/em&gt; - &lt;code&gt;SPC g s&lt;/code&gt; for magit status, &lt;code&gt;s&lt;/code&gt; to stage changes, &lt;code&gt;c c&lt;/code&gt; to create a new commit, entering a commit message.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Use the &lt;strong&gt;[layer-name]&lt;/strong&gt; convention if the PR is for a specific layer, to help everyone to find and review your pull request quickly.  For example: &lt;strong&gt;[Clojure] Sesman and missing eval / format keybindings&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/syl20bnr/spacemacs/pull/13215'&gt;&lt;img src="/test-blog/images/spacemacs-github-pull-request-title-merged.png" alt="Spacemacs GitHub Pull Request - Title in square brackets convention" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Changes in pull requests include three parts and should be all part of a &lt;strong&gt;single commit&lt;/strong&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CHANGELOG.develop entry - a summary of the change made that is part of the documentation for the next stable release and so everyone can find it easily&lt;/li&gt;&lt;li&gt;README.org - any changes to using a layer&lt;/li&gt;&lt;li&gt;The change itself - unless its just a documentation change in the README.org.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;pull&amp;#95;request"&gt;Creating a pull request&lt;/h2&gt;&lt;p&gt;An example of making a change to the Clojure layer from within Spacemacs, creating a single commit using Magit.&lt;/p&gt;&lt;p&gt;You only need to visit GitHub to press the &lt;em&gt;Create Pull Request&lt;/em&gt; button.&lt;/p&gt;&lt;p&gt;If you need to update a Pull Request, then commit all your changes locally using Commit Amend, &lt;code&gt;c a&lt;/code&gt; in Magit.  Then force push&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; Video - consider redoing &amp;ndash;&gt; &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/OMS-3Jl05mE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;Thank you &lt;a href='https://practicalli.github.io/'&gt;Practicalli&lt;/a&gt;&lt;/p&gt;</description><pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/lenovo-x1-extreme-gen2-ubuntu-install/</guid><link>http://practical.li/test-blog/posts/lenovo-x1-extreme-gen2-ubuntu-install/</link><title>Ubuntu install on Lenovo X1 Extreme 2nd Gen with RAID</title><description>&lt;p&gt;A successful installation of Ubuntu 19.10 on the Lenovo X1 Extreme (gen2) laptop, configured with 2 solid state hard drives configured for RAID-0 with LLVM encrypted partitions.  , along with   The laptop is configured with 32Gb memory and 2 SSDs in RAID-0 configuration for speed&lt;/p&gt;&lt;p&gt;This laptop will be used for real-time video encoding for the Practicalli broadcasts via YouTube as well as doing some data science in Clojure.&lt;/p&gt;&lt;p&gt;This was a very smooth installation and all the hardware works correctly.  The nVidia open source drivers and WiFi adaptor did cause a little extra work, so I have included tips and troubleshooting guides to help you reslove these issues quickly.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="getting&amp;#95;the&amp;#95;ubuntu&amp;#95;install"&gt;Getting the Ubuntu Install&lt;/h2&gt;&lt;p&gt;&lt;a href='https://ubuntu.com/download/server'&gt;Download Ubuntu server 19.10 iso image&lt;/a&gt; to have the option of setting up RAID across multiple SSD's.  If RAID is not required then just use the &lt;a href='https://ubuntu.com/download/desktop'&gt;Ubuntu desktop 19.10 distribution&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There is little point in configuring the Intel Rapid Raid in the BIOS as &lt;a href='https://en.wikipedia.org/wiki/Mdadm'&gt;Linux software raid (mdadm)&lt;/a&gt; is much better.&lt;/p&gt;&lt;p&gt;Use the &lt;strong&gt;&lt;a href='https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-ubuntu'&gt;Startup Disk Creator&lt;/a&gt;&lt;/strong&gt; application on Ubuntu to burn the Ubuntu server image to a 1Gb USB memory stick Boot computer, press Enter for boot menu, F1 to open bios configuration&lt;/p&gt;&lt;h2 id="configure&amp;#95;the&amp;#95;bios"&gt;Configure the Bios&lt;/h2&gt;&lt;p&gt;Switch on the computer and press &lt;code&gt;Enter&lt;/code&gt; when you see the prompt to interrupt the system startup. Press &lt;code&gt;F1&lt;/code&gt; to enter the BIOS configuration.&lt;/p&gt;&lt;p&gt;Make the following changes to the BIOS&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Disable Secure Boot: NVIDIA Drivers are not signed which makes Secure Boot interrupt the boot processit when it attempts to verify these drivers are trusted.&lt;/li&gt;&lt;li&gt;Disable Windows 10 fast startup if dual booting Windows and Linux.  When enabled it builds hibernation files on Windows reboot instead of a normal compuer shutdown.&lt;/li&gt;&lt;li&gt;Ubuntu can crash when loading the default  (open source driver). Consequently we will blacklist it and installing the NVIDIA proprietary driver which works fine.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Save changes and reboot&lt;/p&gt;&lt;h2 id="ubuntu&amp;#95;server&amp;#95;install"&gt;Ubuntu server install&lt;/h2&gt;&lt;p&gt;Follow the &lt;a href='https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server'&gt;Ubuntu server install guide&lt;/a&gt; with the following additional steps.&lt;/p&gt;&lt;h3 id="temporarily&amp;#95;blacklist&amp;#95;ubuntu’s&amp;#95;nouveau&amp;#95;nvidia&amp;#95;driver"&gt;Temporarily Blacklist Ubuntu’s Nouveau NVIDIA Driver&lt;/h3&gt;&lt;p&gt;In the GRUB menu press &lt;code&gt;E&lt;/code&gt; to edit the command to boot the operating system&lt;/p&gt;&lt;p&gt;Type &lt;code&gt;nomodeset&lt;/code&gt; at the end of the &lt;code&gt;linux&lt;/code&gt; line&lt;/p&gt;&lt;p&gt;The Prevents the system from loading the Nouveau graphics drivers which cause issues and may hang the computer.  The Nouveau drivers will be permanently blacklisted once Ubuntu server is installed.&lt;/p&gt;&lt;h3 id="section&amp;#95;8:&amp;#95;configure&amp;#95;storage&amp;#95;-&amp;#95;raid"&gt;Section 8: Configure Storage - RAID&lt;/h3&gt;&lt;p&gt;If you have two solid state drives (SSD's) in the laptop you can configure a redundant array of disks (RAID).&lt;/p&gt;&lt;p&gt;RAID requires two or more unformatted partitions (ext4 and xfs partitions cannot be used). Partitions used in a RAID should have the same size partition.&lt;/p&gt;&lt;p&gt;Its not possible to boot from a RAID partition, so we need a separate partition for /boot&lt;/p&gt;&lt;p&gt;From the Configure Storage menu, select manual to open the partition editor&lt;/p&gt;&lt;p&gt;The following steps were used to create a raid array with logical volume management and encrypted disks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;delete all existing partitions (wipes the Windows recovery partition too - only do this if you never want Windows)&lt;/li&gt;&lt;li&gt;create 250 Mb unformatted partition on each disk&lt;/li&gt;&lt;li&gt;create 476.939 Gb unformatted partition on each disk&lt;/li&gt;&lt;li&gt;create a RAID 0 partition using the two 476.939 Gb partitions (use RAID 1 if you want redundancy rather than speed/size)&lt;/li&gt;&lt;li&gt;create LVM on raid partition, set encryption on the disk (prompted for password when ever you boot the computer)&lt;/li&gt;&lt;li&gt;Format one of 250Mb partitons and set mount point to /boot&lt;/li&gt;&lt;li&gt;[optional] Format the remaining 250Mb partition how ever you want.  I left it unused&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="/test-blog/images/ubuntu-server-partitions-raid-zero.png" alt="Ubuntu Server - partitions - raid and llvm" /&gt;&lt;/p&gt;&lt;p&gt;Follow the rest of the &lt;a href='https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-server'&gt;Ubuntu server install guide&lt;/a&gt; and reboot when finished.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Use RAID-0 (striping) for maximum speed, allowing data to be written to both SSD storage devices in parallel.  Use RAID-1 (mirroring) for redundancy as data is copied to both storage devices. &lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt; If RAID-0 fails then it will not be possible to access any data, however, the whole space on the disk is available.  RAID-1 is safer as even if one partition or disk fails, then data can still be accessed. &lt;/p&gt;&lt;p&gt; All my development work, documments and configurations are saved to the cloud (usually multiple services), so even if one SSD should become corrupt, I would not loose any work. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="installing&amp;#95;a&amp;#95;destkop&amp;#95;environment"&gt;Installing a destkop environment&lt;/h2&gt;&lt;p&gt;The Ubuntu server does not install a desktop environment by default, but has access to all the same packages so its easy to add one.&lt;/p&gt;&lt;p&gt;Once the server is rebooted, login with your new account name and password.  This account has access rights to install software and configure the server using the &lt;code&gt;sudo&lt;/code&gt; command.&lt;/p&gt;&lt;h2 id="blacklist&amp;#95;nouveau&amp;#95;driver&amp;#95;to&amp;#95;avoid&amp;#95;conflicts."&gt;Blacklist Nouveau driver to avoid conflicts.&lt;/h2&gt;&lt;p&gt;Open up terminal and enter the following linux commands:&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;sudo bash -c &amp;quot;echo blacklist nouveau &amp;gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&amp;quot;

sudo bash -c &amp;quot;echo options nouveau modeset=0 &amp;gt;&amp;gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Confirm the content of the new modprobe config file:&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;cat /etc/modprobe.d/blacklist-nvidia-nouveau.conf

blacklist nouveau
options nouveau modeset=0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="install&amp;#95;the&amp;#95;nvidia&amp;#95;closed&amp;#95;source&amp;#95;drivers"&gt;Install the nVidia closed source drivers&lt;/h3&gt;&lt;p&gt;The closed source nVidia drivers get the most out of the graphics card in the laptop.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;ubuntu-drivers&lt;/code&gt; command show you which drivers are recommended for your given hardware&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;sudo ubuntu-drivers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same command can be used to automatically install the recommended driver.&lt;/p&gt;&lt;pre&gt;&lt;code class="sudo"&gt;sudo ubuntu-drivers autoinstall
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="install&amp;#95;desktop&amp;#95;environment"&gt;Install desktop environment&lt;/h3&gt;&lt;p&gt;Gnome is the default desktop environment for Ubuntu.  To install, use the following command&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;sudo apt install ubuntu-desktop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are other desktop environments available.  List them using the command&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;apt-cache search --names-only desktop

ubuntu-desktop - The Ubuntu desktop system
ubuntu-desktop-minimal - The Ubuntu desktop minimal system
cinnamon-desktop-environment - Cinnamon desktop environment - full desktop with extra components
desktop-base - common files for the Debian Desktop
neurodebian-desktop - neuroscience-oriented distribution - desktop integration
ros-desktop - Robot OS desktop metapackage
autopilot-desktop - Autopilot support for the ubuntu Desktop platform
autopilot-desktop-legacy - Autopilot support for the ubuntu Desktop platform
budgie-desktop - Desktop package for budgie-desktop
budgie-desktop-minimal - Minimal desktop environment for Ubuntu Budgie
kde-plasma-desktop - KDE Plasma Desktop and minimal set of applications
kubuntu-desktop - Kubuntu Plasma Desktop/Netbook system
lubuntu-desktop - Lubuntu Desktop environment
ubuntu-budgie-desktop - Ubuntu Budgie metapackage
ubuntu-mate-desktop - Ubuntu MATE - full desktop
ubuntu-unity-desktop - The Ubuntu Unity desktop system
ubuntukylin-desktop - The Ubuntu Kylin desktop system
ubuntustudio-desktop - Ubuntu Studio Desktop Package
ukui-desktop-environment - UKUI Desktop Environment &amp;#40;metapackage&amp;#41;
vanilla-gnome-desktop - Vanilla GNOME metapackage
xubuntu-desktop - Xubuntu desktop system
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use the command &lt;code&gt;apt-cache show&lt;/code&gt; followed by the package name to see a description of that package.&lt;/p&gt;&lt;h2 id="issues"&gt;Issues&lt;/h2&gt;&lt;p&gt;The nVidia driver issue is well known and solutions shared.  There was an unexpected issue with the WiFi.  It was unexpected because it wasn't actually an issue at all.&lt;/p&gt;&lt;h3 id="update&amp;#95;the&amp;#95;firmware"&gt;Update the firmware&lt;/h3&gt;&lt;p&gt;If you have a custom build of the laptop it probably has the latest version of the firmware.  Pre-built laptops may not have the latest firmware version.&lt;/p&gt;&lt;p&gt;It is prudent to check anyway and you can see if there is an upgrade for your hardware using the &lt;code&gt;fwupdmgr&lt;/code&gt; command&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;sudo fwupdmgr update

&amp;#40;on the latest version, 0.1.27&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="wifi&amp;#95;adaptor&amp;#95;not&amp;#95;recognised"&gt;WiFi adaptor not recognised&lt;/h3&gt;&lt;p&gt;If you have a Lenovo Ethernet adaptor plugged in (not the USB type) then WiFi is automatically disabled.  Unplug the Ethernet adaptor and WiFi hardware is automatically enabled (no reboot required).  Plugging the Ethernet adaptor back in will shut down the WiFi hardware, saving power.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/lenovo-x1-extreme-bios-network-wireless-auto-disconnection.png" alt="Lenovo X1 Extreme - Bios - network wireless auto-disconnection" /&gt;&lt;/p&gt;&lt;p&gt;If you are still having issues, ensure you are using kernel version 5.0.18 or greater (Ubuntu 19.10 has 5.0.23 at time of writing)&lt;/p&gt;&lt;p&gt;Start diagnosing the issue with the &lt;code&gt;lspci&lt;/code&gt; command to see what hardware is detected.&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;lspci | grep -i network

jr0cket@whitestar:&amp;#126;$ lspci | grep -i network
52:00.0 Network controller: Intel Corporation Device 2723 &amp;#40;rev 1a&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then check to see if the network hardware is actually working.  The following was done with the Lenovo Ethernet adaptor plugged in, so disabling the WiFi hardware.&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;iwconfig

wlp82s0   IEEE 802.11  ESSID:off/any
          Mode:Managed  Access Point: Not-Associated   Tx-Power=off
          Retry short limit:7   RTS thr:off   Fragment thr:off
          Power Management:on

lo        no wireless extensions.

enp0s31f6  no wireless extensions.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try the &lt;a href='https://askubuntu.com/questions/1169616/ubuntu-19-04-wifi-not-working-on-lenovo-thinkpad-x1-extreme-gen-2'&gt;suggestions on the askubuntu website&lt;/a&gt;&lt;/p&gt;</description><pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/practicalli-youtube-website/</guid><link>http://practical.li/test-blog/posts/practicalli-youtube-website/</link><title>Practicalli YouTube Website</title><description>&lt;p&gt;YouTube is great service for sharing your video content across the world.  However, the user experience is highly focused on discovering lots of different content in an adhoc manner.  The user experience is not so great when you wish to curate a series of videos.&lt;/p&gt;&lt;p&gt;YouTube has a very detailed API which can be used to create a website to provide your own user experience, so lets start building a website with Clojure.&lt;/p&gt;&lt;p&gt;All code is available on the &lt;a href='https://github.com/practicalli/youtube-website/'&gt;practicalli/youtube-website&lt;/a&gt; repository.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; GitHub issue &amp;ndash;&gt; &lt;!&amp;ndash; https://github.com/practicalli/blog-content/issues/36 &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;website&amp;#95;project"&gt;Creating a website project&lt;/h2&gt;&lt;p&gt;Create a Clojure project using Clojure CLI tools and clj-new&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:new app practicalli/youtube-website
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="add&amp;#95;project&amp;#95;dependencies"&gt;Add project dependencies&lt;/h2&gt;&lt;p&gt;Edit the &lt;code&gt;deps.edn&lt;/code&gt; file and add the latest dependencies for the ring, compojure and Clojure data.json libraries&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt; :deps {org.clojure/clojure   {:mvn/version &amp;quot;1.10.1&amp;quot;}
        ring                  {:mvn/version &amp;quot;1.8.0&amp;quot;}
        compojure             {:mvn/version &amp;quot;1.6.1&amp;quot;}
        clj-http              {:mvn/version &amp;quot;3.10.0&amp;quot;}
        org.clojure/data.json {:mvn/version &amp;quot;0.2.7&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These libraries provide functions for handling http requests (ring, compojure) and working with JSON data (data.json).&lt;/p&gt;&lt;h2 id="add&amp;#95;the&amp;#95;namespaces&amp;#95;for&amp;#95;ring&amp;#95;and&amp;#95;compojure"&gt;Add the namespaces for ring and compojure&lt;/h2&gt;&lt;p&gt;Edit the &lt;code&gt;src/practicalli/youtube&amp;#95;website.clj&lt;/code&gt; file and add the library namespaces, so we can call functions from those namespaces in our own code.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;:require &amp;#91;ring.adapter.jetty :as adapter&amp;#93;
          &amp;#91;ring.util.response :refer &amp;#91;response&amp;#93;&amp;#93;
          &amp;#91;compojure.core     :refer &amp;#91;defroutes GET POST&amp;#93;&amp;#93;
          &amp;#91;compojure.route    :refer &amp;#91;not-found&amp;#93;&amp;#93;
          &amp;#91;clj-http.client    :as http-client&amp;#93;
          &amp;#91;clojure.data.json  :as json&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="add&amp;#95;basic&amp;#95;routing&amp;#95;using&amp;#95;compojure"&gt;Add basic routing using compojure&lt;/h2&gt;&lt;p&gt;Compojure library provides a simple way to route requests based on HTTP method (GET, POST) and web address.  For now, simple messages are returned using the &lt;code&gt;response&lt;/code&gt; function from ring.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defroutes webapp
  &amp;#40;GET &amp;quot;/&amp;quot;               &amp;#91;&amp;#93; &amp;#40;response &amp;quot;home-page&amp;quot;&amp;#41;&amp;#41;

  &amp;#40;GET &amp;quot;/playlist/:name&amp;quot; &amp;#91;&amp;#93; &amp;#40;response &amp;quot;playlist&amp;quot;&amp;#41;&amp;#41;

  &amp;#40;not-found
    &amp;quot;&amp;lt;h1&amp;gt;Page not found, I am very sorry.&amp;lt;/h1&amp;gt;&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="update&amp;#95;server&amp;#95;start&amp;#95;stop"&gt;Update server start stop&lt;/h2&gt;&lt;p&gt;Adding functions to start and stop the Jetty web server without stopping the REPL itself speeds up development.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;defonce&lt;/code&gt; expression defines a name for the server which runs as soon as defonce is evaluated.&lt;/p&gt;&lt;p&gt;In the REPL, evaluate &lt;code&gt;&amp;#40;.stop server&amp;#41;&lt;/code&gt; to stop the Jetty embedded server.&lt;/p&gt;&lt;p&gt;Evaluate &lt;code&gt;&amp;#40;.start server&amp;#41;&lt;/code&gt; to start the Jetty embedded server again.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn jetty-shutdown-timed
  &amp;quot;Shutdown server after specific time,
  allows time for threads to complete.
  Stops taking new requests immediately by
  closing the HTTP listener and freeing the port.&amp;quot;
  &amp;#91;server&amp;#93;
  &amp;#40;.setStopTimeout server 1000&amp;#41;
  &amp;#40;.setStopAtShutdown server true&amp;#41;&amp;#41;


;; Define a single instance of the embedded Jetty server
&amp;#40;defonce server
  &amp;#40;adapter/run-jetty
    #'webapp
    {:port         8000
     :join?        false
     :configurator jetty-shutdown-timed}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; The stop/start approach used here is a very simplified version of other lifecycle management libraries, eg. &lt;a href='https://github.com/stuartsierra/component'&gt;Component&lt;/a&gt;, &lt;a href='https://github.com/tolitius/mount'&gt;Mount&lt;/a&gt; and &lt;a href='https://github.com/weavejester/integrant'&gt;Integrant&lt;/a&gt;.  As we have only one component, the Jetty server, there is no need to use a lifecycle management library. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="cache&amp;#95;youtube&amp;#95;api&amp;#95;results"&gt;Cache YouTube API results&lt;/h2&gt;&lt;p&gt;Using the &lt;code&gt;def&lt;/code&gt; function a name is bound to the results of the YouTube API calls.  Using a &lt;code&gt;def&lt;/code&gt; means that the API will only be called once and the results cached in our REPL.&lt;/p&gt;&lt;p&gt;This means we only have to call our API once per REPL session, so we don't use up our data rate limits or have to wait if the API calls are slow or down.  This is only a temporary approach, but its handy for development.&lt;/p&gt;&lt;p&gt;First lets get the playlists for the practicalli channel.  The channel has a unique &lt;strong&gt;chanelID&lt;/strong&gt; and we want to see the &lt;strong&gt;snippet&lt;/strong&gt; and &lt;strong&gt;contentDetails&lt;/strong&gt; part of the result.&lt;/p&gt;&lt;p&gt;Requests to the YouTube API from our Clojure app need to authenticate, which is done so via an access token provides in the Google API dashboard, under my account.  An environment variable called &lt;code&gt;YOUTUBE&amp;#95;API&amp;#95;KEY&lt;/code&gt; was created in my operating system and is used from the Clojure application via &lt;code&gt;System/getenv&lt;/code&gt; function call.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def youtube-url-channel-practicalli
  &amp;#40;str &amp;quot;https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&amp;amp;channelId=UCLsiVY-kWVH1EqgEtZiREJw&amp;amp;key=&amp;quot; &amp;#40;System/getenv &amp;quot;YOUTUBE&amp;#95;API&amp;#95;KEY&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives us a list of all the playlists created by the Practicalli channel, along with lots of other data&lt;/p&gt;&lt;p&gt;To find the specific pieces of data that are useful, create a helper function to extract just the &lt;strong&gt;items&lt;/strong&gt; section of the response&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def practicalli-channel-playlists-full-details
  &amp;#40;get &amp;#40;json/read-str
         &amp;#40;:body
          &amp;#40;http-client/get youtube-url-channel-practicalli&amp;#41;&amp;#41;&amp;#41;
       &amp;quot;items&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;items&lt;/strong&gt; section has several playlists, so we need to iterate over the results to extract the specific id and title of each playlist&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn playlist-names
  &amp;quot;Extract YouTube id and title for each Playlist found in the channel&amp;quot;
  &amp;#91;all-playlists&amp;#93;
  &amp;#40;into {}
        &amp;#40;for &amp;#91;playlist all-playlists
              :let     &amp;#91;id &amp;#40;get playlist &amp;quot;id&amp;quot;&amp;#41;
                        title &amp;#40;get-in playlist &amp;#91;&amp;quot;snippet&amp;quot; &amp;quot;title&amp;quot;&amp;#93;&amp;#41;&amp;#93;&amp;#93;
          {id title}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the REPL, call this function with the results from the API call, narrowed down to just the &lt;strong&gt;items&lt;/strong&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#&amp;#95;&amp;#40;playlist-names practicalli-channel-playlists-full-details&amp;#41;
;; =&amp;gt; {&amp;quot;PLpr9V-R8ZxiB3u90ga&amp;#95;SdxYsF2k2JTag1&amp;quot; &amp;quot;Clojure CLI and tools.deps&amp;quot;, &amp;quot;PLpr9V-R8ZxiCHMl2&amp;#95;dn1Fovcd34Oz45su&amp;quot; &amp;quot;Practicalli Spacemacs&amp;quot;, &amp;quot;PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv&amp;quot; &amp;quot;Clojure Study Group&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can take a similar approach to get the videos in a particular playlist.&lt;/p&gt;&lt;p&gt;First define a new URL to be used to call the YouTube API.  This will get all the information about that playlist.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def youtube-url-channel-practicalli-playlist-study-group
  &amp;#40;str &amp;quot;https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,id&amp;amp;playlistId=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv&amp;amp;key=&amp;quot; &amp;#40;System/getenv &amp;quot;YOUTUBE&amp;#95;API&amp;#95;KEY&amp;quot;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then call the YouTube API with the new URL for the study group playlist&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def practicalli-playlist-study-group
  &amp;#40;get
    &amp;#40;json/read-str
      &amp;#40;:body
       &amp;#40;http-client/get youtube-url-channel-practicalli-playlist-study-group&amp;#41;&amp;#41;&amp;#41;
    &amp;quot;items&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then extract the relevant data we want using a helper function.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn playlist-items
  &amp;quot;Get the important values for each video in the playlist

  `snippet`:`resourceId`:`videoId` - used for the URL address of the video
  `snippet`:`title` - title of the video
  `snippet`:`thumbnails` : `default` : `url` - full URL of thumbnail image&amp;quot;

  &amp;#91;playlist-details&amp;#93;

  &amp;#40;into {}
        &amp;#40;for &amp;#91;item playlist-details
              :let &amp;#91;id &amp;#40;get-in item &amp;#91;&amp;quot;snippet&amp;quot; &amp;quot;resourceId&amp;quot; &amp;quot;videoId&amp;quot;&amp;#93;&amp;#41;
                    title &amp;#40;get-in item &amp;#91;&amp;quot;snippet&amp;quot; &amp;quot;title&amp;quot;&amp;#93;&amp;#41;
                    thumbnail &amp;#40;get-in item &amp;#91;&amp;quot;snippet&amp;quot; &amp;quot;thumbnails&amp;quot; &amp;quot;default&amp;quot; &amp;quot;url&amp;quot;&amp;#93;&amp;#41;&amp;#93;&amp;#93;
          {id &amp;#91;title thumbnail&amp;#93;}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="add&amp;#95;handler&amp;#95;functions"&gt;Add handler functions&lt;/h2&gt;&lt;p&gt;TODO: Return specific information about the playlists and apis&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn home-page
  &amp;quot;Default view of the Practicalli videos &amp;quot;
  &amp;#91;request&amp;#93;
  &amp;#40;response &amp;quot;Hello World&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return information about a specific playlist, initially this is hard coded to just use the study group playlist.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn playlist
  &amp;quot;Display a playlist as defined by the parameter list&amp;quot;
  &amp;#91;request&amp;#93;
  ;; hard coded to study-group playlist for now
  &amp;#40;response
    &amp;#40;str &amp;#40;playlist-items practicalli-playlist-study-group&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the REPL, test the handler by calling it with an empty hash-map, simulating an empty request.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#&amp;#95;&amp;#40;playlist {}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="update&amp;#95;our&amp;#95;routes"&gt;Update our routes&lt;/h2&gt;&lt;p&gt;Add a route for &lt;code&gt;/study-group&lt;/code&gt; to call the &lt;code&gt;playlist&lt;/code&gt; handler and show the results as a string&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defroutes webapp
  &amp;#40;GET &amp;quot;/&amp;quot;               &amp;#91;&amp;#93; &amp;#40;response &amp;quot;home-page&amp;quot;&amp;#41;&amp;#41;

  &amp;#40;GET &amp;quot;/study-group&amp;quot;    &amp;#91;&amp;#93; playlist&amp;#41;
  &amp;#40;GET &amp;quot;/playlist/:name&amp;quot; &amp;#91;&amp;#93; &amp;#40;response &amp;quot;playlist&amp;quot;&amp;#41;&amp;#41;

  &amp;#40;not-found
    &amp;quot;&amp;lt;h1&amp;gt;Page not found, I am very sorry.&amp;lt;/h1&amp;gt;&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="improve&amp;#95;the&amp;#95;experience"&gt;Improve the experience&lt;/h2&gt;&lt;p&gt;Use Bulma, Bootstrap or Foundation CSS libraries to present the information in a much nicer way.&lt;/p&gt;&lt;p&gt;For example, a ClojureScript / figwheel main project I created previously uses Bootstrap cards.  These cards could show the video thumbnail and video title and include a link to play the video using the videoId value.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://practicalli.github.io/clojure-study-group/'&gt;Practicalli - mock YouTube website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/practicalli/clojure-study-group-website'&gt;GitHub repository - mock YouTube website&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The same can be done for a server side web application.&lt;/p&gt;&lt;p&gt;The challenge of using ClojureScript may come from too many API calls if the results are not cached.  Som e investigation as to the best approach will be done in the next few weeks.&lt;/p&gt;&lt;p&gt;Thank you.&lt;/p&gt;</description><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/reclojure-the-community-conference-for-all/</guid><link>http://practical.li/test-blog/posts/reclojure-the-community-conference-for-all/</link><title>re:Clojure - the Clojure community conference for all</title><description>&lt;p&gt;&lt;a href='https://reclojure.org/'&gt;re:Clojure&lt;/a&gt; was a rapidly assembled conference created by several of the London Clojurian community members, after the closing of SkillsMatter who for 8 years ran an a Clojure conference in London. Luckily many of the speakers were available to talk at the this new conference and several members of the community made it all happen, with the help of lots of wonderful sponsors&lt;/p&gt;&lt;p&gt;All the talks were recorded and videos will be published soon, so &lt;a href='https://www.youtube.com/channel/UCbZW8yCqEncYciie8_1yy7w'&gt;subscribe to the re:Cojure YouTube channel&lt;/a&gt; and be notified when they are available.&lt;/p&gt;&lt;p&gt;Here are some of my highlights from the re:Clojure conference.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; GitHub issues &amp;ndash;&gt; &lt;!&amp;ndash; https://github.com/practicalli/blog-content/issues/23 &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-tweet-audience.png" alt="reClojure audience" /&gt;&lt;/p&gt;&lt;h2 id="a&amp;#95;few&amp;#95;of&amp;#95;my&amp;#95;favourite&amp;#95;talks&amp;#95;(they&amp;#95;were&amp;#95;all&amp;#95;great)"&gt;A few of my favourite talks (they were all great)&lt;/h2&gt;&lt;p&gt;I loved all the talks at re:Clojure and we are all so greatful for all the people who volunteered to share their experiences with us.  Here are just a few of my favourites.&lt;/p&gt;&lt;p&gt;&lt;a href='https://twitter.com/superzamp?lang=en'&gt;Clément Salaün&lt;/a&gt; came over from France to live code 3D objects using Clojure and &lt;a href='https://www.openscad.org/'&gt;OpenSCAD&lt;/a&gt;.  &lt;a href='https://www.openscad.org/'&gt;OpenSCAD&lt;/a&gt; is a free software tool for creating solid 3D CAD objects, for Linux/UNIX, MS Windows and Mac OS X.&lt;/p&gt;&lt;p&gt;It was amazing to see real time updates to the 3D model as Clojure code was evaluated.  Clement also brought some of the pieces already brought to life with a 3D printer and shared them with the audience.  I have long been interested in 3D modelling and animation with &lt;a href='https://www.blender.org/'&gt;Blender&lt;/a&gt;, so its great to see something similar with Clojure.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-tweet-3d-printing.png" alt="reClojure 3d printing with clojure" /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/peterwestmacott'&gt;Peter Westmacott&lt;/a&gt; gave an engaging lesson in mathematics including imaginary numbers and strange attractors, all leading up to building fractal images with Clojure and the Mandelbrot set.  Again there was live coding to drive the fractal graphics.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-tweet-mandelbrot.png" alt="reClojure - Peter Westmacott - Mandelbrot generator in Clojure" /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://twitter.com/_danabor'&gt;Dana Borinski&lt;/a&gt; is a developer with &lt;a href='https://twitter.com/AppsFlyerDev'&gt;AppsFlyer&lt;/a&gt; who really love Clojure.  They process 90 Billion events per day using Clojure, so they really do love Clojure.  Dana created &lt;a href='https://github.com/AppsFlyer/mate-clj'&gt;mate-clj&lt;/a&gt; to help developers debug their code.  The &lt;a href='https://github.com/AppsFlyer/mate-clj'&gt;mate-clj library&lt;/a&gt; prints every execution step to the Clojure REPL, providing lots of lovely information to see exactly what happens when you evaluate code.  This is a great aid to help you to debug your code and understand what its doing under the covers.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-tweet-dana-loves-repl.png" alt="reClojure - Dana Borski - loves REPL" /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://juxt.pro/people/mal.html'&gt;Malcolm Sparks&lt;/a&gt;, a co-founder of &lt;a href='http://juxt.pro/'&gt;JUXT&lt;/a&gt; the well regarded Clojure consultancy company, gave an insightful keynote to round out the day.  Malcolm discussed the point that a computer has 3 jobs, capture data, process data and output data.  Most languages do one of these well.&lt;/p&gt;&lt;p&gt;Systems have evolved to be very centred around data and transmitting data between applications.  Object serialisation probably one of the biggest mistakes made, certainly Sun regretted making that available in Java and hastily introduced XML to try cover up that mistake.  XML and SOAP introduced a repository for looking up schema information and versioning of schema too.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-tweet-malcolm-sparks.png" alt="reClojure - Malcolm Sparks - Code meet data" /&gt;&lt;/p&gt;&lt;p&gt;A clean data format improve the way our systems work, and by transmit their schema along with the data then.  JSON is a data format that has more potential than you may originally have considered.  JSON is not only ubiquitous and easily accessible from all major programming languages, when coupled with JSON schema you also set your data free from the constraints of a particular language.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-tweet-juxt-jinx.png" alt="reClojure - JUXT - Jinx JSON schema processing" /&gt;&lt;/p&gt;&lt;h2 id="huge&amp;#95;thanks&amp;#95;to&amp;#95;the&amp;#95;sponsors"&gt;Huge thanks to the sponsors&lt;/h2&gt;&lt;p&gt;&lt;img src="/test-blog/images/reclojure-sponsors.png" alt="reClojure - Sponsors" /&gt;&lt;/p&gt;&lt;h2 id="feedback&amp;#95;from&amp;#95;the&amp;#95;conference"&gt;Feedback from the Conference&lt;/h2&gt;&lt;p&gt;See the &lt;a href='https://twitter.com/search?q=%23reclojure'&gt;#reclojure tag on twitter&lt;/a&gt; for more feedback from the conference.&lt;/p&gt;&lt;h2 id="the&amp;#95;future&amp;#95;of&amp;#95;re:clojure"&gt;The future of re:Clojure&lt;/h2&gt;&lt;p&gt;The organisers plan was to have re:Clojure as the start of many more community conferences in the future, both in London and around the UK.  Over the next few months there will be more details shared about running a conference so anyone in the community can drive it.&lt;/p&gt;&lt;p&gt;Thank you.&lt;/p&gt;</description><pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/clojure-advent-of-code-2019/</guid><link>http://practical.li/test-blog/posts/clojure-advent-of-code-2019/</link><title>Clojure Advent Of Code - a fun way to learn</title><description>&lt;p&gt;Advent of Code is the annual coding challenge with a festive theme.  Each day there is a new challenge in two parts, the first fairly easy the second a little more involved.  The challenges are an investment of your time to complete them all, although even trying just a few is enough to help you think in different ways.&lt;/p&gt;&lt;p&gt;Every programming language requires regular practice to maintain your skills.  A full time developer role gives you lots of opportunities to practice every day, however, its often focused in around solving problems within a specific business domain, with little time to explore others.  The Advent of Code puts you in a different domain, so its great for extending your coding experiences.&lt;/p&gt;&lt;p&gt;Solving challenges in a different language is another great way to extend your experiences, so here are some tips and examples for solving the advent of code in Clojure.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; GitHub issue &amp;ndash;&gt; &lt;!&amp;ndash; https://github.com/practicalli/blog-content/issues/22 &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="tips&amp;#95;to&amp;#95;solving&amp;#95;the&amp;#95;challenges"&gt;Tips to solving the challenges&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Keep the solution as simple as possible.  Its very easy to over-complicate the solution and end up simply confusing yourself.&lt;/li&gt;&lt;li&gt;Don't try and make the perfect solution.  Write something that works, this will give you a nice ego boost.  Then you can experiment with the code and see if you can improve your approach.&lt;/li&gt;&lt;li&gt;Break down the problem into the simplest thing you can solve first.  Trying to solve a problem all at once will quickly have you going around in circles.&lt;/li&gt;&lt;li&gt;Keep all the code and make notes.  I use a a design journal in my projects to document my thinking process, capture decisions that worked and those that didn't work for this project.  The journal is a great way to cement learning from solving the challenge.&lt;/li&gt;&lt;li&gt;Challenges are only accessible from their day of the month onwards.  There is a count-down clock displayed on the next challenge to open, so you know when it will be available.  Don't feel pressured to keep up with the challenges though, enjoy the experience and have fun, you will learn more that way.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="/test-blog/images/advent-of-code-2019-day1.png" alt="Advent Of Code 2019 Day 1 challenge snippet" /&gt;&lt;/p&gt;&lt;h2 id="a&amp;#95;previous&amp;#95;example"&gt;A previous example&lt;/h2&gt;&lt;p&gt;In the following video I walk through the first challenge of Advent of Code from 2018, trying out different solutions at increasing levels of abstraction.  With each level of abstraction it helps to think in a more functional way.&lt;/p&gt;&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/opM7fU7IAV8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;project&amp;#95;for&amp;#95;the&amp;#95;challenge"&gt;Creating a project for the challenge&lt;/h2&gt;&lt;p&gt;I created &lt;a href='https://github.com/practicalli/advent-of-clojure-code-2019'&gt;practcialli/advent-of-clojure-code-2019&lt;/a&gt;, a deps.edn project created with &lt;a href='https://github.com/seancorfield/clj-new'&gt;clj-new&lt;/a&gt;.  I will be sharing any challenges I complete.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:new lib practicalli/advent-of-clojure-code-2019
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a new Clojure file for each of the daily challenges.  It makes sense to keep both parts of each day in the same file.&lt;/p&gt;&lt;h2 id="useful&amp;#95;resources&amp;#95;and&amp;#95;examples"&gt;Useful Resources And Examples&lt;/h2&gt;&lt;p&gt;Here are some videos of solving advent of code challenges and code solutions to many challenges from 2019 and past years.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/fdlk/advent-2019'&gt;fdlk/advent-2019&lt;/a&gt; - example Clojure solutions to the advent of code&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/Bogdanp/awesome-advent-of-code'&gt;Awesome Advent Of Code&lt;/a&gt; - a collection of solutions in various languages&lt;/li&gt;&lt;li&gt;&lt;a href='https://potetm.com/videos.html'&gt;Advent of Code 2018 video walk-through of Clojure solutions by Tim Pote&lt;/a&gt; and &lt;a href='https://github.com/potetm/advent-of-code'&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also take a look at the &lt;a href='https://clojurians.slack.com/messages/adventofcode'&gt;#adventofcode channel in the Clojurians slack channel&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Thank you.&lt;/p&gt;</description><pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/advent-of-parens-2019/</guid><link>http://practical.li/test-blog/posts/advent-of-parens-2019/</link><title>Advent Of Parens 2019 - feast on Clojure this holiday season</title><description>&lt;p&gt;&lt;!&amp;ndash; GitHub issue:  &amp;ndash;&gt; &lt;!&amp;ndash; https://github.com/practicalli/blog-content/issues/34 &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;The holiday season is know for over indulge, so why not stuff your head full of Clojure and functional programming.  Its far healthier than the alternatives :)&lt;/p&gt;&lt;p&gt;To help you indulge, &lt;a href='https://lambdaisland.com/blog/2019-11-25-advent-of-parens'&gt;Arne from LambdaIsland&lt;/a&gt;, &lt;a href='https://porkostomus.gitlab.io/'&gt;Bobby Towers&lt;/a&gt;, &lt;a href='https://alexanderoloo.com/'&gt;Alexander Oloo&lt;/a&gt; and I are writing a blog post each day as part of the Advent Of Parens 2019 celebration.  Every day we plan to publish a short posts that share tips and experiences with functional programming and Clojure.&lt;/p&gt;&lt;p&gt;You can find the articles I am planning to write on the &lt;a href='https://github.com/practicalli/blog-content/projects/1?card_filter_query=label%3Aadvent-of-parens'&gt;practicalli blog project board&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;While you wait to open these posts each day of December, I am kickstarting your feast of Clojure in this article.&lt;/p&gt;&lt;p&gt;I also encourage you to take some time over the holiday season to practice Clojure&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='/test-blog/posts/clojure-advent-of-code-2019/'&gt;Clojure Advent of Code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/watch?v=MZcuL4lRw5E&amp;list=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv'&gt;Practicalli Clojure study group&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;p&gt;&lt;div style="float: right"&gt; &lt;a href='https://www.youtube.com/user/ClojureTV'&gt;&lt;img src="https://clojure.org/images/clojuretv.png" alt="Clojure TV - years worth of videos from Clojure conj conference" title= | width=180 /&gt;&lt;/a&gt; &lt;/div&gt;&lt;/p&gt;&lt;h2 id="discover&amp;#95;new&amp;#95;ideas&amp;#95;with&amp;#95;clojure&amp;#95;videos"&gt;Discover new ideas with Clojure videos&lt;/h2&gt;&lt;p&gt;&lt;a href='https://www.youtube.com/user/ClojureTV'&gt;Clojure TV YouTube channel&lt;/a&gt; has hundreds of videos from Clojure Conj conferences over the last 6 years.  Some of my favourites include&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/watch?v=MnvtPzEH-d8&amp;list=PLZdCLR02grLqSy15ALLAZDU6LGpAJDrAQ'&gt;Follow the Data: Product Development in Clojure - Derek Troy-West&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/watch?v=U99UHYUW63k&amp;list=PLZdCLR02grLqSy15ALLAZDU6LGpAJDrAQ&amp;index=5'&gt;From Lazy Lisper to Confident Clojurist - Alexander Oloo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/watch?v=m0rSJ9xdsdk&amp;list=PLZdCLR02grLqSy15ALLAZDU6LGpAJDrAQ&amp;index=10'&gt;Interactive Programming for Artificial Intelligence - Dragan Djuric&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/watch?v=OUZZKtypink&amp;list=PLZdCLR02grLqSy15ALLAZDU6LGpAJDrAQ&amp;index=11'&gt;Sherlock Holmes, Consulting Developer - Stuart Halloway&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Or just sit back and watch &lt;a href='https://www.youtube.com/watch?v=MnvtPzEH-d8&amp;list=PLZdCLR02grLqSy15ALLAZDU6LGpAJDrAQ'&gt;all the amazing Clojure/conj 2019 talks&lt;/a&gt; back to back&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='https://www.youtube.com/channel/UCbZW8yCqEncYciie8_1yy7w'&gt;reClojure conference videos&lt;/a&gt; will be available soon, subscribe to find out when the are published &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;div style="float: right"&gt; &lt;a href='https://practicalli.github.io/'&gt;&lt;img src="/test-blog/images/practicalli-banner-icons-full-horizontal.png" alt="Practicalli Clojure Study group" title= | width=320 /&gt;&lt;/a&gt; &lt;/div&gt;&lt;/p&gt;&lt;h2 id="studying&amp;#95;clojure"&gt;Studying Clojure&lt;/h2&gt;&lt;p&gt;For the last year I have run a YouTube based study and there are over 50 hours of video,  introducing Clojure concepts and building applications with Clojure and ClojureScript.&lt;/p&gt;&lt;p&gt;See the Clojure Study group playlist for all the videos.  I am currently creating videos to introduce Clojure CLI and tools.deps approach to Clojure and ClojureScript projects.&lt;/p&gt;&lt;p&gt;TODO create a playlist for just the 4Clojure solutions&lt;/p&gt;&lt;p&gt;start learning Clojure CLI and tools.deps approach for Clojure&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Discuss any of the content that Practicalli creates on the &lt;a href='https://clojurians.slack.com/messages/practicalli'&gt;#practicalli channel of the Clojurians Slack community&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There are several excellent professional courses and tutorials available to help you deep dive into specific areas.  Take some time out and learn something new for the new year.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://lambdaisland.com/blog/2019-11-25-advent-of-parens'&gt;Lambda Island&lt;/a&gt; - high quality and effective video tutorials on Clojure, with detailed transcripts&lt;/li&gt;&lt;li&gt;&lt;a href='https://purelyfunctional.tv/'&gt;Purelyfunctional.tv&lt;/a&gt; - comprehensive training courses for Clojure&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.learnreframe.com/'&gt;Learn re-frame&lt;/a&gt; - a detailed video-based course from an experienced JavaScript &amp; ClojureScript developer, Jacek Schae&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="cool&amp;#95;projects&amp;#95;to&amp;#95;try&amp;#95;out"&gt;Cool projects to try out&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/porkostomus/mecca-pix'&gt;Bobby Towers&lt;/a&gt; has some excellent projects that are very creative and inspiring projects, so great fun for all over the holiday season.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Games: Conways Game of Life, Sudoku, Minesweeper, Tic-tac on my toe&lt;/li&gt;&lt;li&gt;Music: &lt;a href='https://github.com/porkostomus/mecca-pix'&gt;MECCA Music Platform&lt;/a&gt;, Exploring MIDI files,&lt;/li&gt;&lt;li&gt;Graphics: &lt;a href='https://github.com/porkostomus/mecca-pix'&gt;Convert images into SVG&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href='https://github.com/borkdude'&gt;Michiel Borkent&lt;/a&gt; has been a prolific developer in the Clojure community, creating many excellent projects this year.  It is definitely worth investing a little time getting to know these projects&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/borkdude/re-find'&gt;re-find&lt;/a&gt; - to find a function based on arguments and expected return value.  Try the &lt;a href='https://borkdude.github.io/re-find.web/'&gt;re-find website&lt;/a&gt; too.&lt;/li&gt;&lt;li&gt;clj-kondo - my favourite Clojure lint tool that can be used interactively in your editor or as a script in a CI or other batch process.&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/borkdude/jet'&gt;jet&lt;/a&gt; - a command line tool to transform between JSON, EDN and Transit&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/borkdude/babashka'&gt;babashka&lt;/a&gt; - when you want to write Clojure rather than a bash script&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="clojure&amp;#95;podcasts"&gt;Clojure podcasts&lt;/h2&gt;&lt;p&gt;There are many engaging discussions on Clojure and functional programming in the following podcasts.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/channel/UC1UxEQuBvfLJgWR5tk_XIXA'&gt;Apropos cast&lt;/a&gt; - an eclectic discussion and collaborative hack session with Clojure.&lt;/li&gt;&lt;li&gt;&lt;a href='https://clojurescriptpodcast.com/'&gt;clojurescript podcast&lt;/a&gt; - with many Clojure and ClojureScript contributors, giving a deep insight into the language and development aproach.&lt;/li&gt;&lt;li&gt;&lt;a href='https://clojuredesign.club/'&gt;clojure design club&lt;/a&gt; - a very enjoyable discussion between two experienced developers working with Clojure, discussing issues raised by the community.&lt;/li&gt;&lt;li&gt;&lt;a href='http://blog.cognitect.com/cognicast'&gt;cognicast&lt;/a&gt; - a long running podcast from the stewards of the Clojure language&lt;/li&gt;&lt;li&gt;&lt;a href='https://twitter.com/defnpodcast?lang=en'&gt;defn podcast&lt;/a&gt; - an enjoyable but occasionally sweary podcast by one of the characters in the Clojure community.&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.therepl.net/'&gt;The REPL&lt;/a&gt; - regular news about Clojure and activities in the community (also a mailing list)&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.youtube.com/channel/UC5G6p4wwKuDKZsgDrbp5j5A'&gt;JUXT Cast&lt;/a&gt; - a new broadcasts from the development team at JUXT, a very active Clojure consultancy company&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I listen to these podcasts when I go for a walk in the park or shopping for fresh fruit and vegetables.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;I hope you enjoy the rich content available in the Clojure community and have a very merry Clojure holiday season.&lt;/p&gt;&lt;p&gt;If there are any topics or tips you need help with, please get in touch via the &lt;a href='https://clojurians.slack.com/messages/practicalli'&gt;Clojurians Slack community&lt;/a&gt;.&lt;/p&gt;</description><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/consuming-apis-with-clojure/</guid><link>http://practical.li/test-blog/posts/consuming-apis-with-clojure/</link><title>Consuming APIs from Clojure</title><description>&lt;p&gt;When getting results from API calls, its very common to recieve data in JavaScript Object Notation (JSON).&lt;/p&gt;&lt;p&gt;Once we have the JSON data, it is converted to a Clojure data structure to use the hundreds of functions in clojure.core that can readily transform the shape of that data.&lt;/p&gt;&lt;p&gt;We can process this with the clojure.data.json library and community projects including cheshire and transit.&lt;/p&gt;&lt;p&gt;Clojure has several ways to get any web resource, from a simple function call to &lt;code&gt;slurp&lt;/code&gt;, via clj-http and httpkit clients. There are useful tools to help you test APIs, such as &lt;a href='https://www.getpostman.com/'&gt;Postman&lt;/a&gt; and Swagger.&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;project"&gt;Creating a project&lt;/h2&gt;&lt;p&gt;By creating a project you can keep all your code and results of executing code too. You can also just run all this code in the REPL if you wish.&lt;/p&gt;&lt;p&gt;If you have &lt;code&gt;clj-new&lt;/code&gt; installed, then run the following in a terminal&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:new app practicalli/simple-api-client
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Otherwise, simply clone the &lt;a href='https://github.com/practicalli/simple-api-client'&gt;practicalli/simple-api-client&lt;/a&gt; repository.&lt;/p&gt;&lt;h2 id="getting&amp;#95;content"&gt;Getting content&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;slurp&lt;/code&gt; function is a convenient way of getting content from the web, or from local files too.  &lt;code&gt;Slurp&lt;/code&gt; is defined in &lt;code&gt;clojure.core&lt;/code&gt; so is always available in Clojure.&lt;/p&gt;&lt;p&gt;For example, we can get a book from Project Guttenberg  very easily.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;slurp &amp;quot;http://www.gutenberg.org/cache/epub/844/pg844.txt&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This returns the whole text of "The Importance of Being Earnest" book as a single string.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-webapps-client-slurp-guttenberg-result.png" alt="Clojure slurp - getting a book from project Guttenberg" /&gt;&lt;/p&gt;&lt;h2 id="getting&amp;#95;an&amp;#95;api"&gt;Getting an API&lt;/h2&gt;&lt;p&gt;A simple scoreboard API was deployed in episodes &lt;a href='https://www.youtube.com/watch?v=U6OAdQqWegQ&amp;list=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv&amp;index=19&amp;t=0s'&gt;16&lt;/a&gt; and &lt;a href='https://www.youtube.com/watch?v=Bna3hxgO97k&amp;list=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv&amp;index=20&amp;t=0s'&gt;17&lt;/a&gt; of the Clojure study group.&lt;/p&gt;&lt;p&gt;All the &lt;a href='https://game-scoreboard-api.herokuapp.com/index.html'&gt;API documentation is published within the website&lt;/a&gt; and provides an interactive dashboard to test API calls.  This is provided by the Swagger library.&lt;/p&gt;&lt;p&gt;A random score is returned by calling the &lt;code&gt;game/random-score&lt;/code&gt; URL.  This generates a random player-id and score and adds it to the scoreboard.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;slurp &amp;quot;https://game-scoreboard-api.herokuapp.com/game/random-score&amp;quot;&amp;#41;

;; =&amp;gt; &amp;quot;&amp;#91;{\&amp;quot;player-id\&amp;quot;:\&amp;quot;f26fd417-5ac5-4bac-bfda-88342e632ee1\&amp;quot;,\&amp;quot;score\&amp;quot;:31121164},{\&amp;quot;player-id\&amp;quot;:\&amp;quot;0f414b43-d82e-4164-9a31-ec81fac03160\&amp;quot;,\&amp;quot;score\&amp;quot;:95542596},{\&amp;quot;player-id\&amp;quot;:\&amp;quot;9b9eada5-8a9a-4115-aa58-2567688d4055\&amp;quot;,\&amp;quot;score\&amp;quot;:29895185}&amp;#93;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The current scoreboard can be viewed at:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;slurp &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot;&amp;#41;

;; =&amp;gt; &amp;quot;&amp;#91;{\&amp;quot;player-id\&amp;quot;:\&amp;quot;f26fd417-5ac5-4bac-bfda-88342e632ee1\&amp;quot;,\&amp;quot;score\&amp;quot;:31121164},{\&amp;quot;player-id\&amp;quot;:\&amp;quot;0f414b43-d82e-4164-9a31-ec81fac03160\&amp;quot;,\&amp;quot;score\&amp;quot;:95542596},{\&amp;quot;player-id\&amp;quot;:\&amp;quot;9b9eada5-8a9a-4115-aa58-2567688d4055\&amp;quot;,\&amp;quot;score\&amp;quot;:29895185}&amp;#93;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; The scores are saved into an Clojure atom, so each time the application restarts the scoreboard reset to empty.  If the application is not used for 30 minutes, then Heroku will shut down the application (the application is not on an Heroku paid plan, just on free monthly credits). &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Using &lt;code&gt;slurp&lt;/code&gt; the data returned from the API is placed into a string, which is not a Clojure collection (although some Clojure functions will treat a string as a collection of characters).&lt;/p&gt;&lt;p&gt;As its a string, any special characters contained within are escaped using the &lt;code&gt;&amp;amp;#8216; to ensure the string can be processed correctly.  For example, where the data returned contains a double quote, &lt;/code&gt;"player-name"`, then each double quote is escaped.  This is adding a transformation to the data that isn't very useful.&lt;/p&gt;&lt;h2 id="converting&amp;#95;to&amp;#95;clojure"&gt;Converting to Clojure&lt;/h2&gt;&lt;p&gt;In the simple server we used &lt;code&gt;clojure.data&lt;/code&gt; library to generate JavaScript Object Notation from a Clojure data structure, specifically a Clojure hash-map.&lt;/p&gt;&lt;p&gt;We can use &lt;code&gt;clojure.data.json&lt;/code&gt; to turn our JSON string into a Clojure data structure.&lt;/p&gt;&lt;p&gt;Add &lt;code&gt;clojure.data.json&lt;/code&gt; as a dependency to the project.&lt;/p&gt;&lt;p&gt;Edit &lt;code&gt;deps.edn&lt;/code&gt; and add &lt;code&gt;org.clojure/data.json {:mvn/version &amp;quot;0.2.7&amp;quot;}&lt;/code&gt; to the &lt;code&gt;:deps&lt;/code&gt; map.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:deps
 {org.clojure/clojure   {:mvn/version &amp;quot;1.10.1&amp;quot;}
  org.clojure/data.json {:mvn/version &amp;quot;0.2.7&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then add &lt;code&gt;clojure.data.json&lt;/code&gt; to the project namespace.&lt;/p&gt;&lt;p&gt;Edit the &lt;code&gt;src/practicalli/simple-api-client.clj&lt;/code&gt; and require the &lt;code&gt;clojure.data.json&lt;/code&gt; namespace&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.simple-api-client
  &amp;#40;:gen-class&amp;#41;
  &amp;#40;:require &amp;#91;clojure.data.json :as json&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now use the &lt;code&gt;read-str&lt;/code&gt; function to read in the JSON data that was returned by the response as a string.&lt;/p&gt;&lt;p&gt;Write the following function call in &lt;code&gt;src/practicalli/simple-api-client.clj&lt;/code&gt; or start a REPL using &lt;code&gt;clj&lt;/code&gt; or &lt;code&gt;clojure -A:rebel&lt;/code&gt; if rebel readline is installed.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;json/read-str
  &amp;#40;slurp &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot;&amp;#41;&amp;#41;
;; =&amp;gt; &amp;#91;{&amp;quot;player-id&amp;quot; &amp;quot;0724e6cc-5c04-4a61-b3b6-d10624feed0e&amp;quot;, &amp;quot;score&amp;quot; 41726706}
;;     {&amp;quot;player-id&amp;quot; &amp;quot;36b521b2-078a-4581-9705-fa54fc1e89b6&amp;quot;, &amp;quot;score&amp;quot; 70622257}
;;     {&amp;quot;player-id&amp;quot; &amp;quot;2e9da877-4911-4658-b964-b5684b858921&amp;quot;, &amp;quot;score&amp;quot; 92581379}
;;     {&amp;quot;player-id&amp;quot; &amp;quot;2c044a04-772f-41cf-a4f5-19e8e8d76e8c&amp;quot;, &amp;quot;score&amp;quot; 4338875}&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From the value returned you can see that this is a Clojure data structure.  It is a vector of 4 hash-maps.&lt;/p&gt;&lt;p&gt;This data is much nicer to work with.&lt;/p&gt;&lt;h2 id="get&amp;#95;requests&amp;#95;with&amp;#95;clj-http&amp;#95;or&amp;#95;httpkit&amp;#95;client"&gt;GET requests with clj-http or httpkit client&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/dakrone/clj-http'&gt;clj-http&lt;/a&gt; and httpkit client are libraries that send a http request and return all the values of the http response.&lt;/p&gt;&lt;p&gt;httpkit client uses the same API at clj-http, so the following code should work with either library.&lt;/p&gt;&lt;p&gt;Both these libraries provide access to the full http response information using the ring approach of putting http data into a hash-map. So we can use more than just the body of the response give by slurp.&lt;/p&gt;&lt;p&gt;As we used httpkit library to build a simple API server, then we will use httpkit client namespace as its part of the httpkit library that was downloaded when we built the simple API server (if you didnt build the server, the library will download when you run the repl for this project).&lt;/p&gt;&lt;p&gt;Edit the &lt;code&gt;deps.edn&lt;/code&gt; file and add the httpkit dependency&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:deps
 {org.clojure/clojure   {:mvn/version &amp;quot;1.10.1&amp;quot;}
  org.clojure/data.json {:mvn/version &amp;quot;0.2.7&amp;quot;}
  http-kit              {:mvn/version &amp;quot;2.4.0-alpha4&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Edit &lt;code&gt;src/practicalli/simple-api-client.clj&lt;/code&gt; and add the httpkit client namespace to the project&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.simple-api-client
  &amp;#40;:gen-class&amp;#41;
  &amp;#40;:require &amp;#91;clojure.data.json :as json&amp;#93;
            &amp;#91;org.httpkit.client :as client&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets start with using httpkit client to get a web page, in this case the front page of the Practicalli blog.&lt;/p&gt;&lt;p&gt;Write the following function call in &lt;code&gt;src/practicalli/simple-api-client.clj&lt;/code&gt; or start a REPL using &lt;code&gt;clj&lt;/code&gt; or &lt;code&gt;clojure -A:rebel&lt;/code&gt; if rebel readline is installed.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;client/get &amp;quot;https://practicalli.github.io/blog/&amp;quot;&amp;#41;
;; =&amp;gt; #org.httpkit.client/deadlock-guard/reify--5883&amp;#91;{:status :pending, :val nil} 0x55598167&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What has happened here?&lt;/p&gt;&lt;p&gt;&lt;code&gt;client/get&lt;/code&gt; returns a promise, so we have to dereference it to get the value. &lt;code&gt;deref&lt;/code&gt; resolves the promise and we get a hash-map as the result&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;deref &amp;#40;client/get &amp;quot;https://practicalli.github.io/blog/&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;@&lt;/code&gt; is the short form syntax for &lt;code&gt;deref&lt;/code&gt;, its commonly used for promises, atoms, refs, etc.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;@&amp;#40;client/get &amp;quot;https://practicalli.github.io/blog/&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you were scraping the web, the &lt;code&gt;:body&lt;/code&gt; key would give you the html from the web page&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;get
  @&amp;#40;client/get &amp;quot;https://practicalli.github.io/blog/&amp;quot;&amp;#41;
  :body&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can use a keyword as a function we can simplify the code&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;:body
 @&amp;#40;client/get &amp;quot;https://practicalli.github.io/blog/&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="clojure"&gt;@&amp;#40;client/get &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot;&amp;#41;
;; =&amp;gt; {:opts {:method :get, :url &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot;}, :body &amp;quot;&amp;#91;{\&amp;quot;player-id\&amp;quot;:\&amp;quot;e8603a88-379f-44a9-8e70-7c822228e8f4\&amp;quot;,\&amp;quot;score\&amp;quot;:7044673}&amp;#93;&amp;quot;, :headers {:connection &amp;quot;keep-alive&amp;quot;, :content-length &amp;quot;70&amp;quot;, :content-type &amp;quot;application/json; charset=utf-8&amp;quot;, :date &amp;quot;Fri, 29 Nov 2019 19:22:56 GMT&amp;quot;, :server &amp;quot;Jetty&amp;#40;9.2.21.v20170120&amp;#41;&amp;quot;, :via &amp;quot;1.1 vegur&amp;quot;}, :status 200}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives a lot of information about the response. If we just want the JSON packet, its in the &lt;code&gt;:body&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;:body
 @&amp;#40;client/get &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot; {:accept :json}&amp;#41;&amp;#41;
;; =&amp;gt; &amp;quot;&amp;#91;{\&amp;quot;player-id\&amp;quot;:\&amp;quot;e8603a88-379f-44a9-8e70-7c822228e8f4\&amp;quot;,\&amp;quot;score\&amp;quot;:7044673}&amp;#93;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;simple&amp;#95;api&amp;#95;status&amp;#95;checker"&gt;Creating a simple API status checker&lt;/h2&gt;&lt;p&gt;With http client we retrieve all the data of the response. In that data is a &lt;code&gt;:status&lt;/code&gt; key that is associated with the HTTP response code, eg. 200 for response OK.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;keys&lt;/code&gt; function in &lt;code&gt;clojure.core&lt;/code&gt; shows all the top level keys of a hash-map.  So we can use this on the response to see the available keys.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;keys
  @&amp;#40;client/get &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot; {:accept :json}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;:status&lt;/code&gt; is a top level key in the response hash-map, so we can use &lt;code&gt;:status&lt;/code&gt; as a function call with the hash-map as an argument, returning just the value of &lt;code&gt;:status&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;:status
 @&amp;#40;client/get &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot; {:accept :json}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have the HTTP code from the &lt;code&gt;:status&lt;/code&gt; key, we can use it to check if the API is working correctly.&lt;/p&gt;&lt;p&gt;Create a &lt;code&gt;-main&lt;/code&gt; function to check the status and return a message&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn -main &amp;#91;&amp;amp; args&amp;#93;
  &amp;#40;println &amp;quot;Checking Game Scoreboard API&amp;quot;&amp;#41;
  &amp;#40;let &amp;#91;status &amp;#40;:status @&amp;#40;client/get
                          &amp;quot;https://game-scoreboard-api.herokuapp.com/game/scoreboard&amp;quot;
                          {:accept :json}&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;if &amp;#40;= 200 status&amp;#41;
      &amp;#40;println &amp;quot;Game Scoreboard status is OK&amp;quot;&amp;#41;
      &amp;#40;println &amp;quot;Warning: status: &amp;quot; status&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The project can then be run by &lt;code&gt;clj -m practicalli/simple-api-client&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;To use the project as a simple API monitor, you can run this command as a cron job or other type of batch process that runs regularly.&lt;/p&gt;&lt;h2 id="trying&amp;#95;apis&amp;#95;with&amp;#95;postman"&gt;Trying APIs with Postman&lt;/h2&gt;&lt;p&gt;If you are working with an unfamiliar API or one that is not self-documented with the Swagger library.  Tools like &lt;a href='https://www.getpostman.com/'&gt;Postman&lt;/a&gt; are a useful way to experiment with API's without having to set up any code.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-webapps-api-postman-scoreboard-random-score-results.png" alt="Clojure Webapps - API testing with Postman - random score results" /&gt;&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Using &lt;code&gt;slurp&lt;/code&gt; is quite a blunt tool and only returns the body of the request.  &lt;code&gt;slurp&lt;/code&gt; is useful for unstructured content or data you can easily work with as a string, such as the text of a website or book.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; The enlive library has many useful functions if you are &lt;a href='http://masnun.com/2016/03/20/web-scraping-with-clojure.html'&gt;scraping the web&lt;/a&gt; for content.  &lt;a href='https://github.com/davidsantiago/hickory'&gt;hickory&lt;/a&gt; is a library for parsing HTML into Clojure data structures, so is also useful for processing HTML content. &lt;/p&gt;&lt;p&gt; ClojureScript does not implement the &lt;code&gt;slurp&lt;/code&gt; function. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Using clj-http and httpkit client, we can work with the whole HTTP request and have access to the meta-data of the request as well as the body.&lt;/p&gt;&lt;p&gt;Using clojure.data is a simple way to transform JSON into Clojure (and Clojure into JSON).  Libraries such as Cheshire and Transit offer more transformation tools and may be more useful for highly nested data transformation.&lt;/p&gt;&lt;p&gt;Once the data is in Clojure we can use all the functions in Clojure core (and community libraries) to manipulate and transform that data and run our queries and logic over them, making it really easy to get the results we are looking for.&lt;/p&gt;&lt;h2 id="references"&gt;References&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/metosin/ring-swagger'&gt;ring-swagger&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/metosin/compojure-api'&gt;compojure-api&lt;/a&gt; - extending compojure to make schema based APIs&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/metosin/spec-tools'&gt;spec-tools&lt;/a&gt; - Clojure/Script utilities on top of clojure.spec, including spec-swagger.&lt;/li&gt;&lt;li&gt;&lt;a href='https://gist.github.com/jr0cket/f68f6317e6ff7cd82a355fa0a02af0f3'&gt;most common word from a novel&lt;/a&gt; - code example of using slurp to access a Project Guttenberg book.&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.http-kit.org/client.html'&gt;httpkit client&lt;/a&gt; - with example code&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/dakrone/clj-http'&gt;clj-http library&lt;/a&gt; - an HTTP library wrapping Apache HttpComponents client.  Project page and documentation.&lt;/li&gt;&lt;/ul&gt;</description><pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/webapp-routes-with-json/</guid><link>http://practical.li/test-blog/posts/webapp-routes-with-json/</link><title>Clojure Webapp routing and APIs with JSON</title><description>&lt;p&gt;Defining routes for a Clojure webapps is easy with the Compojure library and we can also serve JSON to create a simple API.  All this is built on the &lt;a href='clojure-web-server-cli-tools-deps-edn.html'&gt;Clojure webserver we built in the previous article&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Compojure has a &lt;code&gt;defroutes&lt;/code&gt; macro that provides a simple way to define routes and there are other convienience functions that make routing very straight forward.&lt;/p&gt;&lt;p&gt;We can also add transit and other libraries to help manage JSON.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; All the code for this project is at &lt;a href='https://github.com/practicalli/simple-api'&gt;practicalli/simple-api repository&lt;/a&gt; on GitHub. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="understanding&amp;#95;compojure"&gt;Understanding compojure&lt;/h2&gt;&lt;p&gt;Compojure is a library to define a collection of routes and associate each route with a handler.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A route is made from an http method and a specific web address or resource address, such as &lt;code&gt;hello.html&lt;/code&gt; or &lt;code&gt;results.json&lt;/code&gt;&lt;/li&gt;&lt;li&gt;http method switching - running different code based on the HTTP method (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;A handler is simply a function that takes a request map as an argument by default.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Compojure also has convienience functions that make ring responses easier to generate, eg. &lt;code&gt;response&lt;/code&gt;, &lt;code&gt;not-found&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-ring-adaptor-middleware-route-handler-overview.png" alt="Routing with Ring and Compojure" /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://practicalli.github.io/clojure-webapps/compojure/'&gt;Practicalli Clojure Webapps&lt;/a&gt; contains more exmples of compojure.&lt;/p&gt;&lt;h2 id="adding&amp;#95;compojure&amp;#95;to&amp;#95;deps.edn"&gt;Adding compojure to deps.edn&lt;/h2&gt;&lt;p&gt;Take the simple-api-server project from last time&lt;/p&gt;&lt;p&gt;To find latest version we can look up &lt;a href='https://clojars.org/compojure'&gt;compojure on clojars.org&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:paths &amp;#91;&amp;quot;resources&amp;quot; &amp;quot;src&amp;quot;&amp;#93;

 :deps
 {org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}
  http-kit            {:mvn/version &amp;quot;2.4.0-alpha4&amp;quot;}
  compojure           {:mvn/version &amp;quot;1.6.1&amp;quot;}}

 :aliases
 {,,,}}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="namespace&amp;#95;require"&gt;Namespace require&lt;/h2&gt;&lt;p&gt;To use functions from the Compojure library we include them in the namespace declaration.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;:require&lt;/code&gt; directive allows us to specify namespaces who's functions are then available.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;compojure.core&lt;/code&gt; provides the defroutes macro, so we can define routes easily.  It also provides the GET and POST macros to match the different types of requests.&lt;/li&gt;&lt;li&gt;&lt;code&gt;compojure.route&lt;/code&gt; provides the &lt;code&gt;not-found&lt;/code&gt; function that returns a standard 404 error.  This function would be replaced by a website template with hiccup or selma before going live with the webapp.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Edit &lt;code&gt;src/practicalli.simple-api-server.clj&lt;/code&gt; and add the two namespaces.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.simple-api-server
  &amp;#40;:gen-class&amp;#41;
  &amp;#40;:require &amp;#91;org.httpkit.server :as server&amp;#93;
            &amp;#91;compojure.core :refer &amp;#91;defroutes GET POST&amp;#93;&amp;#93;
            &amp;#91;compojure.route :refer &amp;#91;not-found&amp;#93;&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="tweaking&amp;#95;the&amp;#95;-main&amp;#95;function"&gt;Tweaking the -main function&lt;/h2&gt;&lt;p&gt;Update the &lt;code&gt;run-server&lt;/code&gt; function call to use the &lt;code&gt;webapp&lt;/code&gt; created with &lt;code&gt;defroutes&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;
&amp;#40;defn -main
  &amp;quot;Start a httpkit server with a specific port
  #' enables hot-reload of the handler function and anything that code calls&amp;quot;
  &amp;#91;&amp;amp; {:keys &amp;#91;ip port&amp;#93;
      :or   {ip   &amp;quot;0.0.0.0&amp;quot;
             port 8000}}&amp;#93;
  &amp;#40;println &amp;quot;INFO: Starting httpkit server - listening on: &amp;quot; &amp;#40;str &amp;quot;http://&amp;quot; ip &amp;quot;:&amp;quot; port&amp;#41;&amp;#41;
  &amp;#40;reset! server &amp;#40;server/run-server #'webapp {:port port}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="starting&amp;#95;and&amp;#95;stopping&amp;#95;the&amp;#95;server"&gt;Starting and stopping the server&lt;/h2&gt;&lt;p&gt;Specify a specific port when starting the server&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;-main :port 8888&amp;#41;
;; =&amp;gt; &amp;quot;Port: 8888, timeout 100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or simply start the server on the default port using &lt;code&gt;&amp;#40;-main&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Stopping the server is easy, just call the &lt;code&gt;stop-server&lt;/code&gt; functions without arguments.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;stop-server&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; It is necessary to stop and start the server when adding dependencies or chaining the main function definition. &lt;/p&gt;&lt;p&gt; Changes made to the webapp function or anything that function calls can be evaluated to update the REPL, so it is not necessary to stop and starting the web server. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="adding&amp;#95;routes&amp;#95;with&amp;#95;compojure"&gt;Adding Routes with Compojure&lt;/h2&gt;&lt;p&gt;&lt;code&gt;defroutes&lt;/code&gt; function is a macro to provide a simple way to define all the routes.  There is only one &lt;code&gt;defroutes&lt;/code&gt; function per web application and all requests recieved by the server go through this function.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; A series of nested &lt;code&gt;if&lt;/code&gt; functions or the &lt;code&gt;cond&lt;/code&gt; function could be used to define routes, although this is not very efficient code. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Each route in defroutes consists of:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;an http method&lt;/li&gt;&lt;li&gt;URL/URI address&lt;/li&gt;&lt;li&gt;request map (which can be destructured)&lt;/li&gt;&lt;li&gt;a handler (or just some content for the body)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here is a GET request for the main website page.  This would be the same as a browser requesting the website page.&lt;/p&gt;&lt;p&gt;A simple piece of html code is used as the response.  This html code is associated with the &lt;code&gt;:body&lt;/code&gt; of re response hash-map.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defroutes webapp
  &amp;#40;GET &amp;quot;/&amp;quot; &amp;#91;&amp;#93; &amp;quot;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The resulting response hash-map would look as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:headers {}
 :status 200
 :body &amp;quot;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="convenience&amp;#95;handlers"&gt;Convenience handlers&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;response&lt;/code&gt; function provides a successful response (status 200) that includes the message passed as an argument.&lt;/p&gt;&lt;p&gt;In deps.edn add the &lt;code&gt;ring.util.response&lt;/code&gt; namespace, to give access to the &lt;code&gt;response&lt;/code&gt; funciton.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt; &amp;#91;ring.util.response :refer &amp;#91;response&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can use the &lt;code&gt;response&lt;/code&gt; function as part of the &lt;code&gt;defroutes&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defroutes app
  &amp;#40;GET &amp;quot;/&amp;quot; &amp;#91;&amp;#93; &amp;#40;response &amp;quot;Hello clojure world&amp;quot;&amp;#41;&amp;#41;

  ,,,&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or we can include the &lt;code&gt;response&lt;/code&gt; call in a separate handler.  A separate handler is more appropriate when there is a notable amount of content included in the message.  For example, if you are using a template for the return message.&lt;/p&gt;&lt;p&gt;The message forms the value of the :body keyword in the response map, so its quite flexible as to what can be bound to that &lt;code&gt;:body&lt;/code&gt; key.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn hello-world
  &amp;quot;A simple hello world handler,
  using ring.util.response&amp;quot;
  &amp;#91;request&amp;#93;
  &amp;#40;response &amp;quot;hello clojure world, from ring response.&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the REPL we can call this function to see what its returning&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;hello-world {}&amp;#41;
;; =&amp;gt; {:status 200, :headers {}, :body &amp;quot;Hello Clojure World, from ring response.&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If no route matches the incoming request, then the browser will display its own error page.&lt;/p&gt;&lt;p&gt;Using the &lt;code&gt;not-found&lt;/code&gt; function from &lt;code&gt;compojure.route&lt;/code&gt; a custom error message can be returned instead.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defroutes webapp
  &amp;#40;route/not-found &amp;quot;&amp;lt;h1&amp;gt;I am very sorry, but the page you asked for does not exist.&amp;lt;/h1&amp;gt;&amp;quot;&amp;#41;
  &amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using handlers rather than just returning text&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;
&amp;#40;defroutes webapp
  &amp;#40;GET &amp;quot;/&amp;quot;               &amp;#91;&amp;#93; hello-html&amp;#41;
  &amp;#40;GET &amp;quot;/hello-response&amp;quot; &amp;#91;&amp;#93; hello-world&amp;#41;

  &amp;#40;not-found &amp;quot;&amp;lt;h1&amp;gt;Page not found, I am very sorry.&amp;lt;/h1&amp;gt;&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn hello-world
  &amp;quot;A simple hello world handler,
  using ring.util.response&amp;quot;
  &amp;#91;&amp;#95;&amp;#93;
  &amp;#40;response &amp;quot;Hello Clojure World, from ring response.&amp;quot;&amp;#41;&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Calling the &lt;code&gt;hello-world&lt;/code&gt; function with an empty request hash-map, &lt;code&gt;{}&lt;/code&gt; we can see the response hash-map this handler function returns&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;hello-world {}&amp;#41;
;; =&amp;gt; {:status 200, :headers {}, :body &amp;quot;Hello Clojure World, from ring response.&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="viewing&amp;#95;the&amp;#95;full&amp;#95;request&amp;#95;information"&gt;Viewing the full Request information&lt;/h3&gt;&lt;p&gt;Compojure has a request dump function that gives a much nicer output than our initial request-info function. The dump funtion also seperates the default response keys with any additional keys provided by the URL.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;:require
          &amp;#91;ring.handler.dump :refer &amp;#91;handle-dump&amp;#93;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add a route that calls the &lt;code&gt;handle-dump&lt;/code&gt; functions&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;GET &amp;quot;/request-info&amp;quot; &amp;#91;&amp;#93; handle-dump&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="generating&amp;#95;json&amp;#95;from&amp;#95;clojure"&gt;Generating JSON from Clojure&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/clojure/data.json'&gt;&lt;code&gt;clojure/data.json&lt;/code&gt;&lt;/a&gt; is a library for translating between Clojure data structures and the JavaScript Object Notation &lt;code&gt;JSON&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Clojure hash-maps and vectors can be used to create a detailed data structure that can be converted into JSON.&lt;/p&gt;&lt;p&gt;Add the data.json library as a dependency in the &lt;code&gt;deps.edn&lt;/code&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt; org.clojure/data.json {:mvn/version &amp;quot;0.2.7&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then require clojure.data.json namespace in the &lt;code&gt;ns&lt;/code&gt; declaration.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns example
  &amp;#40;:require &amp;#91;clojure.data.json :as json&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To convert to/from JSON strings, use &lt;code&gt;json/write-str&lt;/code&gt; and &lt;code&gt;json/read-str&lt;/code&gt; functions.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;json/write-str {:a 1 :b 2}&amp;#41;
;;=&amp;gt; &amp;quot;{\&amp;quot;a\&amp;quot;:1,\&amp;quot;b\&amp;quot;:2}&amp;quot;

&amp;#40;json/read-str &amp;quot;{\&amp;quot;a\&amp;quot;:1,\&amp;quot;b\&amp;quot;:2}&amp;quot;&amp;#41;
;;=&amp;gt; {&amp;quot;a&amp;quot; 1, &amp;quot;b&amp;quot; 2}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Converting Clojure data into JSON is lossy as you loose some of the type information.&lt;/p&gt;&lt;p&gt;Other approaches include&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/ring-clojure/ring-json'&gt;ring-json&lt;/a&gt; for handling JSON requests and responses&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/weavejester/ring-json-response'&gt;ring-json-response&lt;/a&gt; for returning JSON responses from a ring handler&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;json&amp;#95;api"&gt;Creating a JSON API&lt;/h2&gt;&lt;p&gt;Returning JSON from APIs is a common approach as JSON is a very lightweight data format that is supported by many languages.  So JSON is usually very simple when it comes to data integration.&lt;/p&gt;&lt;p&gt;Add a scores routes that returns JSON, specifying the appropriate content type.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn scores
  &amp;quot;Returns the current scoreboard as JSON&amp;quot;
  &amp;#91;&amp;#95;&amp;#93;
  &amp;#40;println &amp;quot;Calling the scoreboard handler...&amp;quot;&amp;#41;
  {:headers {&amp;quot;Content-type&amp;quot; &amp;quot;application/json&amp;quot;}
   :status  &amp;#40;:OK http-status-codes&amp;#41;
   :body    &amp;#40;json/write-str {:players
                             &amp;#91;{:name &amp;quot;johnny-be-doomed&amp;quot; :high-score 1000001}
                              {:name &amp;quot;jenny-jetpack&amp;quot; :high-score 23452345}&amp;#93;}&amp;#41;}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will return JSON in our browser&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-webapp-api-json-results-scoreboard.png" alt="Clojure Webapps - JSON from an API" /&gt;&lt;/p&gt;&lt;h2 id="defining&amp;#95;a&amp;#95;data&amp;#95;model"&gt;Defining a data model&lt;/h2&gt;&lt;p&gt;Assuming we use the data in several handler functions, we should define that data separately and refer to it by name.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def scoreboard
  {:players
   &amp;#91;{:name &amp;quot;johnny-be-doomed&amp;quot; :high-score 1000001}
    {:name &amp;quot;jenny-jetpack&amp;quot; :high-score 23452345}
    {:name &amp;quot;fred&amp;quot; :high-score 23452345}&amp;#93;}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="specific&amp;#95;player&amp;#95;score&amp;#95;with&amp;#95;url&amp;#95;parameters"&gt;Specific player score with URL parameters&lt;/h2&gt;&lt;p&gt;To get the score for just a single player, use &lt;a href='https://practicalli.github.io/clojure-webapps/compojure/variable-path-elements.html'&gt;variable path elements&lt;/a&gt; as part of the request address.&lt;/p&gt;&lt;p&gt;To get a specific players name, add the &lt;code&gt;:name&lt;/code&gt; element.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defroutes webapp

  &amp;#40;GET &amp;quot;/hello/:name&amp;quot; &amp;#91;&amp;#93; player-score&amp;#41;

  &amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="define&amp;#95;a&amp;#95;player-score&amp;#95;handler&amp;#95;function"&gt;Define a player-score handler function&lt;/h2&gt;&lt;p&gt;Define a &lt;code&gt;player-score&lt;/code&gt; handler function that only returns the score for a particular player.&lt;/p&gt;&lt;p&gt;To get the name of the player from the request hash-map, we can use &lt;code&gt;get-in&lt;/code&gt; to walk the request hash-map.  The player name will be in &lt;code&gt;{:route-params {:name &amp;quot;player-name&amp;quot;}}&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;get-in request &amp;#91;:route-params :name&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To get the score for a particular player, we filter the scoreboard data structure by the name of the player.  For example, if we wanted the score for the player &lt;code&gt;&amp;quot;fred&amp;quot;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;filter &amp;#40;fn &amp;#91;player-entry&amp;#93;
          &amp;#40;= &amp;quot;fred&amp;quot; &amp;#40;:name player-entry&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;get scoreboard :players&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can use these expressions to build our &lt;code&gt;player-score&lt;/code&gt; handler.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn player-score
  &amp;quot;Returns the current scoreboard as JSON&amp;quot;
  &amp;#91;request&amp;#93;
  &amp;#40;println &amp;quot;Calling the player handler...&amp;quot;&amp;#41;
  &amp;#40;let &amp;#91;player &amp;#40;get-in request &amp;#91;:route-params :name&amp;#93;&amp;#41;&amp;#93;
    {:headers {&amp;quot;Content-type&amp;quot; &amp;quot;application/json&amp;quot;}
     :status  &amp;#40;:OK http-status-codes&amp;#41;
     :body    &amp;#40;json/write-str
                &amp;#40;filter &amp;#40;fn &amp;#91;player-entry&amp;#93;
                          &amp;#40;= player &amp;#40;:name player-entry&amp;#41;&amp;#41;&amp;#41;
                        &amp;#40;get scoreboard :players&amp;#41;&amp;#41;&amp;#41;}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can call our scoreboard api with a specific player name, for example http://localhost:8000/player/:jenny-jetpack and just their scores are returned.&lt;/p&gt;&lt;p&gt;If there are going to be multiple scores, then we could sort them first using &lt;code&gt;sort-by :high-score dec&lt;/code&gt; on the results of &lt;code&gt;filter&lt;/code&gt; to give a list of score entries with the highest score first.&lt;/p&gt;&lt;p&gt;Or we could leave it to the client to process the scores in what ever way they wish.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Taking the simple web server and adding Compojure allows us to quickly build a web application or API.&lt;/p&gt;&lt;p&gt;Generating JSON from Clojure data structures is very easy.  Converting JSON into Clojure data structures is just as easy and provides a more efficient way of working with any data recieved in JSON format.&lt;/p&gt;&lt;p&gt;There are several libraries for transforming between JSON and Clojure, including &lt;a href='https://github.com/dakrone/cheshire'&gt;Cheshire&lt;/a&gt;, &lt;a href='https://github.com/metosin/jsonista'&gt;jsonista&lt;/a&gt; and Transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://purelyfunctional.tv/mini-guide/json-serialization-api-clojure/'&gt;JSON Serialization for APIs in Clojure&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Adding specifications is a clean way to ensure a robust API service, checking the type of information being sent and received is of the correct form. &lt;code&gt;clojure.alpha.spec&lt;/code&gt; and &lt;code&gt;pulmatic/schema&lt;/code&gt; are two libraries that will provide this kind of checking.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/seancorfield/usermanager-example'&gt;Sean Corfield has a usermanager project&lt;/a&gt; that is a nice example of a project using deps.edn, ring, compojure, selma for web page templates and Component for life-cycle management (starting and stoping services).&lt;/p&gt;</description><pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/clojure-web-server-cli-tools-deps-edn/</guid><link>http://practical.li/test-blog/posts/clojure-web-server-cli-tools-deps-edn/</link><title>Clojure web server from scratch with deps.edn</title><description>&lt;p&gt;Discover how to build a Clojure web server from the ground up using Clojure CLI tools to create and run the project and &lt;code&gt;deps.edn&lt;/code&gt; to manage the dependencies.&lt;/p&gt;&lt;p&gt;Update: &lt;a href='https://practicalli.github.io/clojure-webapps/'&gt;Practicalli Clojure WebApps&lt;/a&gt; has newer versions of this guide.  Take a look at the Status Monitor and Banking on Clojure projects&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; This project will be used to build a web server that will serve our API, which we will build in future posts and &lt;a href='http://yt.vu/+practicalli'&gt;study group broadcasts&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h1 id="create&amp;#95;a&amp;#95;project"&gt;Create a project&lt;/h1&gt;&lt;p&gt;A new project could be made by manually creating a few files and directories.  The &lt;a href='https://github.com/seancorfield/clj-new'&gt;clj-new project&lt;/a&gt; provides a convienient was to create a project from a template. The &lt;a href='https://github.com/practicalli/clojure-deps-edn'&gt;practicalli/clojure-deps-edn configuration&lt;/a&gt; contains the &lt;code&gt;:project/new&lt;/code&gt; alias.&lt;/p&gt;&lt;p&gt;In a terminal, create the project called &lt;code&gt;practicalli/simple-api-server&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -M:project/new app practicalli/simple-api-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates a Clojure namespace (file) called &lt;code&gt;simple-api-server&lt;/code&gt; in the &lt;code&gt;practicalli&lt;/code&gt; domain.  The project contains the &lt;code&gt;clojure.core&lt;/code&gt;, &lt;code&gt;test.check&lt;/code&gt; and &lt;code&gt;test.runner&lt;/code&gt; libraries by default.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;deps.edn&lt;/code&gt; file defines two aliases (possibly a few more).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:test&lt;/code&gt; includes the &lt;code&gt;test.check&lt;/code&gt; library and test code files under the &lt;code&gt;test&lt;/code&gt; path.&lt;/li&gt;&lt;li&gt;&lt;code&gt;:runner&lt;/code&gt; sets the main namespace to that of the test runner, calling the &lt;code&gt;-main&lt;/code&gt; function in that namespace which then runs all the tests under the directory &lt;code&gt;test&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;deps.edn&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;
{:paths &amp;#91;&amp;quot;src&amp;quot; &amp;quot;resources&amp;quot;&amp;#93;
 :deps {org.clojure/clojure {:mvn/version &amp;quot;1.10.3&amp;quot;}}
 :aliases
 {:run-m {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;practicalli.simple-api-server&amp;quot;&amp;#93;}
  :run-x {:ns-default practicalli.simple-api-server
          :exec-fn greet
          :exec-args {:name &amp;quot;Clojure&amp;quot;}}
  :test {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
         :extra-deps {org.clojure/test.check {:mvn/version &amp;quot;1.1.0&amp;quot;}}}
  :runner
  {:extra-deps {com.cognitect/test-runner
                {:git/url &amp;quot;https://github.com/cognitect-labs/test-runner&amp;quot;
                 :sha &amp;quot;b6b3193fcc42659d7e46ecd1884a228993441182&amp;quot;}}
   :main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;cognitect.test-runner&amp;quot;
               &amp;quot;-d&amp;quot; &amp;quot;test&amp;quot;&amp;#93;}
  :uberjar {:replace-deps {com.github.seancorfield/depstar
{:mvn/version &amp;quot;2.0.211&amp;quot;}}
            :exec-fn hf.depstar/uberjar
            :exec-args {:aot true
                        :jar &amp;quot;simple-api-server.jar&amp;quot;
                        :main-class &amp;quot;practicalli.simple-api-server&amp;quot;
                        :sync-pom true}}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The project created with &lt;a href='https://github.com/seancorfield/clj-new#getting-started'&gt;clj-new&lt;/a&gt; contains all these files&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-simple-api-project-tree.png" alt="Clojure APIs - simple project" /&gt;&lt;/p&gt;&lt;h2 id="adding&amp;#95;a&amp;#95;web&amp;#95;server"&gt;Adding a web server&lt;/h2&gt;&lt;p&gt;To create our Clojure web server we are going to use the httpkit project which is based on the common ring design for web servers.&lt;/p&gt;&lt;p&gt;Using httpkit it is easy to create a server and have functions to stop and start that server inside the REPL, all in a few lines of Clojure code.  Underneath is a powerful JVM server that has been tested to serve 600,000 concurrent HTTP request and supports many modes of operation (websockets, streaming, long polling).&lt;/p&gt;&lt;p&gt;Routing will be done using the compojure library, which is a common approach in the Clojure community (although there are other projects).&lt;/p&gt;&lt;h3 id="add&amp;#95;httpkit&amp;#95;dependency"&gt;Add httpkit dependency&lt;/h3&gt;&lt;p&gt;Add the httpkit library to the project.&lt;/p&gt;&lt;p&gt;Edit the &lt;code&gt;project.edn&lt;/code&gt; file and add &lt;code&gt;http-kit&lt;/code&gt; version &lt;code&gt;2.5.3&lt;/code&gt; to the &lt;code&gt;:deps&lt;/code&gt; map of dependencies&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:deps
{org.clojure/clojure {:mvn/version &amp;quot;1.10.3&amp;quot;}
 http-kit/http-kit {:mvn/version &amp;quot;2.5.3&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="add&amp;#95;httpkit&amp;#95;server&amp;#95;namespace"&gt;Add httpkit server namespace&lt;/h3&gt;&lt;p&gt;Add the httpkit server namespace to the project namespace in which we are going to write the code that defines our server.&lt;/p&gt;&lt;p&gt;Edit &lt;code&gt;simple-api-server.clj&lt;/code&gt; file and change the &lt;code&gt;ns&lt;/code&gt; definition&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.simple-api-server
  &amp;#40;:gen-class&amp;#41;
  &amp;#40;:require &amp;#91;org.httpkit.server :as server&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; &lt;code&gt;:gen-class&lt;/code&gt; allows us to run this namespace from the command line using the &lt;code&gt;java&lt;/code&gt; command. &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="define&amp;#95;an&amp;#95;httpkit&amp;#95;server"&gt;define an httpkit server&lt;/h3&gt;&lt;p&gt;Define a function that starts a Jetty server, taking a port number as an argument&lt;/p&gt;&lt;p&gt;When called, the function starts the server on the specified port and passes all requests to the handler function (which we define next).&lt;/p&gt;&lt;p&gt;The Jetty server listens on the port for all http requests.  Each request is converted by the httpkit server to a Clojure hash-map.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn create-server
  &amp;quot;A ring-based server listening to all http requests
  port is an Integer greater than 128&amp;quot;
  &amp;#91;port&amp;#93;
  &amp;#40;server/run-server handler {:port port}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; There are &lt;a href='https://www.http-kit.org/server.html'&gt;several modes of operation&lt;/a&gt;, simple HTTP server, async/websocket, HTTP streaming and long polling.  These modes can be configures as part of the &lt;code&gt;create-server&lt;/code&gt; function. &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="add&amp;#95;a&amp;#95;handler"&gt;Add a handler&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;create-server&lt;/code&gt; function creates a server that sends every request to the &lt;code&gt;handler&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;handler&lt;/code&gt; function take a request hash-map, bound to the &lt;code&gt;req&lt;/code&gt; argument.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;handler&lt;/code&gt; should return a response hash-map, containing values for &lt;code&gt;:status&lt;/code&gt;, &lt;code&gt;:body&lt;/code&gt; and &lt;code&gt;:headers&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn handler
  &amp;quot;A function that handles all requests from the server.
  Arguments: `req` is a ring request hash-map
  Return: ring response hash-map including :status :headers and :body&amp;quot;
  &amp;#91;req&amp;#93;
  {:status  200
  :headers {}
  :body    &amp;quot;Hello Clojure Server world!&amp;quot;}&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;httpkit server request and response keys&lt;/strong&gt; &lt;/p&gt;&lt;p&gt; The httpkit server creates a Clojure hash-map from each http request, referred to as the request hash-map, using the ring standard. &lt;/p&gt;&lt;p&gt;The request hash-map contains &lt;a href='https://github.com/ring-clojure/ring/wiki/Concepts#requests'&gt;the ring request keys&lt;/a&gt; &lt;/p&gt;&lt;p&gt; The &lt;code&gt;handler&lt;/code&gt; function returns a &lt;a href='https://github.com/ring-clojure/ring/wiki/Concepts#responses'&gt;ring response keys&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="running&amp;#95;the&amp;#95;application"&gt;Running the application&lt;/h2&gt;&lt;p&gt;Start a REPL using the Clojure CLI tools, preferably using &lt;a href='https://github.com/bhauman/rebel-readline#clojure-tools'&gt;rebel-readline&lt;/a&gt; for the complete REPL experience.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -M:repl/rebel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the REPL, load the namespace to include all the code in the running REPL.  Use the &lt;code&gt;:verbose&lt;/code&gt; option to show what namespaces are loading if you are curious.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;require '&amp;#91;practicalli.simple-api-server&amp;#93; :verbose&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change to the namespace so you can call the functions directly from that namespace (otherwise you have to use &lt;code&gt;practicalli.simple-api-server/function-name&lt;/code&gt; each time)&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;in-ns 'practicalli.simple-api-server&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally we can call the &lt;code&gt;create-server&lt;/code&gt; function to start our webserver on a particular port.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;create-server&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;Spacemacs&lt;/strong&gt; &lt;/p&gt;&lt;p&gt; 1) &lt;code&gt;SPC f f&lt;/code&gt; to open a &lt;em&gt;.clj&lt;/em&gt; file from the project &lt;/p&gt;&lt;p&gt; 2) &lt;code&gt;,'&lt;/code&gt; to start a REPL for this project (you could use the code above in the REPL buffer) &lt;/p&gt;&lt;p&gt; 3) &lt;code&gt;, s n&lt;/code&gt; to send current namespace to the repl &lt;/p&gt;&lt;p&gt; 4) &lt;code&gt;, e b&lt;/code&gt; evaluate all the code in the source file (loading the namespace code - can this be done instead of loading namespace) &lt;/p&gt;&lt;p&gt; 5) &lt;code&gt;, s s&lt;/code&gt; to switch to the REPL window &lt;/p&gt;&lt;p&gt; 6) Enter &lt;code&gt;&amp;#40;create-server 8000&amp;#41;&lt;/code&gt; and press &lt;code&gt;RET&lt;/code&gt; to evaluate the function call and start the server. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="testing&amp;#95;our&amp;#95;application"&gt;Testing our application&lt;/h2&gt;&lt;p&gt;&lt;code&gt;clojure.test&lt;/code&gt; library is built into Clojure that provides a simple unit test framework and test runner.  As its part of Clojure, all we need to do is require the library in the namespaces where we write our tests.  There are &lt;a href='https://gist.github.com/plexus/a816a942c01b0e7af1e9836205100337'&gt;several other test libraries and test runners&lt;/a&gt; too.&lt;/p&gt;&lt;p&gt;For every namespace under &lt;code&gt;src&lt;/code&gt; we wish to test, we create the same namespace under &lt;code&gt;test&lt;/code&gt; directory and post-fix &lt;code&gt;-test&lt;/code&gt; to the original name.  So in our project we have:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;src/practicalli/simple-api-server&lt;/code&gt; containing our application functions&lt;/li&gt;&lt;li&gt;&lt;code&gt;test/practicalli/simple-api-server-test&lt;/code&gt; containing our test functions&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;deftest&lt;/code&gt; function is used to define a test that can contain one or more assertions as well as use any setup and tear-down functions.&lt;/p&gt;&lt;p&gt;&lt;code&gt;is&lt;/code&gt; function is used to define a single assertion, comparing a known value with the result of calling a function from the namespace under test.&lt;/p&gt;&lt;h3 id="requiring&amp;#95;the&amp;#95;namespace&amp;#95;to&amp;#95;be&amp;#95;tested"&gt;Requiring the namespace to be tested&lt;/h3&gt;&lt;p&gt;The clj-new app template already created a &lt;code&gt;test/simple-api-server-test.clj&lt;/code&gt; file and required &lt;code&gt;clojure.test&lt;/code&gt; and the namespace to be tested.&lt;/p&gt;&lt;p&gt;Practicalli recommends changing the way the namespaces required.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;use a meaningful and consistant alias for the namespace to be tested, i.e &lt;code&gt;SUT&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;refer specific functions from &lt;code&gt;clojure.test&lt;/code&gt; that are used to define your tests, rather than the indiscriminate &lt;code&gt;:refer :all&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Edit &lt;code&gt;test/practicalli/simple-api-server-test.clj&lt;/code&gt;  and update the &lt;code&gt;ns&lt;/code&gt; definition to define the &lt;code&gt;SUT&lt;/code&gt; alias for the namespace to be tested.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.simple-api-server-test
  &amp;#40;:require &amp;#91;clojure.test :refer &amp;#91;deftest is testing&amp;#93;&amp;#93;
            &amp;#91;practicalli.simple-api-server :as SUT&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;&lt;code&gt;SUT&lt;/code&gt;&lt;/strong&gt; is a commonly used alias meaning &lt;a href='https://en.wikipedia.org/wiki/System_under_test'&gt;System Under Test&lt;/a&gt;.  The alias was added rather than including all functions using &lt;code&gt;:refer :all&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; The alias makes it easy to see which functions are being called from the system under test and therefore provide an understanding of where they are being tested. &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="write&amp;#95;a&amp;#95;basic&amp;#95;test"&gt;Write a basic test&lt;/h3&gt;&lt;p&gt;One of the simplest tests we can write it to check the handler is returning a request.  Specifically we can test if we are returning a &lt;code&gt;200&lt;/code&gt; status that confirms the http request was successful.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='https://en.wikipedia.org/wiki/List_of_HTTP_status_codes'&gt;HTTP status codes&lt;/a&gt; - Wikipedia &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Edit &lt;code&gt;test/practicalli/simple-api-server-test.clj&lt;/code&gt; and create a &lt;code&gt;handler-test&lt;/code&gt; function, using the &lt;code&gt;deftest&lt;/code&gt; macro from the &lt;code&gt;clojure.test&lt;/code&gt; library.&lt;/p&gt;&lt;p&gt;The test function has one assertion, defined using the &lt;code&gt;is&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;The assertion compares two values using the &lt;code&gt;=&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;The first value is &lt;code&gt;200&lt;/code&gt;, the HTTP status that means &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The second value is obtained by calling the &lt;code&gt;handler&lt;/code&gt; function from &lt;code&gt;src/practicalli/simple-api-server&lt;/code&gt; namespace.  The result of that call is a response map.  The &lt;code&gt;:status&lt;/code&gt; keyword is used as a function call, taking the response map as an argument, returning the value associated with &lt;code&gt;:status&lt;/code&gt; in the response map.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;deftest handler-test
  &amp;#40;testing &amp;quot;Response to events&amp;quot;
    &amp;#40;is &amp;#40;= 200 &amp;#40;:status &amp;#40;SUT/handler {}&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="running&amp;#95;tests"&gt;Running tests&lt;/h2&gt;&lt;p&gt;In a terminal window, use the Clojure CLI tools to start the test runner and run all the results.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clj -A:test:runner
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;Spacemacs&lt;/strong&gt; &lt;/p&gt;&lt;p&gt; &lt;code&gt;SPC u , s i&lt;/code&gt; to edit the prompt for cider-jack-in &lt;/p&gt;&lt;p&gt; add &lt;code&gt;-A:test&lt;/code&gt; at the front of the command line, after &lt;code&gt;clj&lt;/code&gt;, and press &lt;code&gt;RET&lt;/code&gt;.  The REPL starts and includes the test path in the classpath and allows cider.test to be run from CIDER &lt;/p&gt;&lt;p&gt; &lt;code&gt;, t a&lt;/code&gt; will now run all tests when the cursor is in any of the Clojure files. &lt;/p&gt;&lt;p&gt; Alternatively, define a .dir-locals.el file as set &lt;code&gt;:test&lt;/code&gt; as the CLI global option for CIDER  &lt;code&gt;&amp;#40;&amp;#40;clojure-mode . &amp;#40;&amp;#40;cider-clojure-cli-global-options . &amp;quot;-A:test&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&lt;/code&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="adding&amp;#95;a&amp;#95;function&amp;#95;to&amp;#95;stop&amp;#95;the&amp;#95;server"&gt;Adding a function to stop the server&lt;/h2&gt;&lt;p&gt;We can start the server, but unless we have a reference to the server we cannot send it instructions to shut down.&lt;/p&gt;&lt;p&gt;A brutal way to stop the server is to simply quit the Clojure REPL, however, we can do better than that.&lt;/p&gt;&lt;h3 id="defining&amp;#95;a&amp;#95;reference&amp;#95;for&amp;#95;the&amp;#95;server."&gt;Defining a reference for the server.&lt;/h3&gt;&lt;p&gt;Using the &lt;code&gt;def&lt;/code&gt; function we can bind a name to the calling of the &lt;code&gt;create-server&lt;/code&gt; function.  Then we can use that name to send a timeout instruction and gracefully shut down the server.&lt;/p&gt;&lt;p&gt;Define a name for the server and keep that name private, so only functions in the current namespace can use that name.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defonce &amp;#94;:private api-server &amp;#40;create-server&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can use the &lt;code&gt;api-server&lt;/code&gt; name as a reference to the running server and send it commands.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;api-server :timeout 100&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a simple approach, although we can use a Clojure &lt;code&gt;atom&lt;/code&gt; instead.&lt;/p&gt;&lt;h3 id="define&amp;#95;a&amp;#95;binding&amp;#95;for&amp;#95;the&amp;#95;server&amp;#95;state"&gt;Define a binding for the server state&lt;/h3&gt;&lt;p&gt;Define a Clojure atom that will hold a name that is bound to the server invocation when we start it.&lt;/p&gt;&lt;p&gt;When the &lt;code&gt;api-server&lt;/code&gt; atom contains &lt;code&gt;nil&lt;/code&gt; it means no server is running.&lt;/p&gt;&lt;p&gt;When the server is started we reset the &lt;code&gt;api-server&lt;/code&gt; atom to contain a dynamic binding to the server.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;api-server&lt;/code&gt; atom can then be used to send a timeout to the running Jetty server process.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defonce &amp;#94;:private api-server &amp;#40;atom nil&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="stop&amp;#95;server&amp;#95;function"&gt;Stop server function&lt;/h3&gt;&lt;p&gt;The Jetty server can be gracefully shut down by passing &lt;code&gt;:timeout&lt;/code&gt; with a value in milliseconds.&lt;/p&gt;&lt;p&gt;The server will stop listening for new requests.&lt;/p&gt;&lt;p&gt;Existing requests will be processed and hopefully finish before the timeout expires.&lt;/p&gt;&lt;p&gt;Then the Jetty server process stops.&lt;/p&gt;&lt;p&gt;Then the atom containing the server binding is &lt;code&gt;reset!&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, updating the state of the server to stopped in the Clojure code.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn stop-server
  &amp;quot;Gracefully shutdown the server, waiting 100ms &amp;quot;
  &amp;#91;&amp;#93;
  &amp;#40;when-not &amp;#40;nil? @api-server&amp;#41;
    ;; graceful shutdown: wait 100ms for existing requests to be finished
    ;; :timeout is optional, when no timeout, stop immediately
    &amp;#40;@api-server :timeout 100&amp;#41;
    &amp;#40;reset! api-server nil&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An updated &lt;code&gt;-main&lt;/code&gt; function&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn -main &amp;#91;&amp;amp; args&amp;#93;
  ;; #' enables hot-reloading of the server
  &amp;#40;reset! api-server &amp;#40;server/run-server #'handler {:port &amp;#40;or &amp;#40;first args&amp;#41; 8080&amp;#41;}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="conditionally&amp;#95;using&amp;#95;a&amp;#95;port&amp;#95;number"&gt;Conditionally using a port number&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;-main&lt;/code&gt; function uses the &lt;code&gt;&amp;amp; args&lt;/code&gt; syntax for the argument.  This allows the &lt;code&gt;-main&lt;/code&gt; function to be called with or without passing a value for the port.&lt;/p&gt;&lt;p&gt;We can use the &lt;code&gt;or&lt;/code&gt; function to use a port number if it is passed as an argument.  If no port number is passed, then a default port number is used.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;&amp;#40;first args&amp;#41;&lt;/code&gt; is called when no argument is passed, then it is effectively same as &lt;code&gt;&amp;#40;first &amp;#91;&amp;#93;&amp;#41;&lt;/code&gt;.  When evaluaed this returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn oring &amp;#91;&amp;amp; args&amp;#93;
  &amp;#40;or &amp;#40;first args&amp;#41;
      8000&amp;#41;&amp;#41;

&amp;#40;oring&amp;#41;
;; =&amp;gt; 8000

&amp;#40;oring 8888&amp;#41;
;; =&amp;gt; 8888
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="conditional&amp;#95;arguments&amp;#95;for&amp;#95;server&amp;#95;configuration"&gt;Conditional arguments for server configuration&lt;/h3&gt;&lt;p&gt;Associative destructuring binds values from hash-maps to local symbols We can use default values if values are not passed as arguments &amp; makes all arguments optional the &lt;code&gt;:or&lt;/code&gt; map provides local symbols and their default values&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn optional-keys &amp;#91;&amp;amp; {:keys &amp;#91;port timeout&amp;#93;
                        :or   {port 8000 timeout 100} }&amp;#93;
  &amp;#40;str &amp;quot;Port: &amp;quot; port &amp;quot;, timeout &amp;quot; timeout &amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;call the function without arguments and the defaults are used&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;optional-keys&amp;#41;
;; =&amp;gt; &amp;quot;Port: 8000, timeout 100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;;; call with one argument, :port and 8888 are a single key-value pair, ;; the argument is used and the missing argument uses the default value.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;optional-keys :port 8888&amp;#41;
;; =&amp;gt; &amp;quot;Port: 8888, timeout 100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="use&amp;#95;associated&amp;#95;destructuring&amp;#95;for&amp;#95;multiple&amp;#95;arguments"&gt;Use associated destructuring for multiple arguments&lt;/h3&gt;&lt;p&gt;Using an &lt;code&gt;or&lt;/code&gt; statement within the function call to &lt;code&gt;run-server&lt;/code&gt; arguments is okay when you have a single argument.  However it gets quite complex if you have multiple arguments&lt;/p&gt;&lt;p&gt;Associate destructuring can be used with the arguments passed to the server, in the argument list of the function definition.&lt;/p&gt;&lt;p&gt;Our function definition uses &lt;code&gt;&amp;amp;&lt;/code&gt; in the argument list to take any number of arguments.&lt;/p&gt;&lt;p&gt;A single pair of &lt;code&gt;{}&lt;/code&gt; is used to pattern match on key values pairs at the top level.&lt;/p&gt;&lt;p&gt;&lt;code&gt;:keys &amp;#91;,,,&amp;#93;&lt;/code&gt; is used to to create local binding names from the matching keywords in the arguments passed.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;defn -main
  &amp;quot;Start a httpkit server with a specific port
  #' enables hot-reload of the handler function and anything that code calls&amp;quot;
  &amp;#91;&amp;amp; {:keys &amp;#91;ip port&amp;#93;
      :or   {ip   &amp;quot;0.0.0.0&amp;quot;
             port 8000}}&amp;#93;
  &amp;#40;println &amp;quot;INFO: Starting httpkit server on port:&amp;quot; port&amp;#41;
  &amp;#40;reset! api-server &amp;#40;server/run-server #'handler {:port port}&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; The Httpkit server function includes an example of using &lt;a href='https://github.com/http-kit/http-kit/blob/master/src/org/httpkit/server.clj#L84'&gt;associative destructuring in the stop-server function&lt;/a&gt; it returns and in the &lt;a href='https://github.com/http-kit/http-kit/blob/master/src/org/httpkit/server.clj#L34'&gt;server function argument list&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="starting&amp;#95;the&amp;#95;server"&gt;Starting the server&lt;/h3&gt;&lt;p&gt;Specify a specific port when starting the server&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;-main :port 8888&amp;#41;
;; =&amp;gt; &amp;quot;Port: 8888, timeout 100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Or simply start the server on the default port using &lt;code&gt;&amp;#40;-main&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;h3 id="stopping&amp;#95;the&amp;#95;server"&gt;Stopping the server&lt;/h3&gt;&lt;p&gt;Stopping the server is easy, just call the &lt;code&gt;stop-server&lt;/code&gt; functions witout arguments.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;stop-server&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The start and stop will look something like this.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/spacemacs-cider-repl-httpkit-server-start-stop.png" alt="Spacemacs - CIDER REPL - httpkit server start and stop" /&gt;&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;This should demonstrate how relatively simple it is to create a web server in Clojure that can handle 600,00 concurrent requests.&lt;/p&gt;&lt;p&gt;This simple project can be extended to make the web server respond to different requests, based on the web address and type of the HTTP request (e.g. GET, POST).  As more features are added, tests should be written to ensure those features work correctly.&lt;/p&gt;&lt;p&gt;Adding specifications is a clean way to ensure a robust API service, checking the type of information being sent and received is of the correct form. &lt;code&gt;clojure.alpha.spec&lt;/code&gt; and &lt;code&gt;pulmatic/schema&lt;/code&gt; are two libraries that will provide this kind of checking.&lt;/p&gt;</description><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/streamline-contributions-with-github-pull-request-templates/</guid><link>http://practical.li/test-blog/posts/streamline-contributions-with-github-pull-request-templates/</link><title>Streamline Contributions with GitHub Pull Request Templates</title><description>&lt;p&gt;Pull requests are very valuable to project maintainers, especially if they follow guidelines for the project.  Using a pull request template allows project maintainers to define the most effective way to contribute right inside the contribution projects.&lt;/p&gt;&lt;p&gt;Project maintainers, especially on very active projects, rarely have time to spend on triage of pull requests.  Generally the simpler a pull request the easier it is for a maintainer to review it and accept it.&lt;/p&gt;&lt;p&gt;Previously we created GitHub issue templates, for which their can be many.  one pull request template as all pull requests are the same type.&lt;/p&gt;&lt;p&gt;We will discuss what to include in these pull request templates and use GitHub as an example of how to create them.&lt;/p&gt;&lt;h2 id="what&amp;#95;to&amp;#95;put&amp;#95;in&amp;#95;a&amp;#95;pull&amp;#95;request&amp;#95;template"&gt;What to put in a pull request template&lt;/h2&gt;&lt;p&gt;Guidelines that are important to you as a maintainer should go in the template, especially on open source projects where you have a very diverse audience.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;coding style and formatting rules the project follows&lt;/li&gt;&lt;li&gt;license used for contributions&lt;/li&gt;&lt;li&gt;the pull request review process (or link to it)&lt;/li&gt;&lt;li&gt;the scale of changes preferred (usually very small and specific)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Define specific content that any pull request should include to make it worth reviewing&lt;/p&gt;&lt;ul&gt;&lt;li&gt;referring to one or more related issues&lt;/li&gt;&lt;li&gt;a meaningful description of the proposed change the pull request proposes&lt;/li&gt;&lt;li&gt;a single commit&lt;/li&gt;&lt;li&gt;mention a specific GitHub user using the &lt;code&gt;@&lt;/code&gt; character followed by the users name&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Look at the examples towards the end of this article for inspiration.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Mentioning different maintainers when you have multiple pull request templates can help deligate work automatically and reduce the amount of triage to be done on a pull request. &lt;/p&gt;&lt;p&gt; Even with a single pull request template, you may wish to have yourself mentioned to receive a notification for each pull request. &lt;/p&gt;&lt;p&gt; Automation of mentions (and other metadata) is done &lt;a href='https://help.github.com/en/github/managing-your-work-on-github/about-automation-for-issues-and-pull-requests-with-query-parameters'&gt;using query parameters with issues and pull requests&lt;/a&gt;. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="single&amp;#95;or&amp;#95;multiple&amp;#95;pull&amp;#95;request&amp;#95;templates"&gt;Single or multiple pull request templates&lt;/h2&gt;&lt;p&gt;GitHub defines &lt;a href='https://help.github.com/en/github/building-a-strong-community/creating-a-pull-request-template-for-your-repository'&gt;several locations where you can add a pull request template&lt;/a&gt;, in the root of the project, in &lt;code&gt;/docs&lt;/code&gt; or in the hidden directory &lt;code&gt;.github&lt;/code&gt;.  GitHub will look in each of these locations for a template.&lt;/p&gt;&lt;p&gt;I recommend using &lt;code&gt;.github&lt;/code&gt; as the base location for your templates as this is where the GitHub template editor saves &lt;a href='improving-communication-with-github-issue-templates.md'&gt;issue templates&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;.github/pull&amp;#95;request&amp;#95;template.md&lt;/code&gt; - for a single pull request template&lt;/li&gt;&lt;li&gt;&lt;code&gt;.github/PULL&amp;#95;REQUEST&amp;#95;TEMPLATE/one&amp;#95;of&amp;#95;many&amp;#95;template.md&lt;/code&gt; - for multiple templates, each with a unique name.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="add&amp;#95;template&amp;#95;to&amp;#95;local&amp;#95;project"&gt;Add template to local project&lt;/h2&gt;&lt;p&gt;Create a template file in your favourite editor and save it to &lt;code&gt;.github/pull&amp;#95;request&amp;#95;template.md&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Commit this file into your local repository, to the default branch set in GitHub.  You must use the default GitHub branch or the template will not be visible.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-repository-default-branch.png" alt="GitHub templates - repository default branch" /&gt;&lt;/p&gt;&lt;h2 id="add&amp;#95;a&amp;#95;template&amp;#95;using&amp;#95;github"&gt;Add a template using GitHub&lt;/h2&gt;&lt;p&gt;Unlike issue templates, there is no specific editor for pull request templates (at time of writing), so just use the generic &lt;strong&gt;Create new file&lt;/strong&gt; editor.&lt;/p&gt;&lt;p&gt;Select &lt;strong&gt;Create new file&lt;/strong&gt; button to open a file editor.&lt;/p&gt;&lt;p&gt;Update the file name to &lt;code&gt;.github/pull&amp;#95;request&amp;#95;template.md&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-pull-request-edit-new-file.png" alt="GitHub templates - pull request - edit new file" /&gt;&lt;/p&gt;&lt;p&gt;Add the information you wish to add to the pull request template and commit the file.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-pull-request-new-file-commit.png" alt="GitHub templates - pull request - edit new file" /&gt;&lt;/p&gt;&lt;p&gt;entering a commit message and click the &lt;strong&gt;Commit new file&lt;/strong&gt; button to add the template to the repository.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-create-new-file-commit.png" alt="GitHub templates - commit new template" /&gt;&lt;/p&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;pull&amp;#95;request&amp;#95;with&amp;#95;a&amp;#95;template"&gt;Creating a pull request with a template&lt;/h2&gt;&lt;p&gt;Every time a new pull request is created, the default template is shown.&lt;/p&gt;&lt;p&gt;The issue has the article label and the text of the template, making it simple for a contributor to add information that helps the project maintainer.&lt;/p&gt;&lt;p&gt;![GitHub templates - new issue with article template - edit](/images/github-templates-new-issue-article-template-edit.png**&lt;/p&gt;&lt;p&gt;A contributor can always choose a different type of issue template before submitting the issue.&lt;/p&gt;&lt;h2 id="example&amp;#95;pull&amp;#95;request&amp;#95;templates"&gt;Example Pull Request templates&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Clojure Website&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The Clojure website repository has quite a simple template, reminding you of just a few essentials&lt;/p&gt;&lt;pre&gt;&lt;code class="markdown"&gt;&lt;ul&gt;&lt;li&gt;&amp;#91; x&amp;#93; Have you read the &amp;#91;guidelines for contributing&amp;#93;&amp;#40;https://clojure.org/community/contributing&amp;#95;site&amp;#41;?- &amp;#91; x&amp;#93; Have you signed the Clojure Contributor Agreement?
- &amp;#91; x&amp;#93; Have you verified your asciidoc markup is correct?
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Practicalli&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The &lt;a href='https://github.com/practicalli/blog-content/blob/master/.github/pull_request_template.md'&gt;pull request template used by Practicalli&lt;/a&gt; is quite detailed and encourages very specific pull requests, so I minimise time doing triage on those pull requests (as I prefer to just create content).&lt;/p&gt;&lt;pre&gt;&lt;code class="markdown"&gt;Please follow these guidelines when submitting a pull request

&lt;ul&gt;&lt;li&gt;refer to all relevant issues, using `#` followed by the issue number &amp;#40;or paste full link to the issue&amp;#41;- PR should contain the smallest possible change
- PR should contain a very specific change
- PR should contain only a single commit &amp;#40;squash your commits locally if required&amp;#41;
- Avoid multiple changes across multiple files &amp;#40;raise an issue so we can discuss&amp;#41;
- Avoid a long list of spelling or grammar corrections.  These take too long to review and cherry pick.

&lt;/li&gt;&lt;/ul&gt;
## Submitting articles
&amp;#91;Create an issue using the article template&amp;#93;&amp;#40;https://github.com/practicalli/blog-content/issues/new?assignees=&amp;amp;labels=article&amp;amp;template=article.md&amp;amp;title=Suggested+article+title&amp;#41;,
providing as much detail as possible.

## Website design
Suggestions about website design changes are most welcome, especially in terms of usability and accessibility.

Please raise an issue so we can discuss changes first, especially changes related to aesthetics.


## Review process
All pull requests are reviewed by @jr0cket and feedback provided, usually the same day but please be patient.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Adding Issue templates is really easy and saves a lot of time getting the basics of communication established between contributors and project maintainers.&lt;/p&gt;&lt;p&gt;Templates minimise the amount of work a project maintainer has to do for each issue and also supports contributors involvement be much more efficient.&lt;/p&gt;</description><pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/improving-communication-with-github-issue-templates/</guid><link>http://practical.li/test-blog/posts/improving-communication-with-github-issue-templates/</link><title>Improving communication with GitHub issue templates</title><description>&lt;p&gt;Create templates for issues and pull requests can greatly improve feedback and contributions, especially as an open source project maintainer.  We will look specifically at issue templates.&lt;/p&gt;&lt;p&gt;Templates can ask people to provide specific information, or request use of a tool for generating system information (e.g. Spacemacs).  Automatic assignment and labelling saves time on issue triage by the project maintainers.&lt;/p&gt;&lt;p&gt;Templates can be created for most shared Git repository services, i.e GitHub, GitLab, BitBucket, etc.&lt;/p&gt;&lt;p&gt;We will discuss what to include in these templates and use GitHub as an example of how to create and edit issue templates.&lt;/p&gt;&lt;h2 id="creating&amp;#95;an&amp;#95;issue&amp;#95;template"&gt;Creating an issue template&lt;/h2&gt;&lt;p&gt;In your GitHub project, open the &lt;strong&gt;Settings&lt;/strong&gt; tab and scroll down to the &lt;strong&gt;features&lt;/strong&gt; section.&lt;/p&gt;&lt;p&gt;Ensure &lt;strong&gt;Issues&lt;/strong&gt; is selected and click on the &lt;strong&gt;Set up templates&lt;/strong&gt; button&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-settings-features-templates.png" alt="GitHub features - templates setup" /&gt;&lt;/p&gt;&lt;p&gt;Select an existing template to change it or select &lt;strong&gt;Custom template&lt;/strong&gt; to create a new blank template.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-select-template.png" alt="GitHub templates - select template" /&gt;&lt;/p&gt;&lt;h2 id="changing&amp;#95;an&amp;#95;existing&amp;#95;template"&gt;Changing an existing template&lt;/h2&gt;&lt;p&gt;You can change everything about an existing template, even the name.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-bug-report-edit.png" alt="GitHub templates - edit issue bug report" /&gt;&lt;/p&gt;&lt;p&gt;Click the pencil icon to edit the template and change as much as you wish.&lt;/p&gt;&lt;p&gt;Click &lt;strong&gt;Close preview&lt;/strong&gt; to finish editing.&lt;/p&gt;&lt;p&gt;The filename will be renamed to the &lt;strong&gt;Template name&lt;/strong&gt; of the issue template once you save&lt;/p&gt;&lt;p&gt;Here is an example of changing the bug to an article template.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-article-edit.png" alt="GitHub template - article edit" /&gt;&lt;/p&gt;&lt;h2 id="saving&amp;#95;the&amp;#95;template"&gt;Saving the template&lt;/h2&gt;&lt;p&gt;Click the &lt;strong&gt;Propose changes&lt;/strong&gt; button to make the change permanent, entering a commit message and committing changes.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-propose-changes.png" alt="GitHub templates - propose change" /&gt;&lt;/p&gt;&lt;p&gt;Once you commit a template it can be found in the directory &lt;strong&gt;.github/ISSUE_TEMPLATE/&lt;/strong&gt; directory.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-committed-template.png" alt="GitHub templates - committed templates" /&gt;&lt;/p&gt;&lt;h2 id="creating&amp;#95;an&amp;#95;issue&amp;#95;with&amp;#95;a&amp;#95;template"&gt;Creating an issue with a template&lt;/h2&gt;&lt;p&gt;Click the &lt;strong&gt;New issue&lt;/strong&gt; button to choose a template for a new issue.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-new-issue.png" alt="GitHub templates - new issue with template" /&gt;&lt;/p&gt;&lt;p&gt;All the available templates are now listed when creating a new issue.  There is also a link to &lt;strong&gt;Edit teamplates&lt;/strong&gt; if you have access rights on the repository.&lt;/p&gt;&lt;p&gt;There is also a link to create a blank issue.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-new-issue-article-template.png" alt="GitHub templates - new issue with article template" /&gt;&lt;/p&gt;&lt;p&gt;The issue has the article label and the text of the template, making it simple for a contributor to add information that helps the project maintainer.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/github-templates-new-issue-article-template-edit.png" alt="GitHub templates - new issue with article template - edit" /&gt;&lt;/p&gt;&lt;p&gt;A contributor can always choose a different type of issue template before submitting the issue.&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Adding Issue templates is really easy and saves a lot of time getting the basics of communication established between contributors and project maintainers.&lt;/p&gt;&lt;p&gt;Templates minimise the amount of work a project maintainer has to do for each issue and also supports contributors involvement be much more efficient.&lt;/p&gt;</description><pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/clojure-powered-blogging-with-cryogen/</guid><link>http://practical.li/test-blog/posts/clojure-powered-blogging-with-cryogen/</link><title>Clojure powered blogging with Cryogen</title><description>&lt;p&gt;A website for blogging doesn't need to be a complex content management system, a simple and lightweight static website generator can create engaging websites that are easy to manage with Git.&lt;/p&gt;&lt;p&gt;Cryogen is a static site generator written in Clojure, allowing content to be written in either markdown or asciidoc.  Posts and pages are configured with Clojure hash-maps to manage the meta-data and layout information for each, including .&lt;/p&gt;&lt;p&gt;Cryogen seems very quick to generate a site and a local server can be run to automatically generate an updated website when changes to posts and pages are saved.&lt;/p&gt;&lt;p&gt;All that is required is a Java virtual Machine (eg. &lt;a href='https://adoptopenjdk.net/'&gt;AdoptOpenJDK&lt;/a&gt;) and the &lt;a href='https://leiningen.org/'&gt;Leiningen build tool&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/practicalli/blog-content/blob/master/content/config.edn'&gt;practicalli/blog-content&lt;/a&gt; contains all the content and configuration used to create the Practicalli blog website.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;Limitation/bug&lt;/strong&gt; so far I have not been able to generate tables in markdown posts.  This may be an issue with &lt;a href='https://github.com/cryogen-project/cryogen-markdown'&gt;cryogen-markdown library&lt;/a&gt;, no results from searching at present &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="create&amp;#95;a&amp;#95;new&amp;#95;site"&gt;Create a new site&lt;/h2&gt;&lt;p&gt;Use the &lt;code&gt;cryogen&lt;/code&gt; template for Leiningen to create a new project&lt;/p&gt;&lt;p&gt;Here we create a project called &lt;code&gt;practicalli-blog&lt;/code&gt; using the template&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen practicalli-blog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change into the project directory and use Leiningen to run the project&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A server will now start and generate the sample posts that are part of the Leiningen template.  Your default web browser will automatically open a new page at &lt;code&gt;http://localhost:3000/blog&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Changing any files in the project will trigger a new compilation of the website.  You will need to manually refresh the browser page if you kept it open. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="configure&amp;#95;the&amp;#95;site"&gt;Configure the site&lt;/h2&gt;&lt;p&gt;The configuration defines the site title (banner heading), author (copyright message), description (not sure where this is used).&lt;/p&gt;&lt;p&gt;&lt;code&gt;content/config.edn&lt;/code&gt; is the configuration file for the generated site&lt;/p&gt;&lt;pre&gt;&lt;code&gt; :site-title           &amp;quot;Practicalli&amp;quot;
 :author               &amp;quot;Practicalli&amp;quot;
 :description          &amp;quot;Discovering the fun in Functional Programming with Clojure&amp;quot;
 :site-url             &amp;quot;http://practical.li/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="enable&amp;#95;live&amp;#95;evaluation&amp;#95;with&amp;#95;klipse"&gt;Enable live evaluation with Klipse&lt;/h3&gt;&lt;p&gt;Make your sample code executable and interactive to the user by enabling Klipse in Cryogen. Klipse provides live evaluation for a number of programming language.&lt;/p&gt;&lt;p&gt;Enable Klipse by defining a specific CSS selector and use that name when defining a code block, e.g. ```klipse-clj```&lt;/p&gt;&lt;pre&gt;&lt;code&gt; :klipse               {:settings {:selector         &amp;quot;.klipse-clj&amp;quot;
                                   :selector-reagent &amp;quot;.klipse-reagent&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; Example &lt;a href='https://github.com/practicalli/blog-content/blob/master/content/config.edn'&gt;config.edn file&lt;/a&gt; from the practicalli/blog-content GitHub repository &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="version&amp;#95;control"&gt;Version control&lt;/h2&gt;&lt;p&gt;A &lt;code&gt;.gitignore&lt;/code&gt; file is created when using the cryogen Leiningen template to create a project.&lt;/p&gt;&lt;p&gt;This contains the &lt;code&gt;/public/&lt;/code&gt; pattern to exclude the generated website, as well as the common patterns for a Leiningen project.&lt;/p&gt;&lt;p&gt;A separate git repository is used to deploy the website (to GitHub pages).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pom.xml
pom.xml.asc
&amp;#42;jar
/lib/
/classes/
/target/
/checkouts/
.lein-deps-sum
.lein-repl-history
.lein-plugins/
.lein-failures
/public/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="writing&amp;#95;posts"&gt;Writing posts&lt;/h2&gt;&lt;p&gt;Posts can be written in either markdown or asciidoc.  Markdown is the default and all posts should be placed inthe &lt;code&gt;content/md/&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;The filename can be prefixed with the date of the post, however, I find it more flexible to specify the date in the post metadata header as if you change the date then the URL of the post will remain the same.  This is really handy if you need to update the post and need to reflect that in the date, or if you had planned to publish the post a few weeks in the future and then realise its ready sooner.&lt;/p&gt;&lt;h3 id="post&amp;#95;header&amp;#95;-&amp;#95;metadata"&gt;Post header - metadata&lt;/h3&gt;&lt;p&gt;The start of each post is a Clojure hash-map, &lt;code&gt;{}&lt;/code&gt; containing metadata for the specfic blog&lt;/p&gt;&lt;p&gt;&lt;code&gt;:title&lt;/code&gt; and &lt;code&gt;:layout&lt;/code&gt; are mandatory keys, the rest are optional.  You can also define your own custom keys which can be used in the selma templates, for example &lt;code&gt;:topic&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:title&lt;/code&gt;   The &lt;code&gt;h1&lt;/code&gt; title used for the blog post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:layout&lt;/code&gt;  A keyword corresponding to an HTML file under themes/{theme}/html.&lt;/li&gt;&lt;li&gt;&lt;code&gt;:date&lt;/code&gt;    The published date of the blog  (future blogs can be hidden)&lt;/li&gt;&lt;li&gt;&lt;code&gt;:author&lt;/code&gt;  The name of the post author as a string, displayed at the top of the post in the default theme.&lt;/li&gt;&lt;li&gt;&lt;code&gt;:tags&lt;/code&gt;    Tags associated with the blog, as a vector of strings e.g. ["clojure" "cryogen"]&lt;/li&gt;&lt;li&gt;&lt;code&gt;:klipse&lt;/code&gt;  Enable live evaluation of code in the post (see live evaluation with Klipse)&lt;/li&gt;&lt;li&gt;&lt;code&gt;:toc&lt;/code&gt;     Include a table of contents at the top of the page, with links to all the headings in the post&lt;/li&gt;&lt;li&gt;&lt;code&gt;:draft?&lt;/code&gt;  &lt;code&gt;true&lt;/code&gt; will skip this post from the static site generation&lt;/li&gt;&lt;li&gt;&lt;code&gt;:topic&lt;/code&gt;   A custom key I use to manage a topic image displayed on each post (theme development will be covered in a future post)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="deploying&amp;#95;the&amp;#95;site&amp;#95;to&amp;#95;github&amp;#95;pages"&gt;Deploying the site to GitHub pages&lt;/h2&gt;&lt;p&gt;GitHub pages is a free static site hosting service and we can deploy the cryogen website by a git push.&lt;/p&gt;&lt;p&gt;Create a repository in either a user account or GitHub organisation (eg. using the GitHub website).&lt;/p&gt;&lt;p&gt;An unsophisticated script is used to deploy the generated website.  The script creates a Git repository in the &lt;code&gt;public&lt;/code&gt; directory, all files are committed with a generic message, a remote repository added and the content pushed.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd public/blog &amp;amp;&amp;amp; rm -rf .git &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;initial commit&amp;quot; &amp;amp;&amp;amp; git branch -m master gh-pages &amp;amp;&amp;amp; git remote add practicalli git@github.com:practicalli/blog.git &amp;amp;&amp;amp; git push -f practicalli gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Edit the &lt;code&gt;deploy-to-gh-pages&lt;/code&gt; script and update the URL of the GitHub repository created to host the website.&lt;/p&gt;&lt;p&gt;If the website is not displayed, check the GitHub repository settings and ensure the &lt;code&gt;gh-pages&lt;/code&gt; is set.&lt;/p&gt;&lt;p&gt;&lt;a href='/test-blog/images/github-settings-github-pages-gh-pages-branch.png'&gt;GitHub repository settings - GitHub pages gh-branch selected&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Practicalli recommends using two repositories, one for the cryogen project and another for the generated website. &lt;/p&gt;&lt;p&gt; If you are creating a website for a software project or library, then it may be useful to generate the cryogen website the &lt;code&gt;docs&lt;/code&gt; directory and set that as the GitHub pages source. &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="prevent&amp;#95;github&amp;#95;pages&amp;#95;jekyll&amp;#95;compilation"&gt;Prevent GitHub pages Jekyll compilation&lt;/h3&gt;&lt;p&gt;A Jekyll process runs every time a change is pushed to a GitHub pages branch.  As Cryogen generates the finished website Jekyll processing is not required and it can be switch it off.&lt;/p&gt;&lt;p&gt;Add an empty file called &lt;code&gt;.nojekyll&lt;/code&gt; to the &lt;code&gt;content&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;Edit the &lt;code&gt;config.edn&lt;/code&gt; configuration file and add the &lt;code&gt;.nojekyll&lt;/code&gt; file to the resources.  This ensures the &lt;code&gt;.nojekyll&lt;/code&gt; file is copied over to the generated website in the &lt;code&gt;public&lt;/code&gt; directory.&lt;/p&gt;&lt;pre&gt;&lt;code&gt; :resources            &amp;#91;&amp;quot;images&amp;quot; &amp;quot;.nojekyll&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;</description><pubDate>Sun, 20 Oct 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/journey-to-the-edge-of-clojure/</guid><link>http://practical.li/test-blog/posts/journey-to-the-edge-of-clojure/</link><title>journey to the edge of clojure</title><description>&lt;p&gt;&lt;i&gt;This article is a work in progress&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Clojure CLI tools is a relatively new approach to creating an managing projects.  The &lt;a href='https://juxt.pro/edge/'&gt;Edge project&lt;/a&gt; from JUXT takes the approach and extends it with its own features, such as being able to update projects created from the edge configuration.&lt;/p&gt;&lt;p&gt;Unlike Leiningen and Boot templates which are one of tasks, you can update a project you created a while ago with Edge and bring it up to date.  It will be interesting to try this out in future articles.&lt;/p&gt;&lt;p&gt;Please see earlier articles in this series for background:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/gaining-confidence-with-Clojure-CLI-tools.html'&gt;Experimenting With Clojure CLI Tools Options&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/a-deeper-understanding-of-Clojure-CLI-tools.html'&gt;A Deeper Understanding of Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;Getting Started With Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="installing&amp;#95;juxt&amp;#95;edge"&gt;Installing JUXT Edge&lt;/h2&gt;&lt;p&gt;You will need Clojure CLI tools installed to use Edge, so visit the &lt;a href='https://clojure.org/guides/getting_started'&gt;Clojure.org - Getting Started page&lt;/a&gt;, or take a look at my article &lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;Getting Started With Clojure CLI Tools&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Edge also has &lt;a href='https://juxt.pro/edge/docs/editor.html'&gt;editor setup guides for Clojure&lt;/a&gt; for Atom, Emacs, Spacemacs, Intellij (Cursive), Vim and VS Code with Calva.  There does not seem to be anything specific to Edge here though, so assume it doesnt require anything to be configured.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Using Emacs or Spacemacs, you may need to specify one or more aliases to use with Edge, so see my article on &lt;a href='http://jr0cket.co.uk/2019/07/CIDER-jack-in-to-Clojure-CLI-projects-from-Spacemacs.html'&gt;CIDER jack-in to Clojure CLI projects from Spacemacs&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You also need to have a Git client installed.&lt;/p&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;project&amp;#95;with&amp;#95;edge"&gt;Creating a project with Edge&lt;/h2&gt;&lt;p&gt;If you are starting a new project, then you can simply create a local Git repository and add Edge as a remote repository and pull&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;mkdir my-project

cd my-project

git init

git remote add edge https://github.com/juxt/edge.git

git pull --allow-unrelated-histories --no-rebase edge master
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="adding&amp;#95;edge&amp;#95;to&amp;#95;an&amp;#95;existing&amp;#95;project"&gt;Adding Edge to an existing project&lt;/h2&gt;&lt;p&gt;A big difference to Boot and Leiningen templates is you can take an existing project and add Edge to it.  So you can either clone a project or create a new project with &lt;code&gt;clj-new&lt;/code&gt; if you have that installed.&lt;/p&gt;&lt;p&gt;Then just add Edge as a remote repository and pull.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;git remote add edge https://github.com/juxt/edge.git

git pull --allow-unrelated-histories --no-rebase edge master
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; It will be interesting to try this approach out on older projects.  I assume the project has to have a deps.edn file already (something interesting to test). &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="creating&amp;#95;a&amp;#95;new&amp;#95;app"&gt;Creating a new app&lt;/h2&gt;&lt;p&gt;Although we have added Edge to our new project, we dont yet have an app.  There are examples you can run, but you probably want to create your own app rather than unpicking an existing one (also if the example updates, I am not sure what that would do to your changes).&lt;/p&gt;&lt;p&gt;Lets start with creating a simple Clojure api for our study group.&lt;/p&gt;&lt;p&gt;In the root of the project run the &lt;code&gt;./bin/app&lt;/code&gt; command and give it the name of your project.  You need to specify a namespace with the overall domain (your company or GitHub account for example) and the project name.  I am using &lt;code&gt;practicalli&lt;/code&gt; as the domain namespace and &lt;code&gt;study-guide-api&lt;/code&gt; as the project namespace.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;./bin/app practicalli/study-guide-api
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see output telling you the a new app has been created using the &lt;code&gt;edge.app-template&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-juxt-edge-new-app-output.png" alt="Clojure CLI - JUXT Edge - New app output" /&gt;&lt;/p&gt;&lt;p&gt;A new directory has been created using the domain and project namespace names you provided.  In our example, &lt;code&gt;practicalli.study-guide-api&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-juxt-edge-new-app-tree.png" alt="Clojure CLI - JUXT Edge - New app output" /&gt;&lt;/p&gt;&lt;h2 id="starting&amp;#95;the&amp;#95;repl"&gt;Starting the REPL&lt;/h2&gt;&lt;p&gt;As we are using a Clojure project, we can start a REPL using by just including the &lt;code&gt;:dev&lt;/code&gt; alias when we run Clojure on the command line.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:dev
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; Take a look at the &lt;code&gt;deps.edn&lt;/code&gt; file inside &lt;code&gt;practicalli.study-group-api&lt;/code&gt; directory for more options, especially if you create a ClojureScript or SASS project. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The project will download a noticable number of dependencies at this point, so time for a quick cup of peppermint tea...&lt;/p&gt;&lt;p&gt;Once the dependencies are downloaded you should see the standard &lt;code&gt;clojure&lt;/code&gt; REPL.&lt;/p&gt;&lt;p&gt;I had expected rebel readline instead, but this is available when running the relevant Edge scripts, &lt;code&gt;/bin/rebel&lt;/code&gt;.  Keep in the &lt;code&gt;practicalli.study-guide-api&lt;/code&gt; directory root and call the rebel script with the &lt;code&gt;:dev&lt;/code&gt; alias.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;../bin/rebel -A:dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There will be just a few more dependencies to download, so this should be quick.  You should see the rebel readline prompt as well as a message to call the &lt;code&gt;&amp;#40;go&amp;#41;&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-juxt-edge-new-app-repl-rebel.png" alt="Clojure CLI - JUXT Edge - New app output" /&gt;&lt;/p&gt;&lt;p&gt;At the REPL prompt, type &lt;code&gt;&amp;#40;go&amp;#41;&lt;/code&gt; to start the system for the application.  This is a common approach for applications that have some component system to start/stop/reload your application or individual components of your application.&lt;/p&gt;&lt;p&gt;Open your browser at localhost:3636 to see the default project.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-juxt-edge-new-app-website-hello.png" alt="Clojure CLI - JUXT Edge - New app output" /&gt;&lt;/p&gt;&lt;p&gt;If you make any changes to the code you can reload them by calling &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; in the REPL.&lt;/p&gt;&lt;h2 id="adding&amp;#95;a&amp;#95;component&amp;#95;and&amp;#95;route"&gt;Adding a component and route&lt;/h2&gt;&lt;p&gt;Samples taken from https://juxt.pro/edge/docs/first-component.html&lt;/p&gt;&lt;p&gt;Add a yada resource - its just a Clojure function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;a href='https://github.com/juxt/yada'&gt;yada&lt;/a&gt; is a web library for Clojure, designed to support the creation of production services via HTTP. &lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;def hello-language
 &amp;#40;yada/resource
  {:methods
   {:get
    {:produces
     {:media-type &amp;quot;text/plain&amp;quot;
      :language #{&amp;quot;en&amp;quot; &amp;quot;zh-ch;q=0.9&amp;quot;}}
     :response
     #&amp;#40;case &amp;#40;yada/language %&amp;#41;
        &amp;quot;zh-ch&amp;quot; &amp;quot;你好世界\n&amp;quot;
        &amp;quot;en&amp;quot; &amp;quot;Life on the Edge&amp;quot;&amp;#41;}}}&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we create a component for the yada resource for the web router to depend on.&lt;/p&gt;&lt;p&gt;To do this, we use defmethod on ig/init-key.&lt;/p&gt;&lt;p&gt;(defmethod ig/init-key   ::hello-language   [&lt;i&gt; &lt;/i&gt;]   hello-language)&lt;/p&gt;&lt;p&gt;The &lt;code&gt;ig/init-key&lt;/code&gt; takes two arguments but we are not going to use them, so we can use the &lt;code&gt;&amp;#95;&lt;/code&gt; to provide an argument so the defmethod is valid but not use the argument values.&lt;/p&gt;&lt;p&gt;now update our system to include our new component. Open "src/config.edn" in your editor. Within the :ig/system map, add a key &lt;code&gt;:practicalli.study-group-api.core/hello-language nil&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Here is a brief explanation of the Integrant configuration file, &lt;code&gt;config.edn&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:ig/system

 {
  ;; component resources
  :practicalli.study-group-api.core/hello-language nil
  :practicalli.study-group-api.core/string         &amp;quot;Hello, study-group-api!&amp;quot;

  ;; Integrant configuration for yada web listener
  :edge.yada.ig/listener
  {:handler #ig/ref :edge.bidi.ig/vhost
   :port    3636}

  ;; Integrant
  :edge.bidi.ig/vhost
  &amp;#91;&amp;#91;&amp;quot;http://localhost:3636&amp;quot;

    ;; routes
    &amp;#91;&amp;quot;&amp;quot;
     &amp;#91;&amp;#91;&amp;quot;/&amp;quot; #ig/ref :practicalli.study-group-api.core/string&amp;#93;
      &amp;#91;&amp;quot;/hello&amp;quot; #ig/ref :practicalli.study-group-api.core/hello-language&amp;#93;&amp;#93;&amp;#93;&amp;#93;&amp;#93;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now back to the REPL and call &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; to stop the app, load in the new resource and start again.&lt;/p&gt;&lt;h2 id="unboxing&amp;#95;edge"&gt;Unboxing Edge&lt;/h2&gt;&lt;p&gt;Pulling edge into master will add a number of files&lt;/p&gt;&lt;h3 id=".gitignore"&gt;.gitignore&lt;/h3&gt;&lt;p&gt;This contains patterns specific to the libraries this project uses, such at the &lt;code&gt;.cpcache&lt;/code&gt; used by Clojure CLI tools and the &lt;code&gt;.rebel&amp;#95;readline&amp;#95;history&lt;/code&gt; to keep a history of commands entered when running rebel readline based REPL.&lt;/p&gt;&lt;pre&gt;&lt;code class="text"&gt;&amp;#42;&amp;#42;/.cpcache
&amp;#42;&amp;#42;/.rebel&amp;#95;readline&amp;#95;history
&amp;#42;&amp;#42;/.nrepl-port
&amp;#42;&amp;#42;/target/&amp;#42;/&amp;#42;&amp;#42;
&amp;#42;&amp;#42;/log/&amp;#42;
!&amp;#42;&amp;#42;/target/&amp;#42;/.gitkeep

# pack'd output
/&amp;#42;.jar
&amp;#42;&amp;#42;/&amp;#42;.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are 4 years worth of commits added, so if you wanted to see how Edge has evolved then fire up your favourite git client&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-juxt-edge-first-commit.png" alt="Clojure CLI - JUXT Edge - First Committ" /&gt;&lt;/p&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/jr0cket'&gt;@jr0cket&lt;/a&gt;&lt;/p&gt;</description><pubDate>Fri, 09 Aug 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/community-tools-for-clojure-cli/</guid><link>http://practical.li/test-blog/posts/community-tools-for-clojure-cli/</link><title>Community projects for Clojure CLI tools</title><description>&lt;p&gt;There are a number of tools from the Clojure community which add build tool features to the Clojure CLI tools.  This enables developers to have a very lightweight and customisable set of tools that just do what they need.&lt;/p&gt;&lt;p&gt;This article just covers the very basics of each tool, see each projects documentation to get the full benefit of each tool.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/Olical/depot'&gt;depot&lt;/a&gt; finds newer versions of libraries (from Clojars and Git repositories)&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/lambdaisland/kaocha'&gt;kaocha&lt;/a&gt; full featured next gen Clojure test runner&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/seancorfield/depstar'&gt;depstar&lt;/a&gt; to package up your application for the JVM platform&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Please see earlier articles in this series for background:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/gaining-confidence-with-Clojure-CLI-tools.html'&gt;Experimenting With Clojure CLI Tools Options&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/a-deeper-understanding-of-Clojure-CLI-tools.html'&gt;A Deeper Understanding of Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;Getting Started With Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="&lt;a href='https://github.com/Olical/depot'&gt;depot&lt;/a&gt;&amp;#95;-&amp;#95;find&amp;#95;new&amp;#95;library&amp;#95;versions"&gt;&lt;a href='https://github.com/Olical/depot'&gt;depot&lt;/a&gt; - find new library versions&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/Olical/depot'&gt;depot&lt;/a&gt; will look for newer versions of the maven (clojars, maven central) and git dependencies in the project &lt;code&gt;deps.edn&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;Install depot by adding an alias to the project &lt;code&gt;deps.edn&lt;/code&gt; file or &lt;code&gt;$HOME/.clojure/deps.edn&lt;/code&gt; file&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:outdated {:extra-deps
            {olical/depot {:mvn/version &amp;quot;1.8.4&amp;quot;}}
           :main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;depot.outdated.main&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To automatically update the dependency, add the &lt;code&gt;--update&lt;/code&gt; option&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:depot {:extra-deps
            {olical/depot {:mvn/version &amp;quot;1.8.4&amp;quot;}}
:outdated {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;depot.outdated.main&amp;quot;&amp;#93;}
:outdated-update {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;depot.outdated.main&amp;quot; &amp;quot;--version&amp;quot;&amp;#93;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Show the outdated dependencies with &lt;code&gt;clojure -A:depot:outdated&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Automatically update the dependencies with &lt;code&gt;clojure -A:depot:outdated-update&lt;/code&gt;&lt;/p&gt;&lt;h2 id="&lt;a href='https://github.com/lambdaisland/kaocha'&gt;koacha&lt;/a&gt;&amp;#95;test&amp;#95;runner"&gt;&lt;a href='https://github.com/lambdaisland/kaocha'&gt;koacha&lt;/a&gt; test runner&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/lambdaisland/kaocha'&gt;koacha&lt;/a&gt; is a new test runner that works with Clojure CLI tools, Leiningen and Boot. Kaocha understands different types of tests including clojure.test, ClojureScript, Cucumber, Fudje, Expectations, allowing all tests to be handled in the same way.  This test runner also produces very useful reports using pretty printing so its easy to get meaning from them.&lt;/p&gt;&lt;p&gt;Install by editing your &lt;code&gt;deps.edn&lt;/code&gt; file and add an alias for kaocha&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:test {:extra-deps
        {lambdaisland/kaocha {:mvn/version &amp;quot;0.0-529&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a wrapper script called &lt;code&gt;bin/kaocha&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;#!/usr/bin/env bash
clojure -A:test -m kaocha.runner &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://cljdoc.org/d/lambdaisland/kaocha/0.0-529/doc/3-configuration'&gt;Create a tests.edn file&lt;/a&gt; at the root of the project.  Start with a default configuration by just adding the following line:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#kaocha/v1 {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://cljdoc.org/d/lambdaisland/kaocha/0.0-529/doc/readme'&gt;Read the detailed documentation&lt;/a&gt; to get the most out of Kaocha.&lt;/p&gt;&lt;h2 id="&lt;a href='https://github.com/seancorfield/depstar'&gt;depstar&lt;/a&gt;"&gt;&lt;a href='https://github.com/seancorfield/depstar'&gt;depstar&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/seancorfield/depstar'&gt;depstar&lt;/a&gt; creates a jar of your application or uberjar that also includes the Clojure library and can be deployed directly on the JVM platform.  depstar does not ahead of time (aot) compile your project.&lt;/p&gt;&lt;p&gt;Add the &lt;code&gt;:depstar&lt;/code&gt; alias to the project &lt;code&gt;deps.edn&lt;/code&gt; or &lt;code&gt;$HOME/.clojure/deps.edn&lt;/code&gt; to make depstar available for all projects.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:aliases {:depstar
            {:extra-deps
               {seancorfield/depstar {:mvn/version &amp;quot;0.3.1&amp;quot;}}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a jar or uberjar file using the respective command:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:depstar -m hf.depstar.jar myJar.jar
clojure -A:depstar -m hf.depstar.uberjar myUberJar.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--verbose&lt;/code&gt; after the filename lists all the files that are added to the jar file.&lt;/p&gt;&lt;p&gt;Add web assets into an uberjar by including an alias in your deps.edn:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;
 :aliases {:webassets {:extra-paths &amp;#91;&amp;quot;public-html&amp;quot;&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then invoke depstar with the chosen aliases:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:depstar:webassets -m hf.depstar.uberjar MyProject.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An uberjar is run using the command:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;java -jar MyProject.jar -m project.core
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="other&amp;#95;tools&amp;#95;to&amp;#95;investigate&amp;#95;at&amp;#95;another&amp;#95;time"&gt;Other tools to investigate at another time&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/borkdude/clj-kondo/'&gt;clj-kondo&lt;/a&gt; linter written in Clojure with &lt;a href='https://github.com/borkdude/clj-kondo/blob/master/analysis/README.md#namespace-graph'&gt;GraphViz based dependency graph&lt;/a&gt; and &lt;a href='https://github.com/borkdude/clj-kondo/blob/master/analysis/README.md#example-tools'&gt;other tools&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/juxt/pack.alpha'&gt;juxt.pack&lt;/a&gt; to package your applications as a jar, uberjar, clojars, maven, lambda and docker&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/RickMoynihan/lein-tools-deps'&gt;lein-tools-deps&lt;/a&gt; - dependencies with Leiningen&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/matthias-margush/aka'&gt;aka&lt;/a&gt; is for sharing aliases (not very clear what that means or why its useful - see project)&lt;/li&gt;&lt;li&gt;&lt;a href='https://laughing-banach-af1115.netlify.com/'&gt;Plum&lt;/a&gt; is a tool for managing Clojure projects - a wrapper for several community projects.&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/xsc/version-clj'&gt;version-clj&lt;/a&gt; Clojure &amp; ClojureScript library for analysis and comparison of artifact version numbers (used by depot)&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/danielsz/meyvn'&gt;Meyvn&lt;/a&gt; enables you to generate uberjars (executables) and jars (libraries), and to deploy them on remote servers, e.g. Clojars&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/borkdude/jet'&gt;jet&lt;/a&gt; - CLI to transform between JSON, EDN and Transit, powered with a minimal query language.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt; Visit &lt;a href='https://github.com/seancorfield/dot-clojure'&gt;Sean Corfield's dot-clojure repository&lt;/a&gt; for more tools and how to configure them with Clojure CLI tools. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="interesting&amp;#95;articles&amp;#95;on&amp;#95;clojure&amp;#95;cli&amp;#95;tools"&gt;Interesting articles on Clojure CLI tools&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://oli.me.uk/2018-02-26-clojure-projects-from-scratch/'&gt;Clojure CLI projects from scratch Oli.me.uk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://devcenter.heroku.com/categories/clojure-support'&gt;Clojure on Heroku&lt;/a&gt; now supports Clojure CLI tools.&lt;/li&gt;&lt;li&gt;&lt;a href='https://tomekw.com/clojure-deps-edn-a-basic-guide/'&gt;Clojure deps.edn - a basic guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://manuel-uberti.github.io/programming/2018/11/14/deps-shadow-cljs/'&gt;Moving to deps.edn and shadow-cljs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://gitlab.com/lambdatronic/clojure-webapp-template'&gt;a streamlined template for developing a new Clojure+Clojurescript web application with the Clojure CLI tools&lt;/a&gt;*&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you.&lt;/p&gt;&lt;p&gt;&lt;a href='https://twitter.com/jr0cket'&gt;@jr0cket&lt;/a&gt;&lt;/p&gt;</description><pubDate>Fri, 09 Aug 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/development-workflow-with-clojure-cli-tools/</guid><link>http://practical.li/test-blog/posts/development-workflow-with-clojure-cli-tools/</link><title>Development Workflow with Clojure CLI tools</title><description>&lt;p&gt;Continuing our exploration with Clojure CLI tools, we will discuss what what templates are available to help us create project,  Then we will create a new ClojureScript project using figwheel-main and show the different builds we can use to provide several workflows for developing, testing and deploying an application.&lt;/p&gt;&lt;p&gt;We will create a new project using the &lt;a href='https://github.com/bhauman/figwheel-main-template'&gt;figwheel-main template&lt;/a&gt;, explaining that we need to specify &lt;code&gt;organisation/project-name&lt;/code&gt; or &lt;code&gt;organisation.project-name&lt;/code&gt; for the &lt;code&gt;clj-new&lt;/code&gt; templates to work properly.&lt;/p&gt;&lt;p&gt;Then run the project using the &lt;code&gt;-A:fig:build&lt;/code&gt; alias to run with rebel readline to our user account version of &lt;code&gt;deps.edn&lt;/code&gt; so it is available for all projects.  Then we will run a test runner and see the auto-testing monitoring.  Finally we will show ways to configure a deploy workflow that we can use with GitHub&lt;/p&gt;&lt;p&gt;This article is also covered in &lt;a href='https://youtu.be/uuxEYsX-1eg'&gt;Practicalli Clojure study group #38 video&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Please see earlier articles in this series for background:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/gaining-confidence-with-Clojure-CLI-tools.html'&gt;Experimenting With Clojure CLI Tools Options&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/a-deeper-understanding-of-Clojure-CLI-tools.html'&gt;A Deeper Understanding of Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;Getting Started With Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="creating&amp;#95;projects&amp;#95;from&amp;#95;templates"&gt;Creating projects from templates&lt;/h2&gt;&lt;p&gt;In previous articles we have seen that we can use &lt;code&gt;clj-new&lt;/code&gt; to create projects using a number of templates.  This tool works with most Leiningen and Boot projects, however, it does not provide a &lt;code&gt;deps.edn&lt;/code&gt; configuration file if the template itself does not.  It should be easy enough to create your own from the project configuration file that is created by a Leiningen or Boot template (depending on how complex the template is).&lt;/p&gt;&lt;h2 id="create&amp;#95;a&amp;#95;new&amp;#95;project&amp;#95;using&amp;#95;the&amp;#95;figwheel-main&amp;#95;template"&gt;Create a new project using the figwheel-main template&lt;/h2&gt;&lt;p&gt;Using the &lt;a href='https://github.com/bhauman/figwheel-main-template'&gt;figwheel-main template&lt;/a&gt; we can create a new figwheel-main project with the comand:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:new figwheel-main hello-world.core -- --reagent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This creates a basic project with several aliases defined in the &lt;code&gt;deps.edn&lt;/code&gt; file for the project&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:deps {org.clojure/clojure {:mvn/version &amp;quot;1.10.0&amp;quot;}
        org.clojure/clojurescript {:mvn/version &amp;quot;1.10.339&amp;quot;}
        reagent {:mvn/version &amp;quot;0.8.1&amp;quot;}}
 :paths &amp;#91;&amp;quot;src&amp;quot; &amp;quot;resources&amp;quot;&amp;#93;
 :aliases {:fig {:extra-deps
                  {com.bhauman/rebel-readline-cljs {:mvn/version &amp;quot;0.1.4&amp;quot;}
                   com.bhauman/figwheel-main {:mvn/version &amp;quot;0.1.9&amp;quot;}}
                 :extra-paths &amp;#91;&amp;quot;target&amp;quot; &amp;quot;test&amp;quot;&amp;#93;}
           :build {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-b&amp;quot; &amp;quot;dev&amp;quot; &amp;quot;-r&amp;quot;&amp;#93;}
           :min   {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-O&amp;quot; &amp;quot;advanced&amp;quot; &amp;quot;-bo&amp;quot; &amp;quot;dev&amp;quot;&amp;#93;}
           :test  {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-co&amp;quot; &amp;quot;test.cljs.edn&amp;quot; &amp;quot;-m&amp;quot; practicalli.test-runner&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:fig&lt;/code&gt; adds the figwheel-main and rebel-readline libraries as dependencies&lt;/li&gt;&lt;li&gt;&lt;code&gt;:build&lt;/code&gt; runs figwheel-main and creates a build of the project code and tests&lt;/li&gt;&lt;li&gt;&lt;code&gt;:min&lt;/code&gt; creates a minified single JavaScript file for deployment&lt;/li&gt;&lt;li&gt;&lt;code&gt;:test&lt;/code&gt; runs all the tests once using the test-runner&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We will explore these builds and the workflow they provide as we go through this article.&lt;/p&gt;&lt;h2 id="running&amp;#95;figwheel"&gt;Running figwheel&lt;/h2&gt;&lt;p&gt;We can run figwheel by specifying &lt;code&gt;figwheel-main&lt;/code&gt; as the main namespace.  Figwheel will run a browser and connect to its JavaScript REPL, sending any code we type there to be evaluated..&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:fig -m figwheel.main
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;  &lt;a href='https://practicalli.github.io/blog/posts/cider-jack-in-to-clojure-cli-projects-from-spacemacs/'&gt;Running a deps.edn project from CIDER (Emacs/Spacemacs)&lt;/a&gt; may require a &lt;code&gt;.dir-locals.el&lt;/code&gt; file to set which alias you wish to run by default.  CIDER version 0.23 onwards should offer you a choice of alias to run. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The browser will show the default figwheel website that contains basic instructions on how to work with figwheel.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/figwheel-main-REPL-host-page.png" alt="figwheel-main - REPL host page" /&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;com.bhauman/rebel-readline-cljs&lt;/code&gt; is defined as a dependency in the &lt;code&gt;:fig&lt;/code&gt; alias in the project &lt;code&gt;deps.edn&lt;/code&gt;.  This allows figwheel to detect the presence of rebel readline and use it when starting the ClojureScript REPL, to give a very interactive command line.  If rebel readline is dectected you will see the following line a few lines before the &lt;code&gt;cljs.user=&amp;gt;&lt;/code&gt; prompt.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;Rebel readline&amp;#93; Type :repl/help for online help info
This confirms that we are using Rebel Readline.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-tools-figwheel-main-rebel-readline-map.png" alt="Clojure CLI tools - Figwheel-main - rebel readline" /&gt;&lt;/p&gt;&lt;p&gt;If you type :repl/help command at the prompt, as you type you immediately notice that :repl/help character are syntax highlighted. Upon hitting enter, you will see a useful reference for the REPL’s capabilities displayed.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/figwheel-main-repl-help.png" alt="Figwheel-main - repl help" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Use the &lt;code&gt;clojure&lt;/code&gt; command when using rebel-readline.  The &lt;code&gt;clj&lt;/code&gt; command provides it’s own terminal line reader &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We can call expressions in the REPL prompt, for example some typical ClojureScript such as &lt;code&gt;&amp;#40;map inc &amp;#91;2 4 6 8&amp;#93;&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Or we can evaluate some JavaScript interop code and see things change in the browser &lt;code&gt;&amp;#40;js/alert &amp;quot;Notification from the command line&amp;quot;&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;h2 id="running&amp;#95;figwheel&amp;#95;and&amp;#95;building&amp;#95;the&amp;#95;project"&gt;Running figwheel and building the project&lt;/h2&gt;&lt;p&gt;So far we have only run figwheel, however, our template did create some simple code that we can run that displays a website.&lt;/p&gt;&lt;p&gt;The template also added more aliases that defined different ways to build a project.&lt;/p&gt;&lt;p&gt;When developing we would typically run the &lt;code&gt;:build&lt;/code&gt; alias along with &lt;code&gt;:fig&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;clojure -A:fig:build&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/figwheel-main-project-hello-world.png" alt="Figwheel-main - project - hello world" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; when we look in the project &lt;code&gt;deps.edn&lt;/code&gt; file we can see the details of the command that the &lt;code&gt;build&lt;/code&gt; alias uses  &lt;code&gt;:build {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-b&amp;quot; &amp;quot;dev&amp;quot; &amp;quot;-r&amp;quot;&amp;#93;}&lt;/code&gt; &lt;/p&gt;&lt;p&gt;  This configuration is the equivalent of running the command &lt;code&gt;clojure -A:fig -m figwheel.main -b dev -r&lt;/code&gt; &lt;/p&gt;&lt;p&gt; This command uses the &lt;code&gt;:fig&lt;/code&gt; alias to add figwheel-main and rebel readline libraries, sets &lt;code&gt;figwheel-main&lt;/code&gt; as the main namespace, the build as &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt; to run a REPL. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="running&amp;#95;tests&amp;#95;once"&gt;Running tests once&lt;/h2&gt;&lt;p&gt;The source code for tests are placed under the top level &lt;code&gt;test&lt;/code&gt; directory and uses a directory path that matches their namespace, matching those in &lt;code&gt;src&lt;/code&gt;.  Source code files test a matching namespace and have &lt;code&gt;-test&lt;/code&gt; added to the end of their name.  For example, if we have a source namespace of &lt;code&gt;practicalli.hello-world&lt;/code&gt;, the tests would be in &lt;code&gt;practicalli.hello-world-test&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We can run tests created by the &lt;code&gt;figwheel-main&lt;/code&gt; template by running &lt;code&gt;clojure&lt;/code&gt; with the &lt;code&gt;:test&lt;/code&gt; alias.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; As before, the &lt;code&gt;:fig&lt;/code&gt; alias pulls in the &lt;code&gt;figwheel-main&lt;/code&gt; and &lt;code&gt;rebel-readline&lt;/code&gt; dependencies. &lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:fig:test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will open a browser and connect to its JavaScript REPL and run the tests.  The results can be seen in the terminal window from where you ran the &lt;code&gt;clojure&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/figwheel-main-test-output-terminal.png" alt="Figwheel-main - test output in terminal" /&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;:test&lt;/code&gt; alias sets &lt;code&gt;figwheel.main&lt;/code&gt; as the main namespace so it can run the figwheel test-runner functions&lt;/p&gt;&lt;p&gt;&lt;code&gt;:test  {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-co&amp;quot; &amp;quot;test.cljs.edn&amp;quot; &amp;quot;-m&amp;quot; practicalli.test-runner&amp;#93;}&lt;/code&gt;&lt;/p&gt;&lt;h2 id="continuous&amp;#95;testing"&gt;Continuous testing&lt;/h2&gt;&lt;p&gt;Running a figwheel-main build will also include continuous testing service, so you can instantly see the results of your tests.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -A:fig:build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;http://localhost:9500/figwheel-extra-main/auto-testing will show the live results of running the tests.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/figwheel-main-tests-auto-testing-webpage.png" alt="Figwheel-main - tests - auto-testing webpage results" /&gt;&lt;/p&gt;&lt;p&gt;You may see the auto-testing host page display before showing the tests&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/figwheel-main-tests-auto-testing-host-page.png" alt="Figwheel-main - tests - auto-testng host page" /&gt;&lt;/p&gt;&lt;h2 id="packaging&amp;#95;up&amp;#95;a&amp;#95;single&amp;#95;compiled&amp;#95;artifact&amp;#95;for&amp;#95;production"&gt;Packaging up a single compiled artifact for production&lt;/h2&gt;&lt;p&gt;The building of ClojureScript applications generates lots of files under &lt;code&gt;target/public&lt;/code&gt;, as this is the most efficient way to manage changes to your application during development.  Using only a single file when deploying your application to the live system makes your application website faster to load (only one http request).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; The ClojureScript compiler has four :optimizations modes :none, :whitespace, :simple and :advanced. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The &lt;code&gt;figwheel-main&lt;/code&gt; template provides a &lt;code&gt;:min&lt;/code&gt; alias to generate a single minified file that has been run through the Google Closure compiler to eliminate any uncalled code.  This generates a single file called &lt;code&gt;target/public/cljs-out/dev-main.js&lt;/code&gt;&lt;/p&gt;&lt;p&gt;You can manually copy this file to a suitable deployment directory when you publish your application live.&lt;/p&gt;&lt;h3 id="deploying&amp;#95;to&amp;#95;github&amp;#95;pages"&gt;Deploying to GitHub pages&lt;/h3&gt;&lt;p&gt;&lt;a href='https://pages.github.com/'&gt;GitHub pages&lt;/a&gt; provides a fast and free service for running a website (html, css and JavaScript files).  You can run a website by placing all the files in a &lt;code&gt;docs&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;Rather than manually copy the &lt;code&gt;dev-main.js&lt;/code&gt; file each time you want to deploy, create a new build configuration to output the single JavaScript file to a different location.&lt;/p&gt;&lt;p&gt;Create a file called &lt;code&gt;github-pages.cljs.edn&lt;/code&gt; to represent a new build and add the following configuration&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:main practicalli.hello-world
 :output-to &amp;quot;docs/cljs-out/dev-main.js&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then edit the &lt;code&gt;deps.edn&lt;/code&gt; file and change the &lt;code&gt;:min&lt;/code&gt; alias to use the &lt;code&gt;deploy&lt;/code&gt; build&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:min {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-O&amp;quot; &amp;quot;advanced&amp;quot; &amp;quot;-bo&amp;quot; &amp;quot;github-pages&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of changing the &lt;code&gt;:min&lt;/code&gt; alias, you could also add a new alias to deploy to GitHub pages directory.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;:github-pages {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-O&amp;quot; &amp;quot;advanced&amp;quot; &amp;quot;-bo&amp;quot; &amp;quot;github-pages&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; See &lt;a href='https://figwheel.org/tutorial#packaging-up-a-single-compiled-artifact-for-production'&gt;package a single file for production&lt;/a&gt; for more details. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;It is very easy to add aliases and build configurations to customise the workflows you use for your Clojure CLI tools project.  As all the configuration files are in EDN, they are Clojure maps and therefore very easy to work with and understand.&lt;/p&gt;&lt;p&gt;There are more examples of options for figwheel-main projects on the https://figwheel.org/ website.&lt;/p&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/jr0cket'&gt;@jr0cket&lt;/a&gt;&lt;/p&gt;</description><pubDate>Sun, 04 Aug 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/gaining-confidence-with-Clojure-CLI-tools/</guid><link>http://practical.li/test-blog/posts/gaining-confidence-with-Clojure-CLI-tools/</link><title>Gaining confidence with Clojure CLI tools</title><description>&lt;p&gt;We are going to try out the different command line options available as we continue our journey into the Clojure CLI tools..&lt;/p&gt;&lt;p&gt; We explore the different ways to running Clojure code, from a single expression to a full project.  We include examples of aliases for optional configuration and combining aliases to create specific configurations when running a project.  Finally we will see how to diagnose a project and understand potential sources of conflicts.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Newer content can be found in &lt;a href='http://practicalli.github.io/clojure/clojure-tools/using-clojure-tools.html'&gt;Using Clojure tools section of Practicalli Clojure&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Please see earlier articles in thise series for background:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/a-deeper-understanding-of-Clojure-CLI-tools.html'&gt;A Deeper Understanding of Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;Getting Started With Clojure CLI Tools&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="cli&amp;#95;options&amp;#95;-&amp;#95;getting&amp;#95;help"&gt;CLI options - getting help&lt;/h2&gt;&lt;p&gt;&lt;code&gt;clojure -h&lt;/code&gt;, &lt;code&gt;-?&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; lists the options are available for the Clojure CLI tool. You should see output as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;clojure --help
Usage: clojure &amp;#91;dep-opt&amp;#42;&amp;#93; &amp;#91;init-opt&amp;#42;&amp;#93; &amp;#91;main-opt&amp;#93; &amp;#91;arg&amp;#42;&amp;#93;
       clj     &amp;#91;dep-opt&amp;#42;&amp;#93; &amp;#91;init-opt&amp;#42;&amp;#93; &amp;#91;main-opt&amp;#93; &amp;#91;arg&amp;#42;&amp;#93;

The clojure script is a runner for Clojure. clj is a wrapper
for interactive repl use. These scripts ultimately construct and
invoke a command-line of the form:

java &amp;#91;java-opt&amp;#42;&amp;#93; -cp classpath clojure.main &amp;#91;init-opt&amp;#42;&amp;#93; &amp;#91;main-opt&amp;#93; &amp;#91;arg&amp;#42;&amp;#93;

The dep-opts are used to build the java-opts and classpath:
 -Jopt          Pass opt through in java&amp;#95;opts, ex: -J-Xmx512m
 -Oalias...     Concatenated jvm option aliases, ex: -O:mem
 -Ralias...     Concatenated resolve-deps aliases, ex: -R:bench:1.9
 -Calias...     Concatenated make-classpath aliases, ex: -C:dev
 -Malias...     Concatenated main option aliases, ex: -M:test
 -Aalias...     Concatenated aliases of any kind, ex: -A:dev:mem
 -Sdeps EDN     Deps data to use as the last deps file to be merged
 -Spath         Compute classpath and echo to stdout only
 -Scp CP        Do NOT compute or cache classpath, use this one instead
 -Srepro        Ignore the &amp;#126;/.clojure/deps.edn config file
 -Sforce        Force recomputation of the classpath &amp;#40;don't use the cache&amp;#41;
 -Spom          Generate &amp;#40;or update existing&amp;#41; pom.xml with deps and paths
 -Stree         Print dependency tree
 -Sresolve-tags Resolve git coordinate tags to shas and update deps.edn
 -Sverbose      Print important path info to console
 -Sdescribe     Print environment and command parsing info as data

init-opt:
 -i, --init path     Load a file or resource
 -e, --eval string   Eval exprs in string; print non-nil values
         --report target     Report uncaught exception to &amp;quot;file&amp;quot; &amp;#40;default&amp;#41;, &amp;quot;stderr&amp;quot;, or &amp;quot;none&amp;quot;,
                             overrides System property clojure.main.report

main-opt:
 -m, --main ns-name  Call the -main function from namespace w/args
 -r, --repl          Run a repl
 path                Run a script from a file or resource
&lt;ul&gt;&lt;li&gt;Run a script from standard input -h, -?, --help      Print this help message and exit

For more info, see:
 https://clojure.org/guides/deps&amp;#95;and&amp;#95;cli
 https://clojure.org/reference/repl&amp;#95;and&amp;#95;main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="running&amp;#95;code&amp;#95;-&amp;#95;the&amp;#95;repl"&gt;Running code - the REPL&lt;/h2&gt;&lt;p&gt;&lt;code&gt;clojure --repl&lt;/code&gt;  or &lt;code&gt;clojure -r&lt;/code&gt; runs a repl, so you can create your application right there in the command line terminal.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure --repl

Clojure 1.10.1
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This seems to be the same as the default behaviour when running &lt;code&gt;clojure&lt;/code&gt;&lt;/p&gt;&lt;h2 id="running&amp;#95;code&amp;#95;-&amp;#95;just&amp;#95;an&amp;#95;expression"&gt;Running Code - just an expression&lt;/h2&gt;&lt;p&gt;We can just evaluate a Clojure expression using the &lt;code&gt;--eval string&lt;/code&gt; or &lt;code&gt;-e&lt;/code&gt; option.  This option takes the expression as a string, so dont forget those double quotes.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -e &amp;quot;&amp;#40;+ 1 2 3&amp;#41;&amp;quot;

6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Calling code this way will print non-nil values.  So if we have an expression that returns nil as a side effect, then that value will not be printed.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -e &amp;quot;&amp;#40;println &amp;#40;+ 1 2 3&amp;#41;&amp;#41;&amp;quot;

6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And if an expression only returns nil, then nothing is printed&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -e &amp;quot;&amp;#40;if &amp;#40;= 1 2&amp;#41; true nil&amp;#41;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="running&amp;#95;code&amp;#95;-&amp;#95;from&amp;#95;a&amp;#95;project"&gt;Running code - from a project&lt;/h2&gt;&lt;p&gt;We saw in the Practicalli study group that you can run a project just by specifying the main namepsace.&lt;/p&gt;&lt;p&gt;Using the project &lt;a href='https://github.com/practicalli/first-cli-app'&gt;practicalli/first-cli-app&lt;/a&gt; we can Run the project using the command:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -m practicalli.first-app
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The command called the &lt;code&gt;-main&lt;/code&gt; function defined in &lt;code&gt;practicalli.first-app&lt;/code&gt; namespce (&lt;code&gt;src/practicalli/first&amp;#95;app.clj&lt;/code&gt;)&lt;/p&gt;&lt;h2 id="&lt;code&gt;-aalias&lt;/code&gt;&amp;#95;-&amp;#95;include&amp;#95;configuration&amp;#95;sections&amp;#95;when&amp;#95;running&amp;#95;&lt;code&gt;clojure&lt;/code&gt;"&gt;&lt;code&gt;-Aalias&lt;/code&gt; - include configuration sections when running &lt;code&gt;clojure&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Use aliases to define additional configuration sections that will be pulled into the overall configuration, as you call &lt;code&gt;clojure&lt;/code&gt; on the command line.&lt;/p&gt;&lt;p&gt;From the ### Combining Aliases&lt;/p&gt;&lt;p&gt;As this is Clojure &lt;a href='https://github.com/practicalli/first-cli-app'&gt;practicalli/first-cli-app&lt;/a&gt; we have two aliases defined, `:We have already been combining configurations and so its not surprising that we can combine aliases&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:paths &amp;#91;&amp;quot;resources&amp;quot; &amp;quot;src&amp;quot;&amp;#93;

 :deps {org.clojure/clojure {:mvn/version &amp;quot;RELEASE&amp;quot;}}

 :aliases {:test {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
                  :extra-deps {org.clojure/test.check {:mvn/version &amp;quot;RELEASE&amp;quot;}}}

           :runner {:extra-deps
                     {com.cognitect/test-runner
                      {:git/url &amp;quot;https://github.com/cognitect-labs/test-runner&amp;quot;
                       :sha &amp;quot;76568540e7f40268ad2b646110f237a60295fa3c&amp;quot;}}
                    :main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;cognitect.test-runner&amp;quot; &amp;quot;-d&amp;quot; &amp;quot;test&amp;quot;&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;clojure -A:test&lt;/code&gt; will add &lt;code&gt;test&lt;/code&gt; to the search path and include the &lt;code&gt;org.clojure/test.check&lt;/code&gt; library.&lt;/p&gt;&lt;p&gt;&lt;code&gt;clojure -A:runner&lt;/code&gt; will add the &lt;code&gt;com.congnitect/test-runner&lt;/code&gt; library from GitHub and then run with the &lt;code&gt;cognitect.test-runner&lt;/code&gt; as the main namespace.  &lt;code&gt;clojure&lt;/code&gt; will also include configuration from the &lt;code&gt;test&lt;/code&gt; build configuration.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; The &lt;a href='https://github.com/practicalli/first-cli-app'&gt;practicalli/first-cli-app&lt;/a&gt; does not yet define a &lt;code&gt;dev&lt;/code&gt; build, so no additional configuration is added when using the &lt;code&gt;-A:runner&lt;/code&gt; alias. &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="combining&amp;#95;aliases"&gt;Combining Aliases&lt;/h3&gt;&lt;p&gt;We have already been combining configurations and so its not surprising that we can combine aliases too.&lt;/p&gt;&lt;p&gt;The practicalli/study-group-guide defines several aliases&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:deps {org.clojure/clojure {:mvn/version &amp;quot;1.10.0&amp;quot;}
        org.clojure/clojurescript {:mvn/version &amp;quot;1.10.339&amp;quot;}
        reagent {:mvn/version &amp;quot;0.8.1&amp;quot;}}
 :paths &amp;#91;&amp;quot;src&amp;quot; &amp;quot;resources&amp;quot;&amp;#93;

 :aliases {:fig {:extra-deps
                  {com.bhauman/rebel-readline-cljs {:mvn/version &amp;quot;0.1.4&amp;quot;}
                   com.bhauman/figwheel-main {:mvn/version &amp;quot;0.1.9&amp;quot;}}
                 :extra-paths &amp;#91;&amp;quot;target&amp;quot; &amp;quot;test&amp;quot;&amp;#93;}
           :build {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-b&amp;quot; &amp;quot;dev&amp;quot; &amp;quot;-r&amp;quot;&amp;#93;}
           :min   {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-O&amp;quot; &amp;quot;advanced&amp;quot; &amp;quot;-bo&amp;quot; &amp;quot;dev&amp;quot;&amp;#93;}
           :test  {:main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;figwheel.main&amp;quot; &amp;quot;-co&amp;quot; &amp;quot;test.cljs.edn&amp;quot; &amp;quot;-m&amp;quot; practicalli.test-runner&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;clojure -A:fig&lt;/code&gt; will include the library for &lt;code&gt;figwheel-main&lt;/code&gt; library and include the &lt;code&gt;:extra-paths&lt;/code&gt; of &lt;code&gt;target&lt;/code&gt;, where JavaScript is generated and &lt;code&gt;test&lt;/code&gt; for project unit tests.&lt;/p&gt;&lt;p&gt;&lt;code&gt;clojure -A:fig:build&lt;/code&gt; will do the above and also build the project with figwheel-main, first loading in the &lt;code&gt;dev&lt;/code&gt; build configuration.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;dev&lt;/code&gt; build is defined in &lt;code&gt;dev.cljs.edn&lt;/code&gt; file.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#94;{:watch-dirs &amp;#91;&amp;quot;test&amp;quot; &amp;quot;src&amp;quot;&amp;#93;
  :css-dirs &amp;#91;&amp;quot;resources/public/css&amp;quot;&amp;#93;
  :auto-testing true}
{:main practicalli.study-group-guide}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="&lt;code&gt;-sdeps&lt;/code&gt;&amp;#95;-&amp;#95;adding&amp;#95;dependencies&amp;#95;to&amp;#95;deps.edn"&gt;&lt;code&gt;-Sdeps&lt;/code&gt; - adding dependencies to deps.edn&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;-Sdeps&lt;/code&gt; option will also add the given dependency to the current projects &lt;code&gt;deps.edn&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Create a new project directory called packing-code&lt;/p&gt;&lt;p&gt;Create and edit a file called &lt;code&gt;deps.edn&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Add the following simple configuration&lt;/p&gt;&lt;p&gt;Add a dependency to this file using the Clojure CLI tools&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -Sdeps '{:deps {pack/pack.alpha {:git/url &amp;quot;https://github.com/juxt/pack.alpha.git&amp;quot; :sha &amp;quot;dccf2134bcf03726a9465d2b9997c42e5cd91bff&amp;quot;}}}' -m mach.pack.alpha.inject 'd9023b24c3d589ba6ebc66c5a25c0826ed28ead5'

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The command should execute without error and if so no output is returned.  So open the &lt;code&gt;deps.edn&lt;/code&gt; file in the project and check the dependency has been added.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; It does seem easier to simply edit the &lt;code&gt;deps.edn&lt;/code&gt; file and add project dependencies, especially as the code may need formatting.  If you are working with a bigger project then using the CLI to add a dependency to an existing &lt;code&gt;deps.edn&lt;/code&gt; project configuration could be a convenient way to share new dependencies between teams or others who want to use your project, reducing the risk of copy/paste errors or adding different versions. &lt;/p&gt;&lt;p&gt; It could be useful to create a script that populates a project &lt;code&gt;deps.edn&lt;/code&gt; file with all the same depencencies.  What happens if you try add the same dependency but with different versions?  Maybe using &lt;code&gt;clojure - script-to-set-dependencies.sh&lt;/code&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id="error:&amp;#95;no&amp;#95;&lt;code&gt;deps.edn&lt;/code&gt;&amp;#95;file"&gt;Error: no &lt;code&gt;deps.edn&lt;/code&gt; file&lt;/h3&gt;&lt;p&gt;if you are not in a project with a &lt;code&gt;deps.edn&lt;/code&gt; file then the call to &lt;code&gt;clojure -Sdeps ,,,&lt;/code&gt; will fail with the following error&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;Execution error &amp;#40;FileNotFoundException&amp;#41; at java.io.FileInputStream/open0 &amp;#40;FileInputStream.java:-2&amp;#41;.
deps.edn &amp;#40;No such file or directory&amp;#41;

Full report at:
/tmp/clojure-3813266914468340055.edn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://gist.github.com/0e94ed1d772ad6b051a382c8410c3f78'&gt;A gist of the complete error&lt;/a&gt; if you are interested&lt;/p&gt;&lt;h2 id="&lt;code&gt;-stree&lt;/code&gt;&amp;#95;-&amp;#95;adding&amp;#95;dependencies&amp;#95;to&amp;#95;deps.edn"&gt;&lt;code&gt;-Stree&lt;/code&gt; - adding dependencies to deps.edn&lt;/h2&gt;&lt;p&gt;&lt;code&gt;clojure -Stree&lt;/code&gt; in a project directory will show all the library dependencies you added to the project along with all the depencencies that each of those libraries have.&lt;/p&gt;&lt;p&gt;&lt;code&gt;-Stree&lt;/code&gt; is a very useful diagnostic tool when you have clashes between dependencies, or more likely the version of dependencies that the libraries you added as dependences have as dependencies (I think that needs a diagram).&lt;/p&gt;&lt;p&gt;In the &lt;a href='https://github.com/practicalli/first-cli-app'&gt;practicalli/first-cli-app&lt;/a&gt; we can see that the &lt;code&gt;org.clojure/clojure&lt;/code&gt; library we added has two libraries as its dependencies.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -Stree

org.clojure/clojure 1.10.1
  org.clojure/spec.alpha 0.2.176
  org.clojure/core.specs.alpha 0.2.44
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we look at &lt;a href='https://github.com/practicalli/study-group-guide'&gt;practicalli/study-group-guide&lt;/a&gt; project which uses Clojure, ClojureScript and reagent libraries, the dependency tree is much larger.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -Stree
org.clojure/clojure 1.10.0
  org.clojure/core.specs.alpha 0.2.44
  org.clojure/spec.alpha 0.2.176
org.clojure/clojurescript 1.10.339
  org.clojure/data.json 0.2.6
  org.clojure/google-closure-library 0.0-20170809-b9c14c6b
    org.clojure/google-closure-library-third-party 0.0-20170809-b9c14c6b
  org.mozilla/rhino 1.7R5
  com.cognitect/transit-clj 0.8.309
    com.cognitect/transit-java 0.8.332
      commons-codec/commons-codec 1.10
      com.fasterxml.jackson.core/jackson-core 2.8.7
      org.msgpack/msgpack 0.6.12
        com.googlecode.json-simple/json-simple 1.1.1
        org.javassist/javassist 3.18.1-GA
  org.clojure/tools.reader 1.3.0-alpha3
  com.google.javascript/closure-compiler-unshaded v20180610
    com.google.errorprone/error&amp;#95;prone&amp;#95;annotations 2.0.18
    com.google.jsinterop/jsinterop-annotations 1.0.0
    com.google.javascript/closure-compiler-externs v20180610
    com.google.guava/guava 22.0
      org.codehaus.mojo/animal-sniffer-annotations 1.14
      com.google.j2objc/j2objc-annotations 1.1
    args4j/args4j 2.33
    com.google.protobuf/protobuf-java 3.0.2
    com.google.code.findbugs/jsr305 3.0.1
    com.google.code.gson/gson 2.7
reagent/reagent 0.8.1
  cljsjs/react-dom 16.3.2-0
  cljsjs/react 16.3.2-0
  cljsjs/react-dom-server 16.3.2-0
  cljsjs/create-react-class y15.6.3-0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="managing&amp;#95;dependency&amp;#95;clashes"&gt;Managing dependency clashes&lt;/h3&gt;&lt;p&gt;In the figwheel-main project we saw that reagent/reagent library had 4 additional dependencies it relied upon.  If one of those dependencies were causing an issue, we could define an exclusion on the &lt;code&gt;reagent/reagent&lt;/code&gt; dependency entry&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:deps {org.clojure/clojure {:mvn/version &amp;quot;1.10.0&amp;quot;}
        org.clojure/clojurescript {:mvn/version &amp;quot;1.10.339&amp;quot;}
        reagent {:mvn/version &amp;quot;0.8.1&amp;quot;
                 :exclusions &amp;#91;cljsjs/react-dom
                              cljsjs/react-dom-server&amp;#93;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;clojure -Stree&lt;/code&gt; would now show that &lt;code&gt;reagent/reagent&lt;/code&gt; only brings in two additional dependencies.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -Stree

reagent/reagent 0.8.1
  cljsjs/react 16.3.2-0
  cljsjs/create-react-class y15.6.3-0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="&lt;code&gt;-sresolve-tags&lt;/code&gt;&amp;#95;-&amp;#95;adding&amp;#95;dependencies&amp;#95;to&amp;#95;deps.edn"&gt;&lt;code&gt;-Sresolve-tags&lt;/code&gt; - adding dependencies to deps.edn&lt;/h2&gt;&lt;p&gt;TODO: investigate&lt;/p&gt;&lt;h2 id="&lt;code&gt;-sverbose&lt;/code&gt;&amp;#95;-&amp;#95;clojure&amp;#95;version&amp;#95;and&amp;#95;paths&amp;#95;before&amp;#95;running&amp;#95;repl"&gt;&lt;code&gt;-Sverbose&lt;/code&gt; - Clojure version and paths before running REPL&lt;/h2&gt;&lt;p&gt;&lt;code&gt;clojure -Sverbose&lt;/code&gt; simply shows the version of Clojure and all the paths and files used to run the REPL.  Then it runs a REPL as normal.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -Sverbose
version      = 1.10.1.447
install&amp;#95;dir  = /usr/local/lib/clojure
config&amp;#95;dir   = /home/jr0cket/.clojure
config&amp;#95;paths = /usr/local/lib/clojure/deps.edn /home/jr0cket/.clojure/deps.edn deps.edn
cache&amp;#95;dir    = .cpcache
cp&amp;#95;file      = .cpcache/1067532457.cp

Clojure 1.10.1
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;config&amp;#95;paths&lt;/code&gt; configuration shows which &lt;code&gt;deps.edn&lt;/code&gt; files are used to build up the configuration, very useful for debugging missing or incorrect configuration (if its pulling in unexpected files into the configuration).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Read the &lt;a href='../development-workflow-with-clojure-cli-tools/'&gt;Development Workflow with Clojure CLI tools article&lt;/a&gt; for and example of Clojure CLI tools with a figwheel-main project &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="&lt;code&gt;-sdescribe&lt;/code&gt;&amp;#95;-&amp;#95;showing&amp;#95;the&amp;#95;configuration&amp;#95;and&amp;#95;where&amp;#95;it&amp;#95;came&amp;#95;from"&gt;&lt;code&gt;-Sdescribe&lt;/code&gt; - showing the configuration and where it came from&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;-Sdescribe&lt;/code&gt; option provides a simple way to understand where &lt;code&gt;clojure&lt;/code&gt; is getting its configuration from and what the key parts of that configuration are.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -Sdescribe

{:version &amp;quot;1.10.1.447&amp;quot;
 :config-files &amp;#91;&amp;quot;/usr/local/lib/clojure/deps.edn&amp;quot; &amp;quot;/home/jr0cket/.clojure/deps.edn&amp;quot; &amp;quot;deps.edn&amp;quot; &amp;#93;
 :install-dir &amp;quot;/usr/local/lib/clojure&amp;quot;
 :config-dir &amp;quot;/home/jr0cket/.clojure&amp;quot;
 :cache-dir &amp;quot;.cpcache&amp;quot;
 :force false
 :repro false
 :resolve-aliases &amp;quot;&amp;quot;
 :classpath-aliases &amp;quot;&amp;quot;
 :jvm-aliases &amp;quot;&amp;quot;
 :main-aliases &amp;quot;&amp;quot;
 :all-aliases &amp;quot;&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/practicalli'&gt;@practicalli&lt;/a&gt;&lt;/p&gt;</description><pubDate>Fri, 26 Jul 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/a-deeper-understanding-of-clojure-cli-tools/</guid><link>http://practical.li/test-blog/posts/a-deeper-understanding-of-clojure-cli-tools/</link><title>A deeper understanding of Clojure CLI tools</title><description>&lt;p&gt;CLI tools make Clojure very accessible and simple to install as they are a essentially a wrapper for running Clojure code using the &lt;code&gt;java&lt;/code&gt; command and use additional libraries to manage dependencies, class paths, create projects and build java archive (jar) files.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Newer content can be found in &lt;a href='http://practicalli.github.io/clojure/clojure-tools/using-clojure-tools.html'&gt;Using Clojure tools section of Practicalli Clojure&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Its quite common to use the &lt;code&gt;java&lt;/code&gt; command to run your code in production, usually defined in a shell script.  Leiningen can be used to run your application in production too, however, because Leiningen creates 2 JVM instances (one for itself and one for the application), its more efficient to just use the &lt;code&gt;java&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;Leiningen does provides a very rich set of templates that speed up development with Clojure and has a multitude of plugins. Plugins provide a rich source of features but they are not very composable, especially compared to the Clojure language itself.&lt;/p&gt;&lt;p&gt;Clojure CLI tools provide a minimal but elegant layer on top of the &lt;code&gt;java&lt;/code&gt; command and enables libraries, configuration and code to compose together just like Clojure functions.  So we will continuing the exploration of Clojure CLI tools and dig a little deeper under the covers to understand how they work and how to configure projects to be very flexible, especially the different sources of code you can use .&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; This article follows on from &lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;getting started with Clojure CLI tools&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="under&amp;#95;the&amp;#95;covers&amp;#95;of&amp;#95;clojure&amp;#95;cli"&gt;Under the covers of CLojure CLI&lt;/h2&gt;&lt;p&gt;Using the command &lt;code&gt;lein new app classic&lt;/code&gt; creates a simple project called &lt;code&gt;classic&lt;/code&gt; containing some source code and test code.  We can use &lt;code&gt;lein repl&lt;/code&gt; to give instant feedback on the evaluation of the code in our project.&lt;/p&gt;&lt;p&gt;This command also compiles our code to Java bytecode, so it can run on the JVM just like compiled Java or Scala code.&lt;/p&gt;&lt;p&gt;&lt;code&gt;lein jar&lt;/code&gt; and more commonly &lt;code&gt;lein uberjar&lt;/code&gt; is used to package up our code into a single file.  These commands compile the Clojure code into classes when Ahead Of Time compilation is used.  Any namespaces with &lt;code&gt;&amp;#40;:gen-class&amp;#41;&lt;/code&gt; directive included in compiled into a JVM bytecode class is &lt;code&gt;lein uberjar&lt;/code&gt; creates a single file that contains our application and the Clojure library, so we can use with the java command line&lt;/p&gt;&lt;p&gt;&lt;code&gt;java -cp target/myproject-standalone.jar&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If I had created a library project, with &lt;code&gt;lein new classic&lt;/code&gt;, then I would need to specify clojure.main and the main class for the &lt;code&gt;java&lt;/code&gt; command to work correctly.&lt;/p&gt;&lt;p&gt;&lt;code&gt;java -cp target/myproject-standalone.jar clojure.main -m classic.core&lt;/code&gt;&lt;/p&gt;&lt;p&gt;It is also possible to run the compiled source code, however, we will also need to add Clojure as a dependency.  There is a copy of the Clojure library in my maven cache from previous projects I have worked on.&lt;/p&gt;&lt;p&gt;&lt;code&gt;java -cp target/uberjar/classes/:/home/jr0cket/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar classic.core&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If I just wanted to run a repl, I can call clojure.main as my namespace&lt;/p&gt;&lt;p&gt;&lt;code&gt;java -cp /home/jr0cket/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar clojure.main&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Already there are a few things to remember. As your project gets bigger then the command you use will get bigger and harder to manage safely, its often put into scripts but then there is no real validation that you got the script right, without some manual testing&lt;/p&gt;&lt;p&gt;&lt;code&gt;java $JVM&amp;#95;OPTS -cp target/todo-list.jar clojure.main -m todo-list.core $PORT&lt;/code&gt;&lt;/p&gt;&lt;h2 id="clojure&amp;#95;cli&amp;#95;tools"&gt;Clojure CLI tools&lt;/h2&gt;&lt;p&gt;It is very easy to create a project for CLI tools, using the &lt;code&gt;clojure&lt;/code&gt; command or the &lt;code&gt;clj&lt;/code&gt; wrapper for that command, which will use a readline to improve the command line experience.&lt;/p&gt;&lt;p&gt;CLI tools project only requires a &lt;code&gt;deps.edn&lt;/code&gt; file, a default file comes with the CLI tools install.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;#126;/.clojure/deps.edn&lt;/code&gt; is created the first time you run the &lt;code&gt;clojure&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;&lt;code&gt;/usr/local/lib/clojure/deps.edn&lt;/code&gt; contains a few basic options that are applied to all projects.&lt;/p&gt;&lt;p&gt;&lt;code&gt;src&lt;/code&gt; is set as the relative path to the source code&lt;/p&gt;&lt;p&gt;The dependencies include &lt;code&gt;1.10.1&lt;/code&gt; version of the Clojure library.&lt;/p&gt;&lt;p&gt;Aliases define additional libraries that will only be included during development, in this case &lt;code&gt;org.clojure/tools.deps.alpha&lt;/code&gt; which is used to find and download project dependencies and build a classpath for the project.&lt;/p&gt;&lt;p&gt;Finally maven central and clojars are the repositories where dependencies are downloaded from.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{
  :paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;

  :deps {
    org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}
  }

  :aliases {
    :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version &amp;quot;0.6.496&amp;quot;}}}
    :test {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;}
  }

  :mvn/repos {
    &amp;quot;central&amp;quot; {:url &amp;quot;https://repo1.maven.org/maven2/&amp;quot;}
    &amp;quot;clojars&amp;quot; {:url &amp;quot;https://repo.clojars.org/&amp;quot;}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="a&amp;#95;simple&amp;#95;project&amp;#95;configuration"&gt;A simple project configuration&lt;/h2&gt;&lt;p&gt;nside.&lt;/p&gt;&lt;p&gt;There is some duplication of the configurations&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;

 :deps
 {org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}}

 :aliases
 {:test {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;
         :extra-deps {com.cognitect/test-runner
                       {:git/url &amp;quot;https://github.com/cognitect-labs/test-runner.git&amp;quot;
                        :sha &amp;quot;cb96e80f6f3d3b307c59cbeb49bb0dcb3a2a780b&amp;quot;}}
         :main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;cognitect.test-runner&amp;quot;&amp;#93;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The cognitect-labs/test-runner is a recent project so we are including this directly from its GitHub repository.  We use the latest commit https://github.com/cognitect-labs/test-runner/commit/cb96e80f6f3d3b307c59cbeb49bb0dcb3a2a780b&lt;/p&gt;&lt;p&gt;Using the Git commit removes the need to create a Jar file from the source code.&lt;/p&gt;&lt;h2 id="time&amp;#95;for&amp;#95;some&amp;#95;test&amp;#95;driven&amp;#95;development"&gt;Time for some Test Driven Development&lt;/h2&gt;&lt;p&gt;Create a new file in the &lt;code&gt;test&lt;/code&gt; directory called &lt;code&gt;core&amp;#95;test.clj&lt;/code&gt; that contains a test with two assertions.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;clojure.test&lt;/code&gt; namespace is included in the &lt;code&gt;org.clojure/clojure&lt;/code&gt; dependency, so we do not have to add anything to the &lt;code&gt;deps.edn&lt;/code&gt; file&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns simple.core-test
  &amp;#40;:require &amp;#91;simple.core :as sut&amp;#93;
            &amp;#91;clojure.test :refer &amp;#91;deftest testing is&amp;#93;&amp;#93;&amp;#41;&amp;#41;


&amp;#40;deftest core-tests
  &amp;#40;testing &amp;quot;The correct welcome message is returned&amp;quot;
    &amp;#40;is &amp;#40;= &amp;#40;sut/-main&amp;#41;
           &amp;quot;Hello World!&amp;quot;&amp;#41;&amp;#41;

    &amp;#40;is &amp;#40;= &amp;#40;sut/-main &amp;quot;Welcome to the Clojure CLI&amp;quot;&amp;#41;
           &amp;quot;Hello World! Welcome to the Clojure CLI&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We run the failing tests with the following command&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clj -A:test

Checking out: https://github.com/cognitect-labs/test-runner.git at cb96e80f6f3d3b307c59cbeb49bb0dcb3a2a780b

Running tests in #{&amp;quot;test&amp;quot;}
Syntax error compiling at &amp;#40;simple/core&amp;#95;test.clj:8:26&amp;#41;.
No such var: sut/-main

Full report at:
/tmp/clojure-3370388766424088668.edn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that the first time we are using the test-runner the CLI tools download the source code from the Git repository.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; NOTE: Using a Git commit provides just a stable dependency as Maven or other tool.  The only risk is if you are using a shared repository and a force commit is made that replaces the commit you have as dependency, but that will have a different hash value, so you will notice that kind of change when running your code. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="and&amp;#95;now&amp;#95;some&amp;#95;code"&gt;And now some code&lt;/h2&gt;&lt;p&gt;Everything is working correctly and the tests are failing because we have not written the code that the test is using.  So write the application code and make the test pass and execute the test runner again.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns hello.core&amp;#41;

&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;println &amp;quot;Hello world!&amp;quot;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="extra&amp;#95;dependencies"&gt;Extra dependencies&lt;/h2&gt;&lt;h2 id="over-ride"&gt;Over-ride&lt;/h2&gt;&lt;p&gt;Use different versions of dependencies in your project that is set globally.  One example is if you are activly building a project, you may want to include the latest commit on a feature branch.  Or you may be using a third party library and want to test out a new beta version.  Or perhaps you are releasing a library and want to test it with earlier versions of Clojure, for example.&lt;/p&gt;&lt;h3 id="example"&gt;Example&lt;/h3&gt;&lt;p&gt;0383381021e03691dff101a9b12accb79e9a4e10&lt;/p&gt;&lt;h2 id="jvm&amp;#95;options"&gt;JVM options&lt;/h2&gt;&lt;p&gt;Passing options to the Java Virtual Machine can be very important to shape the performance dynamics of your Clojure application.  For example, not enough memory allocation can really grind your application to a halt.  I experienced this with a third party Java project, they only had 512Mb as the memory allocation size and after a number of uses we working with it then it would steadily grind to a halt.  Doubling the JVM memory allocation made the application fly for hundreds of concurrent users.&lt;/p&gt;&lt;h2 id="configuration&amp;#95;options&amp;#95;useful&amp;#95;for&amp;#95;cljs"&gt;Configuration options useful for CLJS&lt;/h2&gt;&lt;p&gt;:output-dir to define where the resulting JavaScript file is written too when compiling ClojureScript.  This is used for a different build, e.g. &lt;code&gt;deploy&lt;/code&gt; to&lt;/p&gt;&lt;h2 id="deployment"&gt;Deployment&lt;/h2&gt;&lt;p&gt;We saw that Leiningen created a single file that we can use to deploy our application and call from the &lt;code&gt;java&lt;/code&gt; command line.&lt;/p&gt;&lt;p&gt;&lt;a href='https://github.com/seancorfield/depstar'&gt;depstar&lt;/a&gt; is a CLJ tools based uberjar tool&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{
  :aliases {:depstar
              {:extra-deps
                 {seancorfield/depstar {:mvn/version &amp;quot;0.2.4&amp;quot;}}}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create an uberjar file using&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;clojure -A:depstar -m hf.depstar.uberjar simple.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To run the generated jar file&lt;/p&gt;&lt;p&gt;java -cp simple.jar clojure.main -m simple.core&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; depstar does not do any ahead of time compilation (AOT) so your application may start up more slowly as the code first needs to be compiled into Java byte code. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;https://github.com/clojure/clojure/commit/653b8465845a78ef7543e0a250078eea2d56b659&lt;/p&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/jr0cket'&gt;@jr0cket&lt;/a&gt;&lt;/p&gt;</description><pubDate>Sun, 21 Jul 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/cider-jack-in-to-clojure-cli-projects-from-spacemacs/</guid><link>http://practical.li/test-blog/posts/cider-jack-in-to-clojure-cli-projects-from-spacemacs/</link><title>CIDER jack-in to Clojure CLI projects from Spacemacs</title><description>&lt;p&gt;Running a Clojure project created with CLI tools or &lt;code&gt;clj-new&lt;/code&gt; may require you to pass in an alias for the REPL to pick up the right libraries.&lt;/p&gt;&lt;p&gt; A few days ago I created a new ClojureScript and reagent project, using the Clojure CLI tools and &lt;code&gt;clj-new&lt;/code&gt; project creation tool, which converts Leiningen and Boot templates into a deps.edn based project.  Unfortunately when I created a project from the fighwheel-main template the REPL failed to run from CIDER using &lt;code&gt;cider-jack-in-cljs&lt;/code&gt;, saying that figwheel-main was not found.  All that was required was to specify the &lt;code&gt;:fig&lt;/code&gt; alias when running a REPL.&lt;/p&gt;&lt;p&gt;This article covers two approaches to running Clojure CLI projects from CIDER jack-in that require setting of an alias or multiple aliases e.g. &lt;code&gt;-A:fig:build:party:hammock&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; See &lt;a href='http://jr0cket.co.uk/2019/07/getting-started-with-Clojure-CLI-tools.html'&gt;Getting started with Clojure CLI tools&lt;/a&gt; for background to this article. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="understanding&amp;#95;the&amp;#95;problem"&gt;Understanding the problem&lt;/h2&gt;&lt;p&gt;I created a new project with the Clojure CLI tools and the figwheel-main template (using clj-new).  This is the first time with this approach, so I may have missed something.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;clj -A:new figwheel-main practicalli/study-group-guide -- --reagent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I ran &lt;code&gt;cider-jack-in-cljs&lt;/code&gt; from Spacemacs and was prompted for the build tool.  I selected &lt;code&gt;figwheel-main&lt;/code&gt; and rather than being prompted for the name of the build to run, I got an error in the mini-buffer.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;error in process filter: Figwheel-main is not available.  Please check https://docs.cider.mx/cider/basics/clojurescript
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same error was seen when looking at the output in the &lt;code&gt;&amp;#42;messages&amp;#42;&lt;/code&gt; buffer.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;nREPL&amp;#93; Starting server via /usr/local/bin/clojure -Sdeps '{:deps {nrepl {:mvn/version &amp;quot;0.6.0&amp;quot;} cider/piggieback {:mvn/version &amp;quot;0.4.1&amp;quot;} refactor-nrepl {:mvn/version &amp;quot;2.5.0-SNAPSHOT&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.22.0-beta8&amp;quot;}}}' -m nrepl.cmdline --middleware '&amp;#91;&amp;quot;refactor-nrepl.middleware/wrap-refactor&amp;quot;, &amp;quot;cider.nrepl/cider-middleware&amp;quot;, &amp;quot;cider.piggieback/wrap-cljs-repl&amp;quot;&amp;#93;'...
&amp;#91;nREPL&amp;#93; server started on 40737
&amp;#91;nREPL&amp;#93; Establishing direct connection to localhost:40737 ...
&amp;#91;nREPL&amp;#93; Direct connection to localhost:40737 established
 error in process filter: user-error: Figwheel-main is not available.
 &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  The web page for the ClojureScript did not automatically open because figwheel-main is not running and the application was not built.&lt;/p&gt;&lt;p&gt;The project fails to run when using &lt;code&gt;cider-jack-in-cljs&lt;/code&gt; as it cannot find the figwheel-main namespace.  This is because CIDER is not being called with the &lt;code&gt;-A:fig&lt;/code&gt; alias, which has a configuration to include figwheel-main as a dependency.&lt;/p&gt;&lt;h2 id="hacking&amp;#95;the&amp;#95;cider&amp;#95;jack-in&amp;#95;command"&gt;Hacking the CIDER jack-in command&lt;/h2&gt;&lt;p&gt;Its very easy to hack the cider-jack-in-* commands command that CIDER uses to start a REPL using the universal argument.&lt;/p&gt;&lt;p&gt;&lt;code&gt;SPC u , &amp;quot;&lt;/code&gt; or &lt;code&gt;SPC u , s j s&lt;/code&gt; calls &lt;code&gt;cider-jack-in-cljs&lt;/code&gt; with the universal argument.  This will display an editable prompt for Cider jack-in in the mini-buffer.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/spacemacs-clojure-cider-jack-in-command-line-hacking.png" alt="Spacemacs Clojure - CIDER jack-in command line hacking" /&gt;&lt;/p&gt;&lt;p&gt;Use the arrow keys to edit this command and  add the &lt;code&gt;-A:fig&lt;/code&gt; option just after the &lt;code&gt;/usr/local/bin/clojure&lt;/code&gt; executable name.&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;/usr/local/bin/clojure -A:fig -Sdeps '{:deps {nrepl {:mvn/version &amp;quot;0.6.0&amp;quot;} cider/piggieback {:mvn/version &amp;quot;0.4.1&amp;quot;} refactor-nrepl {:mvn/version &amp;quot;2.5.0-SNAPSHOT&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.22.0-beta8&amp;quot;}}}' -m nrepl.cmdline --middleware '&amp;#91;&amp;quot;refactor-nrepl.middleware/wrap-refactor&amp;quot;, &amp;quot;cider.nrepl/cider-middleware&amp;quot;, &amp;quot;cider.piggieback/wrap-cljs-repl&amp;quot;&amp;#93;'...
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; Emacs would use C-u before a cider-jack-in-* keybinding, &lt;code&gt;C-u C-c M-J&lt;/code&gt; for the same results. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The &lt;code&gt;&amp;#42;messages&amp;#42;&lt;/code&gt; buffer also shows the edited command line used to start a ClojureScript REPL.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#91;nREPL&amp;#93; Starting server via /usr/local/bin/clojure -A:fig -Sdeps '{:deps {nrepl {:mvn/version &amp;quot;0.6.0&amp;quot;} cider/piggieback {:mvn/version &amp;quot;0.4.1&amp;quot;} refactor-nrepl {:mvn/version &amp;quot;2.5.0-SNAPSHOT&amp;quot;} cider/cider-nrepl {:mvn/version &amp;quot;0.22.0-beta8&amp;quot;}}}' -m nrepl.cmdline --middleware '&amp;#91;&amp;quot;refactor-nrepl.middleware/wrap-refactor&amp;quot;, &amp;quot;cider.nrepl/cider-middleware&amp;quot;, &amp;quot;cider.piggieback/wrap-cljs-repl&amp;quot;&amp;#93;'...
&amp;#91;nREPL&amp;#93; server started on 35247
&amp;#91;nREPL&amp;#93; Establishing direct connection to localhost:35247 ...
&amp;#91;nREPL&amp;#93; Direct connection to localhost:35247 established
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="adding&amp;#95;cider&amp;#95;configuration&amp;#95;with&amp;#95;&lt;code&gt;.dir-locals.el&lt;/code&gt;"&gt;Adding CIDER configuration with &lt;code&gt;.dir-locals.el&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Rather than edit the cider jack-in command options each time, a local configuration file can be created to set a variable defining the :fig alias we want to include when running a REPL for this project.&lt;/p&gt;&lt;p&gt;&lt;code&gt;.dir-locals.el&lt;/code&gt; is an Emacs configuration file in which you can set variables for use with all files within the current directory or its child directories.&lt;/p&gt;&lt;p&gt;&lt;code&gt;SPC SPC add-dir-local-variable&lt;/code&gt; is a simple wizard function to help you create the &lt;code&gt;.dir-locals.el&lt;/code&gt; file.  It will prompt you for the major mode, a variable name and variable value.&lt;/p&gt;&lt;p&gt;This  variable will be used with the &lt;code&gt;clojure-mode&lt;/code&gt; (using &lt;code&gt;nil&lt;/code&gt; rather than &lt;code&gt;clojure-mode&lt;/code&gt; the variable would be applied to all modes).&lt;/p&gt;&lt;p&gt;A variable called &lt;code&gt;cider-clojure-clj-global-options&lt;/code&gt; will be used to set the &lt;code&gt;:fig&lt;/code&gt; alias.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;&amp;#40;clojure-mode . &amp;#40;&amp;#40;cider-clojure-cli-global-options . &amp;quot;-A:fig&amp;quot;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;SPC SPC revert-buffer&lt;/code&gt; on one of the project source code files will load the variable from &lt;code&gt;.dir-locals.el&lt;/code&gt; into Spacemacs.   Otherwise, you can close the project buffer(s) and re-open them to load this variable into Emacs.  Once the buffer is loaded again, running &lt;code&gt;cider-jack-in-cljs&lt;/code&gt; works perfectly.&lt;/p&gt;&lt;p&gt;You can check the results by looking at the &lt;code&gt;&amp;#42;mesages&amp;#42;&lt;/code&gt; buffer and you will see the details of the command that &lt;code&gt;cider-jack-in-cljs&lt;/code&gt; function ran.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; The &lt;code&gt;.dir-locals.el&lt;/code&gt; is a list of lists.  Each inner list contains which maps major mode names (symbols) to alists (see Association Lists). Each alist entry consists of a variable name and the directory-local value to assign to that variable, when the specified major mode is enabled. Instead of a mode name, you can specify ‘nil’, which means that the alist applies to any mode; or you can specify a subdirectory (a string), in which case the alist applies to all files in that subdirectory. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="understanding&amp;#95;the&amp;#95;:fig&amp;#95;alias"&gt;Understanding the :fig alias&lt;/h2&gt;&lt;p&gt;deps.edn has a top-level key called &lt;code&gt;:aliases&lt;/code&gt; that can include one or more alias definitions as maps.  This example is from the &lt;code&gt;figwheel-main&lt;/code&gt; template and has an extra dependency for the &lt;code&gt;figwheel-main&lt;/code&gt; and &lt;code&gt;rebel-readline-cljs&lt;/code&gt; libraries.  So when starting a REPL with this alias, both those dependencies are available in the project.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:aliases
  {:fig
    {:extra-deps
      {com.bhauman/rebel-readline-cljs {:mvn/version &amp;quot;0.1.4&amp;quot;}
       com.bhauman/figwheel-main {:mvn/version &amp;quot;0.1.9&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The alias keeps these develop time libraries out of our application dependencies, as they are not required for running the application.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Leiningen includes figwheel-main as a dependency in the &lt;code&gt;project.clj&lt;/code&gt; file in the &lt;code&gt;:profiles {:dev ,,,}&lt;/code&gt; section. The &lt;code&gt;dev&lt;/code&gt; profile is used by Leiningen by default, so the figwheel-main dependency is always there. &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Using CIDER with projects created with Clojure CLI tools and &lt;code&gt;clj-new&lt;/code&gt; works very well and only requires specification of which alias to use when starting the REPL from within Spacemacs.&lt;/p&gt;&lt;p&gt;If you have multiple aliases needed each time, you can chain them together:&lt;code&gt;-A:fig:build:custom&lt;/code&gt; by editing the jack-in command line or including those aliases in the &lt;code&gt;.dir-locals.el&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/jr0cket'&gt;@jr0cket&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://practicalli.github.io/'&gt;Practicalli - free online books on Spacemacs and Clojure development&lt;/a&gt;&lt;/p&gt;</description><pubDate>Tue, 16 Jul 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/clojure-cli-and-tools-deps/</guid><link>http://practical.li/test-blog/posts/clojure-cli-and-tools-deps/</link><title>Clojure CLI and tools.deps</title><description>&lt;p&gt;Clojure Command Line Interface (CLI) tools provide a fast way for developers to get started with Clojure and simplify an already pretty simple experience.   With tools.deps it also provides a more flexible approach to including libraries, including the use of code from a specific commit in a Git repository.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Newer content can be found in &lt;a href='http://practicalli.github.io/clojure/clojure-tools/using-clojure-tools.html'&gt;Using Clojure tools section of Practicalli Clojure&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt; &lt;a href='https://www.youtube.com/watch?v=JsdgIKUD_6Q&amp;list=PLpr9V-R8ZxiDjyU7cQYWOEFBDR1t7t0wv&amp;index=37'&gt;Practicalli Clojure 35 - Clojure CLI tools - an introduction&lt;/a&gt; is a video of a live broadcast of this content (inclucing typos)&lt;/p&gt;&lt;p&gt;Clojure CLI tools provide:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Running an interactive REPL (Read-Eval-Print Loop)&lt;/li&gt;&lt;li&gt;Running Clojure programs&lt;/li&gt;&lt;li&gt;Evaluating Clojure expressions&lt;/li&gt;&lt;li&gt;Managing dependencies via tools.deps&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Clojure CLI tools allow you to use other libraries to, referred to as dependencies or 'deps'. These may be libraries you are writing locally, projects in git (e.g. on GitHub) or libraries published to Maven Central or &lt;a href='https://clojars.org/'&gt;Clojars&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The Clojure CLI tools can cover the essential features of Clojure Build tools Leiningen and Boot, but are not designed as a complete replacement.  Both these build tools are mature and may have features you would otherwise need to script in Clojure CLI tools.&lt;/p&gt;&lt;p&gt;This article is a follow on from &lt;a href='http://jr0cket.co.uk/2018/07/New-Clojure-REPL-experience-with-Clj-tools-and-rebel-readline.html'&gt;new Clojure REPL Experience With Clojure CLI Tools and Rebel Readline&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;!&amp;ndash; more &amp;ndash;&gt;&lt;/p&gt;&lt;h2 id="getting&amp;#95;started"&gt;Getting started&lt;/h2&gt;&lt;p&gt;Clojure is packaged as a complete library, a JVM JAR file, that is simply included in the project like any other library you would use.  You could just use the Java command line, but then you would need to pass in quite a few arguments as your project added other libraries.&lt;/p&gt;&lt;p&gt;Clojure is a hosted language, so you need to have a Java runtime environment (Java JRE or SDK) and I recommend installing this from &lt;a href='https://adoptopenjdk.net/'&gt;Adopt OpenJDK&lt;/a&gt;.  Installation guides for Java are covered on the &lt;a href='https://clojurebridgelondon.github.io/workshop/development-tools/java.html'&gt;ClojureBridge London website&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The &lt;a href='https://clojure.org/guides/getting_started'&gt;Clojure.org getting started guide&lt;/a&gt; covers instructions for Linux and MacOXS operating systems.  There is also an early access release of clj for windows&lt;/p&gt;&lt;h2 id="basic&amp;#95;usage"&gt;Basic usage&lt;/h2&gt;&lt;p&gt;The installation provides the command called &lt;code&gt;clojure&lt;/code&gt; and a wrapper called &lt;code&gt;clj&lt;/code&gt; that provides a readline program called rlwrap that adds completion and history once the Clojure REPL is running.&lt;/p&gt;&lt;p&gt;Use &lt;code&gt;clj&lt;/code&gt; when you want to run a repl (unless you are using rebel readline instead) and &lt;code&gt;clojure&lt;/code&gt; for everything else.&lt;/p&gt;&lt;p&gt;Start a Clojure REPL using the &lt;code&gt;clj&lt;/code&gt; command in a terminal window.  This does not need to be in a directory containing a Clojure project for a simple REPL.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A Clojure REPL will now run. Type in a Clojure expression and press &lt;code&gt;Return&lt;/code&gt; to see the result&lt;/p&gt;&lt;p&gt;&lt;img src="https://clojure.org/images/content/guides/repl/show-terminal-repl.gif" alt="Clojure CLI Tools REPL" /&gt;&lt;/p&gt;&lt;p&gt;Exit the REPL by typing &lt;code&gt;Ctrl+D&lt;/code&gt; (pressing the &lt;code&gt;Ctrl&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; keys at the same time).&lt;/p&gt;&lt;p&gt;Run a Clojure program in a the given file.  This would be useful if you wanted to run a script or batch jobs.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;clojure script.clj
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aliases can be added that define configurations for a specific build task:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;clojure -A:my-task
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; You can use and legal Clojure keyword name for an alias and include multiple aliases with the &lt;code&gt;clojure&lt;/code&gt; command.  For example in this command we are combining three aliases:  &lt;code&gt;clojure -A:my-task:my-build:my-prefs&lt;/code&gt; &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="what&amp;#95;version&amp;#95;of&amp;#95;clojure&amp;#95;cli&amp;#95;tools&amp;#95;are&amp;#95;installed?"&gt;What version of Clojure CLI tools are installed?&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;deps.edn&lt;/code&gt; file allows you to specify a particular version of the Clojure language the REPL and project use.  You can also evaluate &lt;code&gt;&amp;#42;clojue-version&amp;#42;&lt;/code&gt; in a REPL to see which version of the Clojure language is being used.&lt;/p&gt;&lt;p&gt;&lt;code&gt;clj -Sdescribe&lt;/code&gt; will show you the version of the Clojure CLI tools that is currently installed.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-tools-install-version-describe.png" alt="clojure cli tools - describe install version" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; &lt;code&gt;clj -Sverbose&lt;/code&gt; will also show the version of Clojure CLI tools used before it runs a Rimages &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="deps.edn"&gt;deps.edn&lt;/h2&gt;&lt;p&gt;&lt;code&gt;deps.edn&lt;/code&gt; is a configuration file using extensible data notation (edn), the language that is used to define the structure of Clojure itself.&lt;/p&gt;&lt;p&gt;Configuration is defined using a map with top-level keys for &lt;code&gt;:deps&lt;/code&gt;, &lt;code&gt;:paths&lt;/code&gt;, and &lt;code&gt;:aliases&lt;/code&gt; and any provider-specific keys for configuring dependency sources (e.g. GitHub, GitLab, Bitbucket).&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;#126;/.clojure/deps.edn&lt;/code&gt; for global configurations that you wish to apply to all the projects you work with&lt;/p&gt;&lt;p&gt;&lt;code&gt;project-directory/deps.edn&lt;/code&gt; for project specific settings&lt;/p&gt;&lt;p&gt;The installation directory may also contain a &lt;code&gt;deps.edn&lt;/code&gt; file.  On my Ubuntu Linux system this location is &lt;code&gt;/usr/local/lib/clojure/deps.edn&lt;/code&gt; and contains the following configuration.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{
  :paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;

  :deps {
    org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}
  }

  :aliases {
    :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version &amp;quot;0.6.496&amp;quot;}}}
    :test {:extra-paths &amp;#91;&amp;quot;test&amp;quot;&amp;#93;}
  }

  :mvn/repos {
    &amp;quot;central&amp;quot; {:url &amp;quot;https://repo1.maven.org/maven2/&amp;quot;}
    &amp;quot;clojars&amp;quot; {:url &amp;quot;https://repo.clojars.org/&amp;quot;}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt; Note: the install &lt;code&gt;deps.edn&lt;/code&gt; is now depreciated and will not be included in a future version of the Clojure CLI tools. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The deps.edn files in each of these locations (if they exist) are merged to form one combined dependency configuration. The merge is done in the order above install/config/local, last one wins. The operation is essentially merge-with merge, except for the :paths key, where only the last one found is used (they are not combined).&lt;/p&gt;&lt;p&gt;You can use the &lt;code&gt;-Sverbose&lt;/code&gt; option to see all of the actual directory locations.&lt;/p&gt;&lt;p&gt;Much more detail is covered in the Clojure.org article - &lt;a href='https://clojure.org/reference/deps_and_cli'&gt;deps and cli&lt;/a&gt;&lt;/p&gt;&lt;h2 id="using&amp;#95;libraries&amp;#95;-&amp;#95;deps.edn"&gt;Using Libraries - deps.edn&lt;/h2&gt;&lt;p&gt;&lt;code&gt;deps.edn&lt;/code&gt; file in the top level of your project can be used to include libraries in your project.  These may be libraries you are writing locally, projects in git (e.g. on GitHub) or libraries published to Maven Central or &lt;a href='https://clojars.org/'&gt;Clojars&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Include a library by providing its name and other aspects like version.  This information can be found on &lt;a href='https://clojars.org/'&gt;Clojars&lt;/a&gt; if the library is published there.&lt;/p&gt;&lt;p&gt;Libraries as JAR files will be cached in the &lt;code&gt;$HOME/.m2/repository&lt;/code&gt; directory.&lt;/p&gt;&lt;h3 id="example&amp;#95;clj-time"&gt;Example clj-time&lt;/h3&gt;&lt;p&gt;Declare &lt;a href='https://github.com/dm3/clojure.java-time'&gt;&lt;code&gt;clojure.java-time&lt;/code&gt;&lt;/a&gt; as a dependency in the &lt;code&gt;deps.edn&lt;/code&gt; file, so Clojure CLI tools can downloaded the library and add it to the classpath.&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:deps
 {org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}
  clojure.java-time {:mvn/version &amp;quot;0.3.2&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="writing&amp;#95;code"&gt;Writing code&lt;/h2&gt;&lt;p&gt;For larger projects you should definately find an editor you find productive and has great CLojure support.  You can write code in the REPL and you can just run a specific file of code, if you dont want to set up a full project.&lt;/p&gt;&lt;p&gt;Create a directory &lt;code&gt;what-time-is-it&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Create a &lt;code&gt;deps.edn&lt;/code&gt; file in this directory with the following code:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;
 :deps {org.clojure/clojure {:mvn/version &amp;quot;1.10.1&amp;quot;}
        clojure.java-time {:mvn/version &amp;quot;0.3.2&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a &lt;code&gt;src&lt;/code&gt; directory and the source code file &lt;code&gt;src/practicalli/what&amp;#95;time&amp;#95;is&amp;#95;it.clj&lt;/code&gt; which contains the following code:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;&amp;#40;ns practicalli.what-time-is-it
  &amp;#40;:require &amp;#91;java-time :as time&amp;#93;&amp;#41;&amp;#41;

&amp;#40;defn -main &amp;#91;&amp;#93;
  &amp;#40;println &amp;quot;The time according to Clojure java-time is:&amp;quot;
           &amp;#40;time/local-date-time&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code has a static entry point named &lt;code&gt;-main&lt;/code&gt; that can be called from Clojure CLI tools. The &lt;code&gt;-m&lt;/code&gt; option defines the main namespace and by default the &lt;code&gt;-main&lt;/code&gt; function is called from that namespace.  So the Clojure CLI tools provide program launcher for a specific namespace:&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clojure -m practicalli.what-time-is-it

The time according to Clojure java-time is: #object&amp;#91;java.time.LocalDateTime 0x635e9727 2019-08-05T16:04:52.582&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="using&amp;#95;libraries&amp;#95;from&amp;#95;other&amp;#95;places"&gt;Using libraries from other places&lt;/h2&gt;&lt;p&gt;With &lt;code&gt;deps.edn&lt;/code&gt; you are not limited to using just dependencies from JAR files, its much easier to pull code from anywhere.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://clojure.org/guides/deps_and_cli#_using_local_libraries'&gt;Using local libraries&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://clojure.org/guides/deps_and_cli#_using_git_libraries'&gt;Using git libraries&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt; TODO: Expand on this section in another article with some useful examples &lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="rebel&amp;#95;readline"&gt;rebel readline&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/bhauman/rebel-readline'&gt;Rebel readline&lt;/a&gt; enhances the REPL experience by providing multi-line editing with auto-indenting, language completions, syntax highlighting and function argument hints as you code.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://jr0cket.co.uk/2018/07/New-Clojure-REPL-experience-with-Clj-tools-and-rebel-readline.html'&gt;New Clojure REPL experience with Clj tools and rebel readline&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Video: &lt;a href='https://www.youtube.com/watch?v=u8B65_a_QYE'&gt;rebel-readline in Clojure CLI REPL&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="clj-new"&gt;clj-new&lt;/h2&gt;&lt;p&gt;&lt;a href='https://github.com/seancorfield/clj-new'&gt;clj-new&lt;/a&gt; is a tool to generate new projects from its own small set of templates.  You can also create your own clj-new templates.  It is also possible to generate projects from Leiningen or Boot templates, however, this does not create a &lt;code&gt;deps.edn&lt;/code&gt; file for Clojure CLI tools, it just creates the project as it would from either Leiningen or Boot.&lt;/p&gt;&lt;p&gt;Add &lt;code&gt;clj-new&lt;/code&gt; as an alias in your &lt;code&gt;&amp;#126;/.clojure/deps.edn&lt;/code&gt; like this:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{

:aliases
 {:new {:extra-deps {seancorfield/clj-new
                     {:mvn/version &amp;quot;0.7.6&amp;quot;}}
        :main-opts &amp;#91;&amp;quot;-m&amp;quot; &amp;quot;clj-new.create&amp;quot;&amp;#93;}}

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a Clojure CLI tools project using the &lt;code&gt;clj-new&lt;/code&gt; app template&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clj -A:new app myname/myapp
cd myapp
clj -m myname.myapp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; template creates a couple of tests to go along with the sample code.  We can use the cognitec test runner to run these tests using the &lt;code&gt;:test&lt;/code&gt; alias&lt;/p&gt;&lt;pre&gt;&lt;code class="shell"&gt;clj -A:test:runner
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;clj-new&lt;/code&gt; currently has the following built-in templates:&lt;/p&gt;&lt;p&gt;&lt;code&gt;app&lt;/code&gt; -- a &lt;code&gt;deps.edn&lt;/code&gt; project with sample code, tests and the congnitect test runner, clj -A:test:runner.  This project includes &lt;code&gt;:gensys&lt;/code&gt; directive, so can be run as an application on the command line via &lt;code&gt;clj -m&lt;/code&gt; &lt;code&gt;lib&lt;/code&gt; -- the same as the &lt;code&gt;app&lt;/code&gt; template, but without the &lt;code&gt;:gensys&lt;/code&gt; directive as this is mean to be a library. &lt;code&gt;template&lt;/code&gt; &amp;ndash; the basis for creating your own templates.&lt;/p&gt;&lt;h2 id="figwheel-main"&gt;figwheel-main&lt;/h2&gt;&lt;p&gt;Use the &lt;a href='https://github.com/bhauman/figwheel-main-template'&gt;figwheel-main template&lt;/a&gt; to create a project for a simple Clojurescript project, optionally with one or reagent, rum or om libraries.&lt;/p&gt;&lt;h2 id="defining&amp;#95;aliases"&gt;Defining aliases&lt;/h2&gt;&lt;p&gt;An alias is a way to add optional configuration to your project which is included when you use the alias name when running &lt;code&gt;clojure&lt;/code&gt; or &lt;code&gt;clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We will cover examples of using aliases as we discover more about Clojure CLI tools.  For now, take a look at &lt;a href='https://www.youtube.com/watch?v=CWjUccpFvrg'&gt;Clojure CLI and deps.edn&lt;/a&gt; - video by Sean Corfield&lt;/p&gt;&lt;h2 id="multiple&amp;#95;versions&amp;#95;of&amp;#95;clojure&amp;#95;cli&amp;#95;tools"&gt;Multiple versions of Clojure CLI tools&lt;/h2&gt;&lt;p&gt;Installing CLI tools downloads a tar file that contains the installation files, the executables, man pages, a default &lt;code&gt;deps.edn&lt;/code&gt; file, an &lt;code&gt;example-deps.edn&lt;/code&gt; and a Jar file.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-tools-install-tar-contents.png" alt="Clojure cli tools - install - tar contents" /&gt;&lt;/p&gt;&lt;p&gt;The jar file is installed in a directory called &lt;code&gt;libexec&lt;/code&gt; is not removed when installing newer versions of the Clojure CLI tools, so you may find multiple versions inside the &lt;code&gt;libexec&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;&lt;img src="/test-blog/images/clojure-cli-tools-install-multiple-versions.png" alt="Clojure CLI tools - install - multiple versions" /&gt;&lt;/p&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Despite the seemingly stripped-down set of options available in deps.edn (just :paths, :deps, and :aliases), it turns out that the &lt;code&gt;:aliases&lt;/code&gt; feature really provides all you need to bootstrap a wide variety of build tasks directly into the clojure command.  The Clojure community is building lots of tools on top of Clojure CLI tools to provide richer features that can simply be added as an alias.&lt;/p&gt;&lt;p&gt;What I really like best about this approach is that I can now introduce new programmers to Clojure using command line conventions that they are likely already familiar with coming from many other popular languages like perl, python, ruby, or node.&lt;/p&gt;&lt;h2 id="references"&gt;References&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://gitlab.com/lambdatronic/clojure-webapp-template'&gt;Clojure CLI webapp template&lt;/a&gt; - @lambdatronic&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/oakes/full-stack-clj-example'&gt;A sample full stack Clojure CLI project&lt;/a&gt; - @oakes&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/juxt/edge'&gt;JUXT Edge - a clojure application foundation&lt;/a&gt; - @juxt&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thank you. &lt;a href='https://twitter.com/jr0cket'&gt;@jr0cket&lt;/a&gt;&lt;/p&gt;</description><pubDate>Sat, 13 Jul 2019 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/testing-live-coding/</guid><link>http://practical.li/test-blog/posts/testing-live-coding/</link><title>Testing Klipse Integration</title><description>&lt;p&gt; A simple article to test the klipse integration&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; Lets do some simple Clojure code&lt;/p&gt;&lt;pre&gt;&lt;code class="klipse-clj nohighlight"&gt;(map inc [1 2 3 4 5])
 &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That should be code that can be evaluated in klipse.&lt;/p&gt;&lt;p&gt;Klipse only works when showing the full article, it does not display in the preview.&lt;/p&gt;&lt;p&gt;Thank you.&lt;/p&gt;</description><pubDate>Mon, 17 Oct 2016 00:00:00 +0100</pubDate></item><item><guid>http://practical.li/test-blog/posts/2016-01-07-docs/</guid><link>http://practical.li/test-blog/posts/2016-01-07-docs/</link><title>Quick Start Guide</title><description>&lt;p&gt;This intro only documents a subset of Cryogen's features. For additional documentation please see the &lt;a href='http://cryogenweb.org'&gt;cryogen site&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="features"&gt;Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Blog posts and pages with Markdown (default) or AsciiDoc&lt;/li&gt;&lt;li&gt;Tags&lt;/li&gt;&lt;li&gt;Table of contents generation&lt;/li&gt;&lt;li&gt;Plain HTML page templates&lt;/li&gt;&lt;li&gt;Code syntax highlighting&lt;/li&gt;&lt;li&gt;Disqus support&lt;/li&gt;&lt;li&gt;Sitemap generation&lt;/li&gt;&lt;li&gt;RSS feed generation&lt;/li&gt;&lt;li&gt;Sass/SCSS compilation&lt;/li&gt;&lt;li&gt;Klipse Integration&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;You will need &lt;a href='https://github.com/technomancy/leiningen'&gt;Leiningen&lt;/a&gt; 2.5.0 or above installed.&lt;/p&gt;&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;&lt;h3 id="creating&amp;#95;a&amp;#95;new&amp;#95;site"&gt;Creating a New Site&lt;/h3&gt;&lt;p&gt;A new site can be created using the Cryogen template as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="running&amp;#95;the&amp;#95;server"&gt;Running the Server&lt;/h3&gt;&lt;p&gt;The web server can be started from the &lt;code&gt;my-blog&lt;/code&gt; directory using the &lt;code&gt;lein-ring&lt;/code&gt; plugin:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The server will watch for changes in the &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;themes&lt;/code&gt; folders and recompile the content automatically.&lt;/p&gt;&lt;p&gt;You can also generate the content without bringing up a server via:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;lein run
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="site&amp;#95;configuration"&gt;Site Configuration&lt;/h3&gt;&lt;p&gt;The site configuration file is found at &lt;code&gt;content/config.edn&lt;/code&gt;, this file looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;{:site-title           &amp;quot;My Awesome Blog&amp;quot;
 :author               &amp;quot;Bob Bobbert&amp;quot;
 :description          &amp;quot;This blog is awesome&amp;quot;
 :site-url             &amp;quot;http://blogawesome.com/&amp;quot;
 :post-root            &amp;quot;posts&amp;quot;
 :page-root            &amp;quot;pages&amp;quot;
 :post-root-uri        &amp;quot;posts-output&amp;quot;
 :page-root-uri        &amp;quot;pages-output&amp;quot;
 :tag-root-uri         &amp;quot;tags-output&amp;quot;
 :author-root-uri      &amp;quot;authors-output&amp;quot;
 :public-dest          &amp;quot;public&amp;quot;
 :blog-prefix          &amp;quot;/blog&amp;quot;
 :rss-name             &amp;quot;feed.xml&amp;quot;
 :rss-filters          &amp;#91;&amp;quot;cryogen&amp;quot;&amp;#93;
 :recent-posts         3
 :post-date-format     &amp;quot;yyyy-MM-dd&amp;quot;
 :archive-group-format &amp;quot;yyyy MMMM&amp;quot;
 :sass-src             &amp;#91;&amp;#93;
 :sass-path            &amp;quot;sass&amp;quot;
 :compass-path         &amp;quot;compass&amp;quot;
 :theme                &amp;quot;blue&amp;quot;
 :resources            &amp;#91;&amp;quot;img&amp;quot;&amp;#93;
 :keep-files           &amp;#91;&amp;quot;.git&amp;quot;&amp;#93;
 :disqus?              false
 :disqus-shortname     &amp;quot;&amp;quot;
 :ignored-files        &amp;#91;#&amp;quot;\.#.&amp;#42;&amp;quot; #&amp;quot;.&amp;#42;\.swp$&amp;quot;&amp;#93;
 :previews?            false
 :posts-per-page       5
 :blocks-per-preview   2
 :clean-urls           :trailing-slash
 :collapse-subdirs?    false
 :hide-future-posts?   true
 :klipse               {}
 :debug?               false}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For information about each key please see the &lt;a href='http://cryogenweb.org/docs/configuration.html'&gt;"Configuration"&lt;/a&gt; portion of the Cryogen documentation site.&lt;/p&gt;&lt;h3 id="switching&amp;#95;between&amp;#95;markdown&amp;#95;and&amp;#95;asciidoc"&gt;Switching between Markdown and AsciiDoc&lt;/h3&gt;&lt;p&gt;Cryogen comes with Markdown support as default. If you want to use AsciiDoc instead, open the &lt;code&gt;project.clj&lt;/code&gt; in your created blog (e.g. &lt;code&gt;my-blog&lt;/code&gt;), and change the line in &lt;code&gt;:dependencies&lt;/code&gt; that says &lt;code&gt;cryogen-markdown&lt;/code&gt; to &lt;code&gt;cryogen-asciidoc&lt;/code&gt;. Instead of looking for files ending in &lt;code&gt;.md&lt;/code&gt; in the &lt;code&gt;content/md&lt;/code&gt; directory, the compiler will now look for files ending in &lt;code&gt;.asc&lt;/code&gt; in the &lt;code&gt;content/asc&lt;/code&gt; directory.&lt;/p&gt;&lt;h3 id="selecting&amp;#95;a&amp;#95;theme"&gt;Selecting a Theme&lt;/h3&gt;&lt;p&gt;The Cryogen template comes with three themes in the &lt;code&gt;themes&lt;/code&gt; folder. To change your blog's theme, change the value of the &lt;code&gt;:theme&lt;/code&gt; key in &lt;code&gt;config.edn&lt;/code&gt;. Note that the Nucleus theme is obtained from &lt;a href='http://www.downloadwebsitetemplates.co.uk/template/nucleus/'&gt;downloadwebsitetemplates.co.uk&lt;/a&gt; that requires you to keep the footer, unless you make a donation on their website.&lt;/p&gt;&lt;h3 id="customizing&amp;#95;layouts"&gt;Customizing Layouts&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://github.com/yogthos/Selmer'&gt;Selmer&lt;/a&gt; templating engine for layouts. Please refer to its documentation to see the supported tags and filters for the layouts.&lt;/p&gt;&lt;p&gt;The layouts are contained in the &lt;code&gt;themes/{theme}/html&lt;/code&gt; folder of the project. By default, the &lt;code&gt;base.html&lt;/code&gt; layout is used to provide the general layout for the site. This is where you would add static resources such as CSS and JavaScript assets as well as define headers and footers for your site.&lt;/p&gt;&lt;p&gt;Each page layout should have a name that matches the &lt;code&gt;:layout&lt;/code&gt; key in the page metadata and end with &lt;code&gt;.html&lt;/code&gt;. Page layouts extend the base layout and should only contain the content relaveant to the page inside the &lt;code&gt;content&lt;/code&gt; block. For example, the &lt;code&gt;tag&lt;/code&gt; layout is located in &lt;code&gt;tag.html&lt;/code&gt; and looks as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class="xml"&gt;{% extends &amp;quot;/html/base.html&amp;quot; %}
{% block content %}
&amp;lt;div id=&amp;quot;posts-by-tag&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Posts tagged {{name}}&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
    {% for post in posts %}
        &amp;lt;li&amp;gt;
            &amp;lt;a href=&amp;quot;{{post.uri}}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="code&amp;#95;syntax&amp;#95;highlighting"&gt;Code Syntax Highlighting&lt;/h3&gt;&lt;p&gt;Cryogen uses &lt;a href='https://highlightjs.org/'&gt;Highlight.js&lt;/a&gt; for code syntax highlighting. You can add more languages by replacing &lt;code&gt;themes/{theme}/js/highlight.pack.js&lt;/code&gt; with a customized package from &lt;a href='https://highlightjs.org/download/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt; initHighlightingOnLoad&lt;/code&gt; function is called in &lt;code&gt;themes/{theme}/html/base.html&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad&amp;#40;&amp;#41;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="deploying&amp;#95;your&amp;#95;site"&gt;Deploying Your Site&lt;/h2&gt;&lt;p&gt;The generated static content will be found under the &lt;code&gt;public&lt;/code&gt; folder. Simply copy the content to a static folder for a server such as Nginx or Apache and your site is now ready for service.&lt;/p&gt;&lt;p&gt;A sample Nginx configuration that's placed in &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt; can be seen below:&lt;/p&gt;&lt;pre&gt;&lt;code class="javascript"&gt;server {
  listen 80 default&amp;#95;server;
  listen &amp;#91;::&amp;#93;:80 default&amp;#95;server ipv6only=on;
  server&amp;#95;name localhost &amp;lt;yoursite.com&amp;gt; &amp;lt;www.yoursite.com&amp;gt;;

  access&amp;#95;log  /var/log/blog&amp;#95;access.log;
  error&amp;#95;log   /var/log/blog&amp;#95;error.log;

  location / {
    alias       /var/blog/;
    error&amp;#95;page  404 = /404.html;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simply set &lt;code&gt;yoursite.com&lt;/code&gt; to the domain of your site in the above configuration and ensure the static content is available at &lt;code&gt;/var/blog/&lt;/code&gt;. Finally, place your custom error page in the &lt;code&gt;/var/blog/404.html&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;More information on deployment can be found &lt;a href='http://cryogenweb.org/docs/deploying-to-github-pages.html'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="third&amp;#95;party&amp;#95;libraries"&gt;Third Party Libraries&lt;/h2&gt;&lt;h4 id="https://github.com/greywolve/cryogen-markdown-external"&gt;https://github.com/greywolve/cryogen-markdown-external&lt;/h4&gt;&lt;p&gt;A Clojure library to provide Markdown rendering to the cryogen-core compiler by using an external command/program, such as pandoc.&lt;/p&gt;&lt;h2 id="some&amp;#95;sites&amp;#95;made&amp;#95;with&amp;#95;cryogen"&gt;Some Sites Made With Cryogen&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='http://carmen.la/blog/archives'&gt;My personal blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://cryogenweb.org'&gt;Cryogen Documentation Site&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://yogthos.net/'&gt;Yogthos' blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.chadstovern.com'&gt;Chad Stovern's blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.szcz.org/'&gt;szcz&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://blog.isvit.info'&gt;ISvit blog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://lambdafunk.com'&gt;Lambda Funk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://ddft.wiki'&gt;DDFT.wiki&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/2014-11-04-second-post/</guid><link>http://practical.li/test-blog/posts/2014-11-04-second-post/</link><title>Yet Another Post</title><description>&lt;h3 id="this&amp;#95;post&amp;#95;so&amp;#95;fetch"&gt;This Post So Fetch&lt;/h3&gt;&lt;p&gt;some more stuff happened&lt;/p&gt;</description><pubDate>Tue, 04 Nov 2014 00:00:00 +0000</pubDate></item><item><guid>http://practical.li/test-blog/posts/2014-03-10-first-post/</guid><link>http://practical.li/test-blog/posts/2014-03-10-first-post/</link><title>A Post</title><description>&lt;h3 id="this&amp;#95;post&amp;#95;not&amp;#95;fetch&amp;#95;enough"&gt;This Post Not Fetch Enough&lt;/h3&gt;&lt;p&gt;some stuff happened&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; Stop trying to make fetch happen. &lt;/p&gt;&lt;footer&gt; Regina&lt;/footer&gt;&lt;/blockquote&gt;</description><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate></item></channel></rss>